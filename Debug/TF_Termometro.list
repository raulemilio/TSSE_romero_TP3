
TF_Termometro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007200  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  080073b0  080073b0  000173b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800781c  0800781c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800781c  0800781c  0001781c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007824  08007824  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007824  08007824  00017824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007828  08007828  00017828  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800782c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000138  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000318  20000318  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb73  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020bc  00000000  00000000  0002ed83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd0  00000000  00000000  00030e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c00  00000000  00000000  00031b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024903  00000000  00000000  00032710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fe61  00000000  00000000  00057013  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7dcc  00000000  00000000  00066e74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ec40  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000046e8  00000000  00000000  0013ec90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007398 	.word	0x08007398

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	08007398 	.word	0x08007398

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <BMP280_Read8>:

//
//	Functions
//
uint8_t BMP280_Read8(uint8_t addr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp[2];
	tmp[0] = addr;
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);//el bit mas sig debe estar en 1 para lectura
 8000eda:	7b3b      	ldrb	r3, [r7, #12]
 8000edc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000ee0:	b2db      	uxtb	r3, r3
 8000ee2:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_8,BMP280_TIMEOUT);
 8000ee4:	f107 030c 	add.w	r3, r7, #12
 8000ee8:	220a      	movs	r2, #10
 8000eea:	2102      	movs	r1, #2
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fb51 	bl	8001594 <BMP280_SPI_TransmitReceive>
	return tmp[1];
 8000ef2:	7b7b      	ldrb	r3, [r7, #13]
}
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	3710      	adds	r7, #16
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}

08000efc <BMP280_Read16>:

uint16_t BMP280_Read16(uint8_t addr)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b084      	sub	sp, #16
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[3];
	tmp[0] = addr;
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);
 8000f0a:	7b3b      	ldrb	r3, [r7, #12]
 8000f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_16,BMP280_TIMEOUT);
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	220a      	movs	r2, #10
 8000f1a:	2103      	movs	r1, #3
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f000 fb39 	bl	8001594 <BMP280_SPI_TransmitReceive>
	return ((tmp[1] << 8) | tmp[2]);
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	b21a      	sxth	r2, r3
 8000f28:	7bbb      	ldrb	r3, [r7, #14]
 8000f2a:	b21b      	sxth	r3, r3
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	b21b      	sxth	r3, r3
 8000f30:	b29b      	uxth	r3, r3
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	3710      	adds	r7, #16
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <BMP280_Read16LE>:

uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	b084      	sub	sp, #16
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	4603      	mov	r3, r0
 8000f42:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;
	tmp = BMP280_Read16(addr);
 8000f44:	79fb      	ldrb	r3, [r7, #7]
 8000f46:	4618      	mov	r0, r3
 8000f48:	f7ff ffd8 	bl	8000efc <BMP280_Read16>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000f50:	89fb      	ldrh	r3, [r7, #14]
 8000f52:	0a1b      	lsrs	r3, r3, #8
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	b21a      	sxth	r2, r3
 8000f58:	89fb      	ldrh	r3, [r7, #14]
 8000f5a:	021b      	lsls	r3, r3, #8
 8000f5c:	b21b      	sxth	r3, r3
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	b21b      	sxth	r3, r3
 8000f62:	b29b      	uxth	r3, r3
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <BMP280_Write8>:

void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b084      	sub	sp, #16
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	4603      	mov	r3, r0
 8000f74:	460a      	mov	r2, r1
 8000f76:	71fb      	strb	r3, [r7, #7]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];
	tmp[0] = address;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	733b      	strb	r3, [r7, #12]
	tmp[0] &=~(1<<7);//el bit mas sig debe estar en 0 para escritura
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8000f8a:	79bb      	ldrb	r3, [r7, #6]
 8000f8c:	737b      	strb	r3, [r7, #13]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_8,BMP280_TIMEOUT);
 8000f8e:	f107 030c 	add.w	r3, r7, #12
 8000f92:	220a      	movs	r2, #10
 8000f94:	2102      	movs	r1, #2
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 fafc 	bl	8001594 <BMP280_SPI_TransmitReceive>
}
 8000f9c:	bf00      	nop
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <BMP280_Read24>:

uint32_t BMP280_Read24(uint8_t addr)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	4603      	mov	r3, r0
 8000fac:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[4];
	tmp[0] = addr;
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<7);//el bit mas sig debe estar en 1 para lectura
 8000fb2:	7b3b      	ldrb	r3, [r7, #12]
 8000fb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_24,BMP280_TIMEOUT);
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	220a      	movs	r2, #10
 8000fc2:	2103      	movs	r1, #3
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f000 fae5 	bl	8001594 <BMP280_SPI_TransmitReceive>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8000fca:	7b7b      	ldrb	r3, [r7, #13]
 8000fcc:	041a      	lsls	r2, r3, #16
 8000fce:	7bbb      	ldrb	r3, [r7, #14]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	7bfa      	ldrb	r2, [r7, #15]
 8000fd6:	4313      	orrs	r3, r2
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	3710      	adds	r7, #16
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <BMP280_Init>:

void BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t mode)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	460b      	mov	r3, r1
 8000fea:	70fb      	strb	r3, [r7, #3]
 8000fec:	4613      	mov	r3, r2
 8000fee:	70bb      	strb	r3, [r7, #2]
	spi_h = spi_handler;
 8000ff0:	4a29      	ldr	r2, [pc, #164]	; (8001098 <BMP280_Init+0xb8>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ffc:	4827      	ldr	r0, [pc, #156]	; (800109c <BMP280_Init+0xbc>)
 8000ffe:	f001 fa37 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8001002:	2005      	movs	r0, #5
 8001004:	f000 ff7e 	bl	8001f04 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100e:	4823      	ldr	r0, [pc, #140]	; (800109c <BMP280_Init+0xbc>)
 8001010:	f001 fa2e 	bl	8002470 <HAL_GPIO_WritePin>

	if (mode > BMP280_NORMALMODE)
 8001014:	78bb      	ldrb	r3, [r7, #2]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d901      	bls.n	800101e <BMP280_Init+0x3e>
	    mode = BMP280_NORMALMODE;
 800101a:	2303      	movs	r3, #3
 800101c:	70bb      	strb	r3, [r7, #2]
	_mode = mode;
 800101e:	4a20      	ldr	r2, [pc, #128]	; (80010a0 <BMP280_Init+0xc0>)
 8001020:	78bb      	ldrb	r3, [r7, #2]
 8001022:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 8001024:	78bb      	ldrb	r3, [r7, #2]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d101      	bne.n	800102e <BMP280_Init+0x4e>
		mode = BMP280_SLEEPMODE;
 800102a:	2300      	movs	r3, #0
 800102c:	70bb      	strb	r3, [r7, #2]

	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 800102e:	78fb      	ldrb	r3, [r7, #3]
 8001030:	2b05      	cmp	r3, #5
 8001032:	d901      	bls.n	8001038 <BMP280_Init+0x58>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 8001034:	2305      	movs	r3, #5
 8001036:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001038:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <BMP280_Init+0xc4>)
 800103a:	78fb      	ldrb	r3, [r7, #3]
 800103c:	7013      	strb	r3, [r2, #0]

	while(BMP280_Read8(BMP280_CHIPID) != 0x58);
 800103e:	bf00      	nop
 8001040:	20d0      	movs	r0, #208	; 0xd0
 8001042:	f7ff ff43 	bl	8000ecc <BMP280_Read8>
 8001046:	4603      	mov	r3, r0
 8001048:	2b58      	cmp	r3, #88	; 0x58
 800104a:	d1f9      	bne.n	8001040 <BMP280_Init+0x60>

	/* read calibration data */
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 800104c:	2088      	movs	r0, #136	; 0x88
 800104e:	f7ff ff74 	bl	8000f3a <BMP280_Read16LE>
 8001052:	4603      	mov	r3, r0
 8001054:	461a      	mov	r2, r3
 8001056:	4b14      	ldr	r3, [pc, #80]	; (80010a8 <BMP280_Init+0xc8>)
 8001058:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 800105a:	208a      	movs	r0, #138	; 0x8a
 800105c:	f7ff ff6d 	bl	8000f3a <BMP280_Read16LE>
 8001060:	4603      	mov	r3, r0
 8001062:	b21a      	sxth	r2, r3
 8001064:	4b11      	ldr	r3, [pc, #68]	; (80010ac <BMP280_Init+0xcc>)
 8001066:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 8001068:	208c      	movs	r0, #140	; 0x8c
 800106a:	f7ff ff66 	bl	8000f3a <BMP280_Read16LE>
 800106e:	4603      	mov	r3, r0
 8001070:	b21a      	sxth	r2, r3
 8001072:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <BMP280_Init+0xd0>)
 8001074:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, (temperature_resolution<<5)| mode);
 8001076:	78fb      	ldrb	r3, [r7, #3]
 8001078:	015b      	lsls	r3, r3, #5
 800107a:	b25a      	sxtb	r2, r3
 800107c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001080:	4313      	orrs	r3, r2
 8001082:	b25b      	sxtb	r3, r3
 8001084:	b2db      	uxtb	r3, r3
 8001086:	4619      	mov	r1, r3
 8001088:	20f4      	movs	r0, #244	; 0xf4
 800108a:	f7ff ff6f 	bl	8000f6c <BMP280_Write8>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200001fc 	.word	0x200001fc
 800109c:	40020c00 	.word	0x40020c00
 80010a0:	20000201 	.word	0x20000201
 80010a4:	20000200 	.word	0x20000200
 80010a8:	20000206 	.word	0x20000206
 80010ac:	20000202 	.word	0x20000202
 80010b0:	20000204 	.word	0x20000204

080010b4 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b086      	sub	sp, #24
 80010b8:	af00      	add	r7, sp, #0
  int32_t var1, var2;

  if(_mode == BMP280_FORCEDMODE)
 80010ba:	4b3d      	ldr	r3, [pc, #244]	; (80011b0 <BMP280_ReadTemperature+0xfc>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	2b01      	cmp	r3, #1
 80010c0:	d16d      	bne.n	800119e <BMP280_ReadTemperature+0xea>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);
 80010c2:	20f4      	movs	r0, #244	; 0xf4
 80010c4:	f7ff ff02 	bl	8000ecc <BMP280_Read8>
 80010c8:	4603      	mov	r3, r0
 80010ca:	75fb      	strb	r3, [r7, #23]
	  ctrl &= ~(0x03); // si no es forceMode
 80010cc:	7dfb      	ldrb	r3, [r7, #23]
 80010ce:	f023 0303 	bic.w	r3, r3, #3
 80010d2:	75fb      	strb	r3, [r7, #23]
	  ctrl |= BMP280_FORCEDMODE;
 80010d4:	7dfb      	ldrb	r3, [r7, #23]
 80010d6:	f043 0301 	orr.w	r3, r3, #1
 80010da:	75fb      	strb	r3, [r7, #23]
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 80010dc:	7dfb      	ldrb	r3, [r7, #23]
 80010de:	4619      	mov	r1, r3
 80010e0:	20f4      	movs	r0, #244	; 0xf4
 80010e2:	f7ff ff43 	bl	8000f6c <BMP280_Write8>

	  mode = BMP280_Read8(BMP280_CONTROL); 	// Read written mode
 80010e6:	20f4      	movs	r0, #244	; 0xf4
 80010e8:	f7ff fef0 	bl	8000ecc <BMP280_Read8>
 80010ec:	4603      	mov	r3, r0
 80010ee:	75bb      	strb	r3, [r7, #22]
	  mode &= 0x03;							// Do not work without it...
 80010f0:	7dbb      	ldrb	r3, [r7, #22]
 80010f2:	f003 0303 	and.w	r3, r3, #3
 80010f6:	75bb      	strb	r3, [r7, #22]

	  if(mode == BMP280_FORCEDMODE)
 80010f8:	7dbb      	ldrb	r3, [r7, #22]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d14f      	bne.n	800119e <BMP280_ReadTemperature+0xea>
	  {
		  while(1) // Wait for end of conversion
		  {
			  mode = BMP280_Read8(BMP280_CONTROL);
 80010fe:	20f4      	movs	r0, #244	; 0xf4
 8001100:	f7ff fee4 	bl	8000ecc <BMP280_Read8>
 8001104:	4603      	mov	r3, r0
 8001106:	75bb      	strb	r3, [r7, #22]
			  mode &= 0x03;
 8001108:	7dbb      	ldrb	r3, [r7, #22]
 800110a:	f003 0303 	and.w	r3, r3, #3
 800110e:	75bb      	strb	r3, [r7, #22]
			  if(mode == BMP280_SLEEPMODE)
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d000      	beq.n	8001118 <BMP280_ReadTemperature+0x64>
			  mode = BMP280_Read8(BMP280_CONTROL);
 8001116:	e7f2      	b.n	80010fe <BMP280_ReadTemperature+0x4a>
				  break;
 8001118:	bf00      	nop
		  }

		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 800111a:	20fa      	movs	r0, #250	; 0xfa
 800111c:	f7ff ff42 	bl	8000fa4 <BMP280_Read24>
 8001120:	4603      	mov	r3, r0
 8001122:	613b      	str	r3, [r7, #16]
		  adc_T >>= 4;
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	111b      	asrs	r3, r3, #4
 8001128:	613b      	str	r3, [r7, #16]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	10da      	asrs	r2, r3, #3
 800112e:	4b21      	ldr	r3, [pc, #132]	; (80011b4 <BMP280_ReadTemperature+0x100>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 8001136:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <BMP280_ReadTemperature+0x104>)
 8001138:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 800113c:	fb02 f303 	mul.w	r3, r2, r3
 8001140:	12db      	asrs	r3, r3, #11
 8001142:	60fb      	str	r3, [r7, #12]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	111b      	asrs	r3, r3, #4
 8001148:	4a1a      	ldr	r2, [pc, #104]	; (80011b4 <BMP280_ReadTemperature+0x100>)
 800114a:	8812      	ldrh	r2, [r2, #0]
 800114c:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800114e:	693a      	ldr	r2, [r7, #16]
 8001150:	1112      	asrs	r2, r2, #4
 8001152:	4918      	ldr	r1, [pc, #96]	; (80011b4 <BMP280_ReadTemperature+0x100>)
 8001154:	8809      	ldrh	r1, [r1, #0]
 8001156:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001158:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 800115c:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 800115e:	4a17      	ldr	r2, [pc, #92]	; (80011bc <BMP280_ReadTemperature+0x108>)
 8001160:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001164:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001168:	139b      	asrs	r3, r3, #14
 800116a:	60bb      	str	r3, [r7, #8]

		  t_fine = var1 + var2;
 800116c:	68fa      	ldr	r2, [r7, #12]
 800116e:	68bb      	ldr	r3, [r7, #8]
 8001170:	4413      	add	r3, r2
 8001172:	4a13      	ldr	r2, [pc, #76]	; (80011c0 <BMP280_ReadTemperature+0x10c>)
 8001174:	6013      	str	r3, [r2, #0]

		  float T  = (t_fine * 5 + 128) >> 8;
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <BMP280_ReadTemperature+0x10c>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	4613      	mov	r3, r2
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	4413      	add	r3, r2
 8001180:	3380      	adds	r3, #128	; 0x80
 8001182:	121b      	asrs	r3, r3, #8
 8001184:	ee07 3a90 	vmov	s15, r3
 8001188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118c:	edc7 7a01 	vstr	s15, [r7, #4]
		  return T/100;
 8001190:	edd7 7a01 	vldr	s15, [r7, #4]
 8001194:	eddf 6a0b 	vldr	s13, [pc, #44]	; 80011c4 <BMP280_ReadTemperature+0x110>
 8001198:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800119c:	e001      	b.n	80011a2 <BMP280_ReadTemperature+0xee>
	  }
  }
  return -99;
 800119e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80011c8 <BMP280_ReadTemperature+0x114>
}
 80011a2:	eef0 7a47 	vmov.f32	s15, s14
 80011a6:	eeb0 0a67 	vmov.f32	s0, s15
 80011aa:	3718      	adds	r7, #24
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000201 	.word	0x20000201
 80011b4:	20000206 	.word	0x20000206
 80011b8:	20000202 	.word	0x20000202
 80011bc:	20000204 	.word	0x20000204
 80011c0:	20000208 	.word	0x20000208
 80011c4:	42c80000 	.word	0x42c80000
 80011c8:	c2c60000 	.word	0xc2c60000

080011cc <LCD44780_TransmitReceive>:
 */
#include "LCD44780.h"

uint8_t backlight_state = 1;

void LCD44780_TransmitReceive(uint8_t nibble, uint8_t rs) {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b084      	sub	sp, #16
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	4603      	mov	r3, r0
 80011d4:	460a      	mov	r2, r1
 80011d6:	71fb      	strb	r3, [r7, #7]
 80011d8:	4613      	mov	r3, r2
 80011da:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80011dc:	79fb      	ldrb	r3, [r7, #7]
 80011de:	011b      	lsls	r3, r3, #4
 80011e0:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80011e2:	7bfa      	ldrb	r2, [r7, #15]
 80011e4:	79bb      	ldrb	r3, [r7, #6]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT; // Include backlight state in data
 80011ea:	4b09      	ldr	r3, [pc, #36]	; (8001210 <LCD44780_TransmitReceive+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	b25a      	sxtb	r2, r3
 80011f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011f6:	4313      	orrs	r3, r2
 80011f8:	b25b      	sxtb	r3, r3
 80011fa:	73fb      	strb	r3, [r7, #15]
  LCDHD44780_I2C_PCF8574T_TransmitReceive(data,I2C_SIZE,I2C_TIMEOUT);
 80011fc:	7bfb      	ldrb	r3, [r7, #15]
 80011fe:	2264      	movs	r2, #100	; 0x64
 8001200:	2101      	movs	r1, #1
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fa2c 	bl	8001660 <LCDHD44780_I2C_PCF8574T_TransmitReceive>
}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000000 	.word	0x20000000

08001214 <LCD44780_SendCmd>:

void LCD44780_SendCmd(uint8_t cmd) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 8001224:	79fb      	ldrb	r3, [r7, #7]
 8001226:	f003 030f 	and.w	r3, r3, #15
 800122a:	73bb      	strb	r3, [r7, #14]
  LCD44780_TransmitReceive(upper_nibble, 0);
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2100      	movs	r1, #0
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff ffcb 	bl	80011cc <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(lower_nibble, 0);
 8001236:	7bbb      	ldrb	r3, [r7, #14]
 8001238:	2100      	movs	r1, #0
 800123a:	4618      	mov	r0, r3
 800123c:	f7ff ffc6 	bl	80011cc <LCD44780_TransmitReceive>
  if (cmd == 0x01 || cmd == 0x02) {
 8001240:	79fb      	ldrb	r3, [r7, #7]
 8001242:	2b01      	cmp	r3, #1
 8001244:	d002      	beq.n	800124c <LCD44780_SendCmd+0x38>
 8001246:	79fb      	ldrb	r3, [r7, #7]
 8001248:	2b02      	cmp	r3, #2
 800124a:	d102      	bne.n	8001252 <LCD44780_SendCmd+0x3e>
    HAL_Delay(2);
 800124c:	2002      	movs	r0, #2
 800124e:	f000 fe59 	bl	8001f04 <HAL_Delay>
  }
}
 8001252:	bf00      	nop
 8001254:	3710      	adds	r7, #16
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <LCD44780_SendData>:

void LCD44780_SendData(uint8_t data) {
 800125a:	b580      	push	{r7, lr}
 800125c:	b084      	sub	sp, #16
 800125e:	af00      	add	r7, sp, #0
 8001260:	4603      	mov	r3, r0
 8001262:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 8001264:	79fb      	ldrb	r3, [r7, #7]
 8001266:	091b      	lsrs	r3, r3, #4
 8001268:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 800126a:	79fb      	ldrb	r3, [r7, #7]
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	73bb      	strb	r3, [r7, #14]
  LCD44780_TransmitReceive(upper_nibble, 1);
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	2101      	movs	r1, #1
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ffa8 	bl	80011cc <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(lower_nibble, 1);
 800127c:	7bbb      	ldrb	r3, [r7, #14]
 800127e:	2101      	movs	r1, #1
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ffa3 	bl	80011cc <LCD44780_TransmitReceive>
}
 8001286:	bf00      	nop
 8001288:	3710      	adds	r7, #16
 800128a:	46bd      	mov	sp, r7
 800128c:	bd80      	pop	{r7, pc}

0800128e <LCD44780_Init>:

void LCD44780_Init() {
 800128e:	b580      	push	{r7, lr}
 8001290:	af00      	add	r7, sp, #0
  HAL_Delay(50);
 8001292:	2032      	movs	r0, #50	; 0x32
 8001294:	f000 fe36 	bl	8001f04 <HAL_Delay>
  LCD44780_TransmitReceive(0x03, 0);
 8001298:	2100      	movs	r1, #0
 800129a:	2003      	movs	r0, #3
 800129c:	f7ff ff96 	bl	80011cc <LCD44780_TransmitReceive>
  HAL_Delay(5);
 80012a0:	2005      	movs	r0, #5
 80012a2:	f000 fe2f 	bl	8001f04 <HAL_Delay>
  LCD44780_TransmitReceive(0x03, 0);
 80012a6:	2100      	movs	r1, #0
 80012a8:	2003      	movs	r0, #3
 80012aa:	f7ff ff8f 	bl	80011cc <LCD44780_TransmitReceive>
  HAL_Delay(1);
 80012ae:	2001      	movs	r0, #1
 80012b0:	f000 fe28 	bl	8001f04 <HAL_Delay>
  LCD44780_TransmitReceive(0x03, 0);
 80012b4:	2100      	movs	r1, #0
 80012b6:	2003      	movs	r0, #3
 80012b8:	f7ff ff88 	bl	80011cc <LCD44780_TransmitReceive>
  HAL_Delay(1);
 80012bc:	2001      	movs	r0, #1
 80012be:	f000 fe21 	bl	8001f04 <HAL_Delay>
  LCD44780_TransmitReceive(0x02, 0);
 80012c2:	2100      	movs	r1, #0
 80012c4:	2002      	movs	r0, #2
 80012c6:	f7ff ff81 	bl	80011cc <LCD44780_TransmitReceive>
  LCD44780_SendCmd(0x28);
 80012ca:	2028      	movs	r0, #40	; 0x28
 80012cc:	f7ff ffa2 	bl	8001214 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x0C);
 80012d0:	200c      	movs	r0, #12
 80012d2:	f7ff ff9f 	bl	8001214 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x06);
 80012d6:	2006      	movs	r0, #6
 80012d8:	f7ff ff9c 	bl	8001214 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x01);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff ff99 	bl	8001214 <LCD44780_SendCmd>
  HAL_Delay(2);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f000 fe0e 	bl	8001f04 <HAL_Delay>
}
 80012e8:	bf00      	nop
 80012ea:	bd80      	pop	{r7, pc}

080012ec <LCD44780_WriteString>:

void LCD44780_WriteString(char *str) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  while (*str) {
 80012f4:	e006      	b.n	8001304 <LCD44780_WriteString+0x18>
	  LCD44780_SendData(*str++);
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	607a      	str	r2, [r7, #4]
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	4618      	mov	r0, r3
 8001300:	f7ff ffab 	bl	800125a <LCD44780_SendData>
  while (*str) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d1f4      	bne.n	80012f6 <LCD44780_WriteString+0xa>
  }
}
 800130c:	bf00      	nop
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <LCD44780_SetCursor>:

void LCD44780_SetCursor(uint8_t row, uint8_t column) {
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	460a      	mov	r2, r1
 8001320:	71fb      	strb	r3, [r7, #7]
 8001322:	4613      	mov	r3, r2
 8001324:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <LCD44780_SetCursor+0x1c>
 800132c:	2b01      	cmp	r3, #1
 800132e:	d003      	beq.n	8001338 <LCD44780_SetCursor+0x22>
 8001330:	e005      	b.n	800133e <LCD44780_SetCursor+0x28>
        case 0:
            address = 0x00;
 8001332:	2300      	movs	r3, #0
 8001334:	73fb      	strb	r3, [r7, #15]
            break;
 8001336:	e004      	b.n	8001342 <LCD44780_SetCursor+0x2c>
        case 1:
            address = 0x40;
 8001338:	2340      	movs	r3, #64	; 0x40
 800133a:	73fb      	strb	r3, [r7, #15]
            break;
 800133c:	e001      	b.n	8001342 <LCD44780_SetCursor+0x2c>
        default:
            address = 0x00;
 800133e:	2300      	movs	r3, #0
 8001340:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 8001342:	7bfa      	ldrb	r2, [r7, #15]
 8001344:	79bb      	ldrb	r3, [r7, #6]
 8001346:	4413      	add	r3, r2
 8001348:	73fb      	strb	r3, [r7, #15]
    LCD44780_SendCmd(0x80 | address);
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001350:	b2db      	uxtb	r3, r3
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff5e 	bl	8001214 <LCD44780_SendCmd>
}
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}

08001360 <LCD44780_Clear>:

void LCD44780_Clear(void) {
 8001360:	b580      	push	{r7, lr}
 8001362:	af00      	add	r7, sp, #0
	LCD44780_SendCmd(0x01);
 8001364:	2001      	movs	r0, #1
 8001366:	f7ff ff55 	bl	8001214 <LCD44780_SendCmd>
    HAL_Delay(2);
 800136a:	2002      	movs	r0, #2
 800136c:	f000 fdca 	bl	8001f04 <HAL_Delay>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}

08001374 <LCD44780_Backlight>:

void LCD44780_Backlight(uint8_t state) {
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if (state) {
 800137e:	79fb      	ldrb	r3, [r7, #7]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <LCD44780_Backlight+0x18>
    backlight_state = 1;
 8001384:	4b06      	ldr	r3, [pc, #24]	; (80013a0 <LCD44780_Backlight+0x2c>)
 8001386:	2201      	movs	r2, #1
 8001388:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = 0;
  }
}
 800138a:	e002      	b.n	8001392 <LCD44780_Backlight+0x1e>
    backlight_state = 0;
 800138c:	4b04      	ldr	r3, [pc, #16]	; (80013a0 <LCD44780_Backlight+0x2c>)
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
}
 8001392:	bf00      	nop
 8001394:	370c      	adds	r7, #12
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr
 800139e:	bf00      	nop
 80013a0:	20000000 	.word	0x20000000

080013a4 <LCD44780_UpdateTemperature>:

void LCD44780_UpdateTemperature(float temperature)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	ed87 0a01 	vstr	s0, [r7, #4]
		  char *labelTemperature = "Temperatura:";
 80013ae:	4b1b      	ldr	r3, [pc, #108]	; (800141c <LCD44780_UpdateTemperature+0x78>)
 80013b0:	61fb      	str	r3, [r7, #28]
		  char *labelTemperatureUnit = "C";
 80013b2:	4b1b      	ldr	r3, [pc, #108]	; (8001420 <LCD44780_UpdateTemperature+0x7c>)
 80013b4:	61bb      	str	r3, [r7, #24]
		  char temperatureString[10];

		  sprintf(temperatureString, "%.2f", temperature);
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f7ff f8d6 	bl	8000568 <__aeabi_f2d>
 80013bc:	4602      	mov	r2, r0
 80013be:	460b      	mov	r3, r1
 80013c0:	f107 000c 	add.w	r0, r7, #12
 80013c4:	4917      	ldr	r1, [pc, #92]	; (8001424 <LCD44780_UpdateTemperature+0x80>)
 80013c6:	f003 fd6d 	bl	8004ea4 <siprintf>
		  LCD44780_Clear();
 80013ca:	f7ff ffc9 	bl	8001360 <LCD44780_Clear>
		  LCD44780_SetCursor(0, 0);
 80013ce:	2100      	movs	r1, #0
 80013d0:	2000      	movs	r0, #0
 80013d2:	f7ff ffa0 	bl	8001316 <LCD44780_SetCursor>
		  LCD44780_WriteString(labelTemperature);
 80013d6:	69f8      	ldr	r0, [r7, #28]
 80013d8:	f7ff ff88 	bl	80012ec <LCD44780_WriteString>
		  LCD44780_SetCursor(1, 0);
 80013dc:	2100      	movs	r1, #0
 80013de:	2001      	movs	r0, #1
 80013e0:	f7ff ff99 	bl	8001316 <LCD44780_SetCursor>
		  LCD44780_WriteString(temperatureString);
 80013e4:	f107 030c 	add.w	r3, r7, #12
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff ff7f 	bl	80012ec <LCD44780_WriteString>
		  memset(temperatureString, 0, sizeof(temperatureString));
 80013ee:	f107 030c 	add.w	r3, r7, #12
 80013f2:	220a      	movs	r2, #10
 80013f4:	2100      	movs	r1, #0
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 f854 	bl	80044a4 <memset>
		  LCD44780_SetCursor(1, 6);
 80013fc:	2106      	movs	r1, #6
 80013fe:	2001      	movs	r0, #1
 8001400:	f7ff ff89 	bl	8001316 <LCD44780_SetCursor>
		  LCD44780_WriteString(labelTemperatureUnit );
 8001404:	69b8      	ldr	r0, [r7, #24]
 8001406:	f7ff ff71 	bl	80012ec <LCD44780_WriteString>
		  HAL_Delay(1000);
 800140a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800140e:	f000 fd79 	bl	8001f04 <HAL_Delay>
}
 8001412:	bf00      	nop
 8001414:	3720      	adds	r7, #32
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	080073b0 	.word	0x080073b0
 8001420:	080073c0 	.word	0x080073c0
 8001424:	080073c4 	.word	0x080073c4

08001428 <LCD44780_TemperatureAlarm>:

void LCD44780_TemperatureAlarm()
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	  char *labelTemperatureAlarm = "Alarma";
 800142e:	4b08      	ldr	r3, [pc, #32]	; (8001450 <LCD44780_TemperatureAlarm+0x28>)
 8001430:	607b      	str	r3, [r7, #4]
	  LCD44780_SetCursor(1, 9);
 8001432:	2109      	movs	r1, #9
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff ff6e 	bl	8001316 <LCD44780_SetCursor>
	  LCD44780_WriteString(labelTemperatureAlarm );
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff56 	bl	80012ec <LCD44780_WriteString>
	  HAL_Delay(500);
 8001440:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001444:	f000 fd5e 	bl	8001f04 <HAL_Delay>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	080073cc 	.word	0x080073cc

08001454 <LCD44780_SensorTemperatureError>:
void LCD44780_SensorTemperatureError()
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
	  char *labelSensorTemperatureError = "Error de sensor";
 800145a:	4b09      	ldr	r3, [pc, #36]	; (8001480 <LCD44780_SensorTemperatureError+0x2c>)
 800145c:	607b      	str	r3, [r7, #4]
	  LCD44780_Clear();
 800145e:	f7ff ff7f 	bl	8001360 <LCD44780_Clear>
	  LCD44780_SetCursor(1, 0);
 8001462:	2100      	movs	r1, #0
 8001464:	2001      	movs	r0, #1
 8001466:	f7ff ff56 	bl	8001316 <LCD44780_SetCursor>
	  LCD44780_WriteString(labelSensorTemperatureError );
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff3e 	bl	80012ec <LCD44780_WriteString>
	  HAL_Delay(500);
 8001470:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001474:	f000 fd46 	bl	8001f04 <HAL_Delay>
}
 8001478:	bf00      	nop
 800147a:	3708      	adds	r7, #8
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	080073d4 	.word	0x080073d4

08001484 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b088      	sub	sp, #32
 8001488:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
 800149e:	4b20      	ldr	r3, [pc, #128]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a1f      	ldr	r2, [pc, #124]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014a4:	f043 0320 	orr.w	r3, r3, #32
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b1d      	ldr	r3, [pc, #116]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0320 	and.w	r3, r3, #32
 80014b2:	60bb      	str	r3, [r7, #8]
 80014b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b6:	2300      	movs	r3, #0
 80014b8:	607b      	str	r3, [r7, #4]
 80014ba:	4b19      	ldr	r3, [pc, #100]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	4a18      	ldr	r2, [pc, #96]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014c0:	f043 0301 	orr.w	r3, r3, #1
 80014c4:	6313      	str	r3, [r2, #48]	; 0x30
 80014c6:	4b16      	ldr	r3, [pc, #88]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	f003 0301 	and.w	r3, r3, #1
 80014ce:	607b      	str	r3, [r7, #4]
 80014d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014d2:	2300      	movs	r3, #0
 80014d4:	603b      	str	r3, [r7, #0]
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a11      	ldr	r2, [pc, #68]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014dc:	f043 0308 	orr.w	r3, r3, #8
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <MX_GPIO_Init+0x9c>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0308 	and.w	r3, r3, #8
 80014ea:	603b      	str	r3, [r7, #0]
 80014ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 80014ee:	2200      	movs	r2, #0
 80014f0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014f4:	480b      	ldr	r0, [pc, #44]	; (8001524 <MX_GPIO_Init+0xa0>)
 80014f6:	f000 ffbb 	bl	8002470 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 80014fa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80014fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001500:	2301      	movs	r3, #1
 8001502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <MX_GPIO_Init+0xa0>)
 8001514:	f000 fe00 	bl	8002118 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001518:	bf00      	nop
 800151a:	3720      	adds	r7, #32
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	40020c00 	.word	0x40020c00

08001528 <MX_SPI1_Init>:

void MX_SPI1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800152c:	4b17      	ldr	r3, [pc, #92]	; (800158c <MX_SPI1_Init+0x64>)
 800152e:	4a18      	ldr	r2, [pc, #96]	; (8001590 <MX_SPI1_Init+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001532:	4b16      	ldr	r3, [pc, #88]	; (800158c <MX_SPI1_Init+0x64>)
 8001534:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153a:	4b14      	ldr	r3, [pc, #80]	; (800158c <MX_SPI1_Init+0x64>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001540:	4b12      	ldr	r3, [pc, #72]	; (800158c <MX_SPI1_Init+0x64>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <MX_SPI1_Init+0x64>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <MX_SPI1_Init+0x64>)
 800154e:	2200      	movs	r2, #0
 8001550:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001552:	4b0e      	ldr	r3, [pc, #56]	; (800158c <MX_SPI1_Init+0x64>)
 8001554:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001558:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <MX_SPI1_Init+0x64>)
 800155c:	2220      	movs	r2, #32
 800155e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <MX_SPI1_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001566:	4b09      	ldr	r3, [pc, #36]	; (800158c <MX_SPI1_Init+0x64>)
 8001568:	2200      	movs	r2, #0
 800156a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <MX_SPI1_Init+0x64>)
 800156e:	2200      	movs	r2, #0
 8001570:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <MX_SPI1_Init+0x64>)
 8001574:	220a      	movs	r2, #10
 8001576:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001578:	4804      	ldr	r0, [pc, #16]	; (800158c <MX_SPI1_Init+0x64>)
 800157a:	f002 f8b1 	bl	80036e0 <HAL_SPI_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001584:	f000 fa1a 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */
}
 8001588:	bf00      	nop
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000020c 	.word	0x2000020c
 8001590:	40013000 	.word	0x40013000

08001594 <BMP280_SPI_TransmitReceive>:
void BMP280_SPI_TransmitReceive(uint8_t buffer[2],uint8_t size,uint8_t timeOut)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af02      	add	r7, sp, #8
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	460b      	mov	r3, r1
 800159e:	70fb      	strb	r3, [r7, #3]
 80015a0:	4613      	mov	r3, r2
 80015a2:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOD, SPI_ENABLE_PIN, GPIO_PIN_RESET);
 80015a4:	2200      	movs	r2, #0
 80015a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015aa:	480b      	ldr	r0, [pc, #44]	; (80015d8 <BMP280_SPI_TransmitReceive+0x44>)
 80015ac:	f000 ff60 	bl	8002470 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, buffer, buffer, size, timeOut);
 80015b0:	78fb      	ldrb	r3, [r7, #3]
 80015b2:	b29a      	uxth	r2, r3
 80015b4:	78bb      	ldrb	r3, [r7, #2]
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	4613      	mov	r3, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6879      	ldr	r1, [r7, #4]
 80015be:	4807      	ldr	r0, [pc, #28]	; (80015dc <BMP280_SPI_TransmitReceive+0x48>)
 80015c0:	f002 f917 	bl	80037f2 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOD, SPI_ENABLE_PIN, GPIO_PIN_SET);
 80015c4:	2201      	movs	r2, #1
 80015c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80015ca:	4803      	ldr	r0, [pc, #12]	; (80015d8 <BMP280_SPI_TransmitReceive+0x44>)
 80015cc:	f000 ff50 	bl	8002470 <HAL_GPIO_WritePin>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	40020c00 	.word	0x40020c00
 80015dc:	2000020c 	.word	0x2000020c

080015e0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C2_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80015e4:	4b1b      	ldr	r3, [pc, #108]	; (8001654 <MX_I2C2_Init+0x74>)
 80015e6:	4a1c      	ldr	r2, [pc, #112]	; (8001658 <MX_I2C2_Init+0x78>)
 80015e8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80015ea:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <MX_I2C2_Init+0x74>)
 80015ec:	4a1b      	ldr	r2, [pc, #108]	; (800165c <MX_I2C2_Init+0x7c>)
 80015ee:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <MX_I2C2_Init+0x74>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <MX_I2C2_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015fc:	4b15      	ldr	r3, [pc, #84]	; (8001654 <MX_I2C2_Init+0x74>)
 80015fe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001602:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001604:	4b13      	ldr	r3, [pc, #76]	; (8001654 <MX_I2C2_Init+0x74>)
 8001606:	2200      	movs	r2, #0
 8001608:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <MX_I2C2_Init+0x74>)
 800160c:	2200      	movs	r2, #0
 800160e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001610:	4b10      	ldr	r3, [pc, #64]	; (8001654 <MX_I2C2_Init+0x74>)
 8001612:	2200      	movs	r2, #0
 8001614:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001616:	4b0f      	ldr	r3, [pc, #60]	; (8001654 <MX_I2C2_Init+0x74>)
 8001618:	2200      	movs	r2, #0
 800161a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <MX_I2C2_Init+0x74>)
 800161e:	f000 ff41 	bl	80024a4 <HAL_I2C_Init>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001628:	f000 f9c8 	bl	80019bc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800162c:	2100      	movs	r1, #0
 800162e:	4809      	ldr	r0, [pc, #36]	; (8001654 <MX_I2C2_Init+0x74>)
 8001630:	f001 fb83 	bl	8002d3a <HAL_I2CEx_ConfigAnalogFilter>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <MX_I2C2_Init+0x5e>
  {
    Error_Handler();
 800163a:	f000 f9bf 	bl	80019bc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 800163e:	2100      	movs	r1, #0
 8001640:	4804      	ldr	r0, [pc, #16]	; (8001654 <MX_I2C2_Init+0x74>)
 8001642:	f001 fbb6 	bl	8002db2 <HAL_I2CEx_ConfigDigitalFilter>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_I2C2_Init+0x70>
  {
    Error_Handler();
 800164c:	f000 f9b6 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20000264 	.word	0x20000264
 8001658:	40005800 	.word	0x40005800
 800165c:	000186a0 	.word	0x000186a0

08001660 <LCDHD44780_I2C_PCF8574T_TransmitReceive>:

void LCDHD44780_I2C_PCF8574T_TransmitReceive(uint8_t data,uint8_t size,uint8_t timeOut)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af02      	add	r7, sp, #8
 8001666:	4603      	mov	r3, r0
 8001668:	71fb      	strb	r3, [r7, #7]
 800166a:	460b      	mov	r3, r1
 800166c:	71bb      	strb	r3, [r7, #6]
 800166e:	4613      	mov	r3, r2
 8001670:	717b      	strb	r3, [r7, #5]
	data |= 1 << EN_BIT;
 8001672:	79fb      	ldrb	r3, [r7, #7]
 8001674:	f043 0304 	orr.w	r3, r3, #4
 8001678:	b2db      	uxtb	r3, r3
 800167a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, size, timeOut);
 800167c:	79bb      	ldrb	r3, [r7, #6]
 800167e:	b299      	uxth	r1, r3
 8001680:	797b      	ldrb	r3, [r7, #5]
 8001682:	1dfa      	adds	r2, r7, #7
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	460b      	mov	r3, r1
 8001688:	214e      	movs	r1, #78	; 0x4e
 800168a:	480c      	ldr	r0, [pc, #48]	; (80016bc <LCDHD44780_I2C_PCF8574T_TransmitReceive+0x5c>)
 800168c:	f001 f84e 	bl	800272c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001690:	2001      	movs	r0, #1
 8001692:	f000 fc37 	bl	8001f04 <HAL_Delay>
	data &= ~(1 << EN_BIT);
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f023 0304 	bic.w	r3, r3, #4
 800169c:	b2db      	uxtb	r3, r3
 800169e:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c2, I2C_ADDR << 1, &data, size, timeOut);
 80016a0:	79bb      	ldrb	r3, [r7, #6]
 80016a2:	b299      	uxth	r1, r3
 80016a4:	797b      	ldrb	r3, [r7, #5]
 80016a6:	1dfa      	adds	r2, r7, #7
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	460b      	mov	r3, r1
 80016ac:	214e      	movs	r1, #78	; 0x4e
 80016ae:	4803      	ldr	r0, [pc, #12]	; (80016bc <LCDHD44780_I2C_PCF8574T_TransmitReceive+0x5c>)
 80016b0:	f001 f83c 	bl	800272c <HAL_I2C_Master_Transmit>
}
 80016b4:	bf00      	nop
 80016b6:	3708      	adds	r7, #8
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	20000264 	.word	0x20000264

080016c0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016c4:	4b11      	ldr	r3, [pc, #68]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016c6:	4a12      	ldr	r2, [pc, #72]	; (8001710 <MX_USART3_UART_Init+0x50>)
 80016c8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016cc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016d0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016da:	2200      	movs	r2, #0
 80016dc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 80016de:	4b0b      	ldr	r3, [pc, #44]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016e0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80016e4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016e6:	4b09      	ldr	r3, [pc, #36]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016e8:	220c      	movs	r2, #12
 80016ea:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016f2:	4b06      	ldr	r3, [pc, #24]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016f8:	4804      	ldr	r0, [pc, #16]	; (800170c <MX_USART3_UART_Init+0x4c>)
 80016fa:	f002 fae7 	bl	8003ccc <HAL_UART_Init>
 80016fe:	4603      	mov	r3, r0
 8001700:	2b00      	cmp	r3, #0
 8001702:	d001      	beq.n	8001708 <MX_USART3_UART_Init+0x48>
  {
    Error_Handler();
 8001704:	f000 f95a 	bl	80019bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	200002b8 	.word	0x200002b8
 8001710:	40004800 	.word	0x40004800

08001714 <UART_Send_Temperature>:
void UART_Send_Temperature(float temperature)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	ed87 0a01 	vstr	s0, [r7, #4]
	  printf("Temperatura=%.2f\n",temperature);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7fe ff22 	bl	8000568 <__aeabi_f2d>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4803      	ldr	r0, [pc, #12]	; (8001738 <UART_Send_Temperature+0x24>)
 800172a:	f003 fb2d 	bl	8004d88 <iprintf>
}
 800172e:	bf00      	nop
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	080073e4 	.word	0x080073e4

0800173c <UART_TemperatureAlarm>:
void UART_TemperatureAlarm(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	af00      	add	r7, sp, #0
	  printf("Alarma: Err1\n");
 8001740:	4804      	ldr	r0, [pc, #16]	; (8001754 <UART_TemperatureAlarm+0x18>)
 8001742:	f003 fba7 	bl	8004e94 <puts>
	  HAL_Delay(500);
 8001746:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800174a:	f000 fbdb 	bl	8001f04 <HAL_Delay>
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	080073f8 	.word	0x080073f8

08001758 <UART_SensorTemperatureError>:
void UART_SensorTemperatureError(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
	  printf("Error en lectura del sensor: Err2\n");
 800175c:	4804      	ldr	r0, [pc, #16]	; (8001770 <UART_SensorTemperatureError+0x18>)
 800175e:	f003 fb99 	bl	8004e94 <puts>
	  HAL_Delay(500);
 8001762:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001766:	f000 fbcd 	bl	8001f04 <HAL_Delay>
}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	08007408 	.word	0x08007408

08001774 <main>:
void FSM_Connect(void);
int8_t FSM_Measure(void);
void FSM_Range(void);

int main(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0

  HAL_Init();
 800177a:	f000 fb51 	bl	8001e20 <HAL_Init>
  SystemClock_Config();
 800177e:	f000 f8bd 	bl	80018fc <SystemClock_Config>

  fsmState_t fsm_state=INIT;
 8001782:	2300      	movs	r3, #0
 8001784:	71fb      	strb	r3, [r7, #7]
  int8_t error;

  while (1)
  {
	  switch (fsm_state) {
 8001786:	79fb      	ldrb	r3, [r7, #7]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d82d      	bhi.n	80017e8 <main+0x74>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <main+0x20>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017af 	.word	0x080017af
 800179c:	080017b9 	.word	0x080017b9
 80017a0:	080017df 	.word	0x080017df

	  	  	  case INIT:
	  	  		    FSM_Init();
 80017a4:	f000 f826 	bl	80017f4 <FSM_Init>
	                fsm_state=CONNECT;
 80017a8:	2301      	movs	r3, #1
 80017aa:	71fb      	strb	r3, [r7, #7]
	  	  	  break;
 80017ac:	e020      	b.n	80017f0 <main+0x7c>

	  	  	  case CONNECT:
	  	  		    FSM_Connect();
 80017ae:	f000 f82f 	bl	8001810 <FSM_Connect>
	  	  		    fsm_state=MEASURE;
 80017b2:	2302      	movs	r3, #2
 80017b4:	71fb      	strb	r3, [r7, #7]
	  	  	  break;
 80017b6:	e01b      	b.n	80017f0 <main+0x7c>

	  	  	  case MEASURE:
	  	  		    error=FSM_Measure();
 80017b8:	f000 f83c 	bl	8001834 <FSM_Measure>
 80017bc:	4603      	mov	r3, r0
 80017be:	71bb      	strb	r3, [r7, #6]
	  	  		    if(error==0){
 80017c0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d102      	bne.n	80017ce <main+0x5a>
		  	  		    fsm_state=RANGE;
 80017c8:	2303      	movs	r3, #3
 80017ca:	71fb      	strb	r3, [r7, #7]
	  	  		    }else
	  	  		    	if(error==-1)
	  	  		    	{
	  	  		    	fsm_state=CONNECT;
	  	  		    	}
	  	  	  break;
 80017cc:	e00f      	b.n	80017ee <main+0x7a>
	  	  		    	if(error==-1)
 80017ce:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80017d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017d6:	d10a      	bne.n	80017ee <main+0x7a>
	  	  		    	fsm_state=CONNECT;
 80017d8:	2301      	movs	r3, #1
 80017da:	71fb      	strb	r3, [r7, #7]
	  	  	  break;
 80017dc:	e007      	b.n	80017ee <main+0x7a>

	  	  	  case RANGE:
	  	  		    FSM_Range();
 80017de:	f000 f865 	bl	80018ac <FSM_Range>
	  	  		    fsm_state=MEASURE;
 80017e2:	2302      	movs	r3, #2
 80017e4:	71fb      	strb	r3, [r7, #7]
	  	  	  break;
 80017e6:	e003      	b.n	80017f0 <main+0x7c>

	  	  	  default:
	  	  		fsm_state=INIT;
 80017e8:	2300      	movs	r3, #0
 80017ea:	71fb      	strb	r3, [r7, #7]
	  	  	  break;
 80017ec:	e000      	b.n	80017f0 <main+0x7c>
	  	  	  break;
 80017ee:	bf00      	nop
	  switch (fsm_state) {
 80017f0:	e7c9      	b.n	8001786 <main+0x12>
 80017f2:	bf00      	nop

080017f4 <FSM_Init>:
	  	  }
  }
}
//*********************************************************************************************
void FSM_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
	  MX_GPIO_Init();
 80017f8:	f7ff fe44 	bl	8001484 <MX_GPIO_Init>
	  MX_SPI1_Init();
 80017fc:	f7ff fe94 	bl	8001528 <MX_SPI1_Init>
	  MX_USART3_UART_Init();
 8001800:	f7ff ff5e 	bl	80016c0 <MX_USART3_UART_Init>
	  MX_I2C2_Init();
 8001804:	f7ff feec 	bl	80015e0 <MX_I2C2_Init>
	  LCD44780_Init();
 8001808:	f7ff fd41 	bl	800128e <LCD44780_Init>
}
 800180c:	bf00      	nop
 800180e:	bd80      	pop	{r7, pc}

08001810 <FSM_Connect>:
void FSM_Connect(void)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	 BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_FORCEDMODE);
 8001814:	2201      	movs	r2, #1
 8001816:	2101      	movs	r1, #1
 8001818:	4805      	ldr	r0, [pc, #20]	; (8001830 <FSM_Connect+0x20>)
 800181a:	f7ff fbe1 	bl	8000fe0 <BMP280_Init>
	 LCD44780_Backlight(1); // Turn on backlight
 800181e:	2001      	movs	r0, #1
 8001820:	f7ff fda8 	bl	8001374 <LCD44780_Backlight>
	 HAL_Delay(3000);
 8001824:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001828:	f000 fb6c 	bl	8001f04 <HAL_Delay>
}
 800182c:	bf00      	nop
 800182e:	bd80      	pop	{r7, pc}
 8001830:	2000020c 	.word	0x2000020c

08001834 <FSM_Measure>:
int8_t FSM_Measure(void)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b082      	sub	sp, #8
 8001838:	af00      	add	r7, sp, #0
	  int8_t ret;
	  temperature=BMP280_ReadTemperature();
 800183a:	f7ff fc3b 	bl	80010b4 <BMP280_ReadTemperature>
 800183e:	eef0 7a40 	vmov.f32	s15, s0
 8001842:	4b19      	ldr	r3, [pc, #100]	; (80018a8 <FSM_Measure+0x74>)
 8001844:	edc3 7a00 	vstr	s15, [r3]

	  if ((temperature<TEMPERATURE_MAX) && (temperature>TEMPERATURE_MIN)){
 8001848:	4b17      	ldr	r3, [pc, #92]	; (80018a8 <FSM_Measure+0x74>)
 800184a:	edd3 7a00 	vldr	s15, [r3]
 800184e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001852:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001856:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800185a:	d518      	bpl.n	800188e <FSM_Measure+0x5a>
 800185c:	4b12      	ldr	r3, [pc, #72]	; (80018a8 <FSM_Measure+0x74>)
 800185e:	edd3 7a00 	vldr	s15, [r3]
 8001862:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001866:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800186a:	dd10      	ble.n	800188e <FSM_Measure+0x5a>
		  UART_Send_Temperature(temperature);
 800186c:	4b0e      	ldr	r3, [pc, #56]	; (80018a8 <FSM_Measure+0x74>)
 800186e:	edd3 7a00 	vldr	s15, [r3]
 8001872:	eeb0 0a67 	vmov.f32	s0, s15
 8001876:	f7ff ff4d 	bl	8001714 <UART_Send_Temperature>
		  LCD44780_UpdateTemperature(temperature);
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <FSM_Measure+0x74>)
 800187c:	edd3 7a00 	vldr	s15, [r3]
 8001880:	eeb0 0a67 	vmov.f32	s0, s15
 8001884:	f7ff fd8e 	bl	80013a4 <LCD44780_UpdateTemperature>
		  ret =0;
 8001888:	2300      	movs	r3, #0
 800188a:	71fb      	strb	r3, [r7, #7]
 800188c:	e005      	b.n	800189a <FSM_Measure+0x66>
	  }else
	  	  {
		  	  LCD44780_SensorTemperatureError();
 800188e:	f7ff fde1 	bl	8001454 <LCD44780_SensorTemperatureError>
		  	  UART_SensorTemperatureError();
 8001892:	f7ff ff61 	bl	8001758 <UART_SensorTemperatureError>
		  	  ret=-1;
 8001896:	23ff      	movs	r3, #255	; 0xff
 8001898:	71fb      	strb	r3, [r7, #7]
	  	  }
	  return ret;
 800189a:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002fc 	.word	0x200002fc

080018ac <FSM_Range>:
void FSM_Range(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	if(temperature>TEMPERATURE_ALARM)
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <FSM_Range+0x28>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80018ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c2:	dc00      	bgt.n	80018c6 <FSM_Range+0x1a>
	{
		LCD44780_TemperatureAlarm();
		UART_TemperatureAlarm();
	}
}
 80018c4:	e003      	b.n	80018ce <FSM_Range+0x22>
		LCD44780_TemperatureAlarm();
 80018c6:	f7ff fdaf 	bl	8001428 <LCD44780_TemperatureAlarm>
		UART_TemperatureAlarm();
 80018ca:	f7ff ff37 	bl	800173c <UART_TemperatureAlarm>
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200002fc 	.word	0x200002fc

080018d8 <__io_putchar>:
//***************************************************************************************

PUTCHAR_PROTOTYPE
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 80018e0:	1d39      	adds	r1, r7, #4
 80018e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e6:	2201      	movs	r2, #1
 80018e8:	4803      	ldr	r0, [pc, #12]	; (80018f8 <__io_putchar+0x20>)
 80018ea:	f002 fa3c 	bl	8003d66 <HAL_UART_Transmit>
  return ch;
 80018ee:	687b      	ldr	r3, [r7, #4]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200002b8 	.word	0x200002b8

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2230      	movs	r2, #48	; 0x30
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f002 fdca 	bl	80044a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	4b23      	ldr	r3, [pc, #140]	; (80019b4 <SystemClock_Config+0xb8>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a22      	ldr	r2, [pc, #136]	; (80019b4 <SystemClock_Config+0xb8>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b20      	ldr	r3, [pc, #128]	; (80019b4 <SystemClock_Config+0xb8>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <SystemClock_Config+0xbc>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001948:	4a1b      	ldr	r2, [pc, #108]	; (80019b8 <SystemClock_Config+0xbc>)
 800194a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <SystemClock_Config+0xbc>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001960:	2301      	movs	r3, #1
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001964:	2310      	movs	r3, #16
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001968:	2300      	movs	r3, #0
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800196c:	f107 0320 	add.w	r3, r7, #32
 8001970:	4618      	mov	r0, r3
 8001972:	f001 fa5d 	bl	8002e30 <HAL_RCC_OscConfig>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <SystemClock_Config+0x84>
  {
    Error_Handler();
 800197c:	f000 f81e 	bl	80019bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001980:	230f      	movs	r3, #15
 8001982:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001984:	2300      	movs	r3, #0
 8001986:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001990:	2300      	movs	r3, #0
 8001992:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2100      	movs	r1, #0
 800199a:	4618      	mov	r0, r3
 800199c:	f001 fcc0 	bl	8003320 <HAL_RCC_ClockConfig>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <SystemClock_Config+0xae>
  {
    Error_Handler();
 80019a6:	f000 f809 	bl	80019bc <Error_Handler>
  }
}
 80019aa:	bf00      	nop
 80019ac:	3750      	adds	r7, #80	; 0x50
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	40007000 	.word	0x40007000

080019bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019c0:	b672      	cpsid	i
}
 80019c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019c4:	e7fe      	b.n	80019c4 <Error_Handler+0x8>
	...

080019c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	607b      	str	r3, [r7, #4]
 80019d2:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_MspInit+0x4c>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d6:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_MspInit+0x4c>)
 80019d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019dc:	6453      	str	r3, [r2, #68]	; 0x44
 80019de:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_MspInit+0x4c>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019e6:	607b      	str	r3, [r7, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ea:	2300      	movs	r3, #0
 80019ec:	603b      	str	r3, [r7, #0]
 80019ee:	4b09      	ldr	r3, [pc, #36]	; (8001a14 <HAL_MspInit+0x4c>)
 80019f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f2:	4a08      	ldr	r2, [pc, #32]	; (8001a14 <HAL_MspInit+0x4c>)
 80019f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f8:	6413      	str	r3, [r2, #64]	; 0x40
 80019fa:	4b06      	ldr	r3, [pc, #24]	; (8001a14 <HAL_MspInit+0x4c>)
 80019fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a02:	603b      	str	r3, [r7, #0]
 8001a04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a06:	bf00      	nop
 8001a08:	370c      	adds	r7, #12
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800

08001a18 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b08a      	sub	sp, #40	; 0x28
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0314 	add.w	r3, r7, #20
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a19      	ldr	r2, [pc, #100]	; (8001a9c <HAL_I2C_MspInit+0x84>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d12b      	bne.n	8001a92 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b18      	ldr	r3, [pc, #96]	; (8001aa0 <HAL_I2C_MspInit+0x88>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	4a17      	ldr	r2, [pc, #92]	; (8001aa0 <HAL_I2C_MspInit+0x88>)
 8001a44:	f043 0320 	orr.w	r3, r3, #32
 8001a48:	6313      	str	r3, [r2, #48]	; 0x30
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_I2C_MspInit+0x88>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4e:	f003 0320 	and.w	r3, r3, #32
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001a56:	2303      	movs	r3, #3
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a5a:	2312      	movs	r3, #18
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001a66:	2304      	movs	r3, #4
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	480c      	ldr	r0, [pc, #48]	; (8001aa4 <HAL_I2C_MspInit+0x8c>)
 8001a72:	f000 fb51 	bl	8002118 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001a76:	2300      	movs	r3, #0
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_I2C_MspInit+0x88>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7e:	4a08      	ldr	r2, [pc, #32]	; (8001aa0 <HAL_I2C_MspInit+0x88>)
 8001a80:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001a84:	6413      	str	r3, [r2, #64]	; 0x40
 8001a86:	4b06      	ldr	r3, [pc, #24]	; (8001aa0 <HAL_I2C_MspInit+0x88>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001a92:	bf00      	nop
 8001a94:	3728      	adds	r7, #40	; 0x28
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	40005800 	.word	0x40005800
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40021400 	.word	0x40021400

08001aa8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	601a      	str	r2, [r3, #0]
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	609a      	str	r2, [r3, #8]
 8001abc:	60da      	str	r2, [r3, #12]
 8001abe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a19      	ldr	r2, [pc, #100]	; (8001b2c <HAL_SPI_MspInit+0x84>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d12b      	bne.n	8001b22 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001aca:	2300      	movs	r3, #0
 8001acc:	613b      	str	r3, [r7, #16]
 8001ace:	4b18      	ldr	r3, [pc, #96]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	4a17      	ldr	r2, [pc, #92]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001ad4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ada:	4b15      	ldr	r3, [pc, #84]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ade:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ae2:	613b      	str	r3, [r7, #16]
 8001ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	4b11      	ldr	r3, [pc, #68]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	4a10      	ldr	r2, [pc, #64]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001af0:	f043 0301 	orr.w	r3, r3, #1
 8001af4:	6313      	str	r3, [r2, #48]	; 0x30
 8001af6:	4b0e      	ldr	r3, [pc, #56]	; (8001b30 <HAL_SPI_MspInit+0x88>)
 8001af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b02:	23e0      	movs	r3, #224	; 0xe0
 8001b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b06:	2302      	movs	r3, #2
 8001b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b12:	2305      	movs	r3, #5
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b16:	f107 0314 	add.w	r3, r7, #20
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	4805      	ldr	r0, [pc, #20]	; (8001b34 <HAL_SPI_MspInit+0x8c>)
 8001b1e:	f000 fafb 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3728      	adds	r7, #40	; 0x28
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40013000 	.word	0x40013000
 8001b30:	40023800 	.word	0x40023800
 8001b34:	40020000 	.word	0x40020000

08001b38 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b08a      	sub	sp, #40	; 0x28
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
 8001b48:	605a      	str	r2, [r3, #4]
 8001b4a:	609a      	str	r2, [r3, #8]
 8001b4c:	60da      	str	r2, [r3, #12]
 8001b4e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a19      	ldr	r2, [pc, #100]	; (8001bbc <HAL_UART_MspInit+0x84>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d12c      	bne.n	8001bb4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
 8001b5e:	4b18      	ldr	r3, [pc, #96]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b62:	4a17      	ldr	r2, [pc, #92]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b68:	6413      	str	r3, [r2, #64]	; 0x40
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b72:	613b      	str	r3, [r7, #16]
 8001b74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b11      	ldr	r3, [pc, #68]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	4a10      	ldr	r2, [pc, #64]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b80:	f043 0308 	orr.w	r3, r3, #8
 8001b84:	6313      	str	r3, [r2, #48]	; 0x30
 8001b86:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <HAL_UART_MspInit+0x88>)
 8001b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8a:	f003 0308 	and.w	r3, r3, #8
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b98:	2302      	movs	r3, #2
 8001b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba8:	f107 0314 	add.w	r3, r7, #20
 8001bac:	4619      	mov	r1, r3
 8001bae:	4805      	ldr	r0, [pc, #20]	; (8001bc4 <HAL_UART_MspInit+0x8c>)
 8001bb0:	f000 fab2 	bl	8002118 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001bb4:	bf00      	nop
 8001bb6:	3728      	adds	r7, #40	; 0x28
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40004800 	.word	0x40004800
 8001bc0:	40023800 	.word	0x40023800
 8001bc4:	40020c00 	.word	0x40020c00

08001bc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001bcc:	e7fe      	b.n	8001bcc <NMI_Handler+0x4>

08001bce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bd2:	e7fe      	b.n	8001bd2 <HardFault_Handler+0x4>

08001bd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bd8:	e7fe      	b.n	8001bd8 <MemManage_Handler+0x4>

08001bda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bde:	e7fe      	b.n	8001bde <BusFault_Handler+0x4>

08001be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001be0:	b480      	push	{r7}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <UsageFault_Handler+0x4>

08001be6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001be6:	b480      	push	{r7}
 8001be8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr

08001c02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c02:	b480      	push	{r7}
 8001c04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c06:	bf00      	nop
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c14:	f000 f956 	bl	8001ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return 1;
 8001c20:	2301      	movs	r3, #1
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	46bd      	mov	sp, r7
 8001c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2a:	4770      	bx	lr

08001c2c <_kill>:

int _kill(int pid, int sig)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c36:	f002 fc0b 	bl	8004450 <__errno>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2216      	movs	r2, #22
 8001c3e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <_exit>:

void _exit (int status)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c54:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ffe7 	bl	8001c2c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c5e:	e7fe      	b.n	8001c5e <_exit+0x12>

08001c60 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	e00a      	b.n	8001c88 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c72:	f3af 8000 	nop.w
 8001c76:	4601      	mov	r1, r0
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	1c5a      	adds	r2, r3, #1
 8001c7c:	60ba      	str	r2, [r7, #8]
 8001c7e:	b2ca      	uxtb	r2, r1
 8001c80:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf0      	blt.n	8001c72 <_read+0x12>
  }

  return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	617b      	str	r3, [r7, #20]
 8001caa:	e009      	b.n	8001cc0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	1c5a      	adds	r2, r3, #1
 8001cb0:	60ba      	str	r2, [r7, #8]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f7ff fe0f 	bl	80018d8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	dbf1      	blt.n	8001cac <_write+0x12>
  }
  return len;
 8001cc8:	687b      	ldr	r3, [r7, #4]
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3718      	adds	r7, #24
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <_close>:

int _close(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cda:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cfa:	605a      	str	r2, [r3, #4]
  return 0;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr

08001d0a <_isatty>:

int _isatty(int file)
{
 8001d0a:	b480      	push	{r7}
 8001d0c:	b083      	sub	sp, #12
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d12:	2301      	movs	r3, #1
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	370c      	adds	r7, #12
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1e:	4770      	bx	lr

08001d20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d2c:	2300      	movs	r3, #0
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3714      	adds	r7, #20
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d44:	4a14      	ldr	r2, [pc, #80]	; (8001d98 <_sbrk+0x5c>)
 8001d46:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <_sbrk+0x60>)
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d50:	4b13      	ldr	r3, [pc, #76]	; (8001da0 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d102      	bne.n	8001d5e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d58:	4b11      	ldr	r3, [pc, #68]	; (8001da0 <_sbrk+0x64>)
 8001d5a:	4a12      	ldr	r2, [pc, #72]	; (8001da4 <_sbrk+0x68>)
 8001d5c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d5e:	4b10      	ldr	r3, [pc, #64]	; (8001da0 <_sbrk+0x64>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	693a      	ldr	r2, [r7, #16]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d207      	bcs.n	8001d7c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d6c:	f002 fb70 	bl	8004450 <__errno>
 8001d70:	4603      	mov	r3, r0
 8001d72:	220c      	movs	r2, #12
 8001d74:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d7a:	e009      	b.n	8001d90 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <_sbrk+0x64>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d82:	4b07      	ldr	r3, [pc, #28]	; (8001da0 <_sbrk+0x64>)
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4413      	add	r3, r2
 8001d8a:	4a05      	ldr	r2, [pc, #20]	; (8001da0 <_sbrk+0x64>)
 8001d8c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20030000 	.word	0x20030000
 8001d9c:	00000400 	.word	0x00000400
 8001da0:	20000300 	.word	0x20000300
 8001da4:	20000318 	.word	0x20000318

08001da8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001da8:	b480      	push	{r7}
 8001daa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <SystemInit+0x20>)
 8001dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001db2:	4a05      	ldr	r2, [pc, #20]	; (8001dc8 <SystemInit+0x20>)
 8001db4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001db8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001dbc:	bf00      	nop
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	e000ed00 	.word	0xe000ed00

08001dcc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001dcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e04 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001dd0:	480d      	ldr	r0, [pc, #52]	; (8001e08 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001dd2:	490e      	ldr	r1, [pc, #56]	; (8001e0c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001dd4:	4a0e      	ldr	r2, [pc, #56]	; (8001e10 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dd6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001dd8:	e002      	b.n	8001de0 <LoopCopyDataInit>

08001dda <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dda:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ddc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dde:	3304      	adds	r3, #4

08001de0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001de0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001de2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001de4:	d3f9      	bcc.n	8001dda <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001de6:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001de8:	4c0b      	ldr	r4, [pc, #44]	; (8001e18 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001dea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dec:	e001      	b.n	8001df2 <LoopFillZerobss>

08001dee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001df0:	3204      	adds	r2, #4

08001df2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001df2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001df4:	d3fb      	bcc.n	8001dee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001df6:	f7ff ffd7 	bl	8001da8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001dfa:	f002 fb2f 	bl	800445c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dfe:	f7ff fcb9 	bl	8001774 <main>
  bx  lr    
 8001e02:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001e04:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e0c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8001e10:	0800782c 	.word	0x0800782c
  ldr r2, =_sbss
 8001e14:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8001e18:	20000318 	.word	0x20000318

08001e1c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e1c:	e7fe      	b.n	8001e1c <ADC_IRQHandler>
	...

08001e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e24:	4b0e      	ldr	r3, [pc, #56]	; (8001e60 <HAL_Init+0x40>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a0d      	ldr	r2, [pc, #52]	; (8001e60 <HAL_Init+0x40>)
 8001e2a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e2e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e30:	4b0b      	ldr	r3, [pc, #44]	; (8001e60 <HAL_Init+0x40>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <HAL_Init+0x40>)
 8001e36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001e3a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e3c:	4b08      	ldr	r3, [pc, #32]	; (8001e60 <HAL_Init+0x40>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a07      	ldr	r2, [pc, #28]	; (8001e60 <HAL_Init+0x40>)
 8001e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e48:	2003      	movs	r0, #3
 8001e4a:	f000 f931 	bl	80020b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e4e:	200f      	movs	r0, #15
 8001e50:	f000 f808 	bl	8001e64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e54:	f7ff fdb8 	bl	80019c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	40023c00 	.word	0x40023c00

08001e64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b082      	sub	sp, #8
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e6c:	4b12      	ldr	r3, [pc, #72]	; (8001eb8 <HAL_InitTick+0x54>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	4b12      	ldr	r3, [pc, #72]	; (8001ebc <HAL_InitTick+0x58>)
 8001e72:	781b      	ldrb	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e82:	4618      	mov	r0, r3
 8001e84:	f000 f93b 	bl	80020fe <HAL_SYSTICK_Config>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e00e      	b.n	8001eb0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2b0f      	cmp	r3, #15
 8001e96:	d80a      	bhi.n	8001eae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e98:	2200      	movs	r2, #0
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001ea0:	f000 f911 	bl	80020c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ea4:	4a06      	ldr	r2, [pc, #24]	; (8001ec0 <HAL_InitTick+0x5c>)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	e000      	b.n	8001eb0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	20000004 	.word	0x20000004
 8001ebc:	2000000c 	.word	0x2000000c
 8001ec0:	20000008 	.word	0x20000008

08001ec4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <HAL_IncTick+0x20>)
 8001eca:	781b      	ldrb	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	4b06      	ldr	r3, [pc, #24]	; (8001ee8 <HAL_IncTick+0x24>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	4a04      	ldr	r2, [pc, #16]	; (8001ee8 <HAL_IncTick+0x24>)
 8001ed6:	6013      	str	r3, [r2, #0]
}
 8001ed8:	bf00      	nop
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	2000000c 	.word	0x2000000c
 8001ee8:	20000304 	.word	0x20000304

08001eec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eec:	b480      	push	{r7}
 8001eee:	af00      	add	r7, sp, #0
  return uwTick;
 8001ef0:	4b03      	ldr	r3, [pc, #12]	; (8001f00 <HAL_GetTick+0x14>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	20000304 	.word	0x20000304

08001f04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f0c:	f7ff ffee 	bl	8001eec <HAL_GetTick>
 8001f10:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f1c:	d005      	beq.n	8001f2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f1e:	4b0a      	ldr	r3, [pc, #40]	; (8001f48 <HAL_Delay+0x44>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	461a      	mov	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4413      	add	r3, r2
 8001f28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f2a:	bf00      	nop
 8001f2c:	f7ff ffde 	bl	8001eec <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	68bb      	ldr	r3, [r7, #8]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	68fa      	ldr	r2, [r7, #12]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d8f7      	bhi.n	8001f2c <HAL_Delay+0x28>
  {
  }
}
 8001f3c:	bf00      	nop
 8001f3e:	bf00      	nop
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	2000000c 	.word	0x2000000c

08001f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7e:	4a04      	ldr	r2, [pc, #16]	; (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	60d3      	str	r3, [r2, #12]
}
 8001f84:	bf00      	nop
 8001f86:	3714      	adds	r7, #20
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr
 8001f90:	e000ed00 	.word	0xe000ed00

08001f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <__NVIC_GetPriorityGrouping+0x18>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 0307 	and.w	r3, r3, #7
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	6039      	str	r1, [r7, #0]
 8001fba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	db0a      	blt.n	8001fda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	b2da      	uxtb	r2, r3
 8001fc8:	490c      	ldr	r1, [pc, #48]	; (8001ffc <__NVIC_SetPriority+0x4c>)
 8001fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fce:	0112      	lsls	r2, r2, #4
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	440b      	add	r3, r1
 8001fd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fd8:	e00a      	b.n	8001ff0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	b2da      	uxtb	r2, r3
 8001fde:	4908      	ldr	r1, [pc, #32]	; (8002000 <__NVIC_SetPriority+0x50>)
 8001fe0:	79fb      	ldrb	r3, [r7, #7]
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	3b04      	subs	r3, #4
 8001fe8:	0112      	lsls	r2, r2, #4
 8001fea:	b2d2      	uxtb	r2, r2
 8001fec:	440b      	add	r3, r1
 8001fee:	761a      	strb	r2, [r3, #24]
}
 8001ff0:	bf00      	nop
 8001ff2:	370c      	adds	r7, #12
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	e000e100 	.word	0xe000e100
 8002000:	e000ed00 	.word	0xe000ed00

08002004 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002004:	b480      	push	{r7}
 8002006:	b089      	sub	sp, #36	; 0x24
 8002008:	af00      	add	r7, sp, #0
 800200a:	60f8      	str	r0, [r7, #12]
 800200c:	60b9      	str	r1, [r7, #8]
 800200e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	f003 0307 	and.w	r3, r3, #7
 8002016:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f1c3 0307 	rsb	r3, r3, #7
 800201e:	2b04      	cmp	r3, #4
 8002020:	bf28      	it	cs
 8002022:	2304      	movcs	r3, #4
 8002024:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	3304      	adds	r3, #4
 800202a:	2b06      	cmp	r3, #6
 800202c:	d902      	bls.n	8002034 <NVIC_EncodePriority+0x30>
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	3b03      	subs	r3, #3
 8002032:	e000      	b.n	8002036 <NVIC_EncodePriority+0x32>
 8002034:	2300      	movs	r3, #0
 8002036:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002038:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800203c:	69bb      	ldr	r3, [r7, #24]
 800203e:	fa02 f303 	lsl.w	r3, r2, r3
 8002042:	43da      	mvns	r2, r3
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	401a      	ands	r2, r3
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800204c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	fa01 f303 	lsl.w	r3, r1, r3
 8002056:	43d9      	mvns	r1, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800205c:	4313      	orrs	r3, r2
         );
}
 800205e:	4618      	mov	r0, r3
 8002060:	3724      	adds	r7, #36	; 0x24
 8002062:	46bd      	mov	sp, r7
 8002064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002068:	4770      	bx	lr
	...

0800206c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b082      	sub	sp, #8
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	3b01      	subs	r3, #1
 8002078:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800207c:	d301      	bcc.n	8002082 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800207e:	2301      	movs	r3, #1
 8002080:	e00f      	b.n	80020a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002082:	4a0a      	ldr	r2, [pc, #40]	; (80020ac <SysTick_Config+0x40>)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	3b01      	subs	r3, #1
 8002088:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800208a:	210f      	movs	r1, #15
 800208c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002090:	f7ff ff8e 	bl	8001fb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002094:	4b05      	ldr	r3, [pc, #20]	; (80020ac <SysTick_Config+0x40>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800209a:	4b04      	ldr	r3, [pc, #16]	; (80020ac <SysTick_Config+0x40>)
 800209c:	2207      	movs	r2, #7
 800209e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020a0:	2300      	movs	r3, #0
}
 80020a2:	4618      	mov	r0, r3
 80020a4:	3708      	adds	r7, #8
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	e000e010 	.word	0xe000e010

080020b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	f7ff ff47 	bl	8001f4c <__NVIC_SetPriorityGrouping>
}
 80020be:	bf00      	nop
 80020c0:	3708      	adds	r7, #8
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b086      	sub	sp, #24
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	4603      	mov	r3, r0
 80020ce:	60b9      	str	r1, [r7, #8]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020d8:	f7ff ff5c 	bl	8001f94 <__NVIC_GetPriorityGrouping>
 80020dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68b9      	ldr	r1, [r7, #8]
 80020e2:	6978      	ldr	r0, [r7, #20]
 80020e4:	f7ff ff8e 	bl	8002004 <NVIC_EncodePriority>
 80020e8:	4602      	mov	r2, r0
 80020ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020ee:	4611      	mov	r1, r2
 80020f0:	4618      	mov	r0, r3
 80020f2:	f7ff ff5d 	bl	8001fb0 <__NVIC_SetPriority>
}
 80020f6:	bf00      	nop
 80020f8:	3718      	adds	r7, #24
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b082      	sub	sp, #8
 8002102:	af00      	add	r7, sp, #0
 8002104:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f7ff ffb0 	bl	800206c <SysTick_Config>
 800210c:	4603      	mov	r3, r0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3708      	adds	r7, #8
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
	...

08002118 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002118:	b480      	push	{r7}
 800211a:	b089      	sub	sp, #36	; 0x24
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800212a:	2300      	movs	r3, #0
 800212c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	e177      	b.n	8002424 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002134:	2201      	movs	r2, #1
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	697a      	ldr	r2, [r7, #20]
 8002144:	4013      	ands	r3, r2
 8002146:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002148:	693a      	ldr	r2, [r7, #16]
 800214a:	697b      	ldr	r3, [r7, #20]
 800214c:	429a      	cmp	r2, r3
 800214e:	f040 8166 	bne.w	800241e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	2b01      	cmp	r3, #1
 800215c:	d005      	beq.n	800216a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002166:	2b02      	cmp	r3, #2
 8002168:	d130      	bne.n	80021cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002170:	69fb      	ldr	r3, [r7, #28]
 8002172:	005b      	lsls	r3, r3, #1
 8002174:	2203      	movs	r2, #3
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43db      	mvns	r3, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4013      	ands	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	68da      	ldr	r2, [r3, #12]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	fa02 f303 	lsl.w	r3, r2, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4313      	orrs	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	685b      	ldr	r3, [r3, #4]
 800219e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021a0:	2201      	movs	r2, #1
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	fa02 f303 	lsl.w	r3, r2, r3
 80021a8:	43db      	mvns	r3, r3
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	4013      	ands	r3, r2
 80021ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	091b      	lsrs	r3, r3, #4
 80021b6:	f003 0201 	and.w	r2, r3, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4313      	orrs	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f003 0303 	and.w	r3, r3, #3
 80021d4:	2b03      	cmp	r3, #3
 80021d6:	d017      	beq.n	8002208 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	2203      	movs	r2, #3
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	689a      	ldr	r2, [r3, #8]
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	005b      	lsls	r3, r3, #1
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	69ba      	ldr	r2, [r7, #24]
 80021fe:	4313      	orrs	r3, r2
 8002200:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f003 0303 	and.w	r3, r3, #3
 8002210:	2b02      	cmp	r3, #2
 8002212:	d123      	bne.n	800225c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	08da      	lsrs	r2, r3, #3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	3208      	adds	r2, #8
 800221c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002220:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	220f      	movs	r2, #15
 800222c:	fa02 f303 	lsl.w	r3, r2, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	691a      	ldr	r2, [r3, #16]
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	f003 0307 	and.w	r3, r3, #7
 8002242:	009b      	lsls	r3, r3, #2
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	69ba      	ldr	r2, [r7, #24]
 800224a:	4313      	orrs	r3, r2
 800224c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	08da      	lsrs	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3208      	adds	r2, #8
 8002256:	69b9      	ldr	r1, [r7, #24]
 8002258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	2203      	movs	r2, #3
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 0203 	and.w	r2, r3, #3
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002298:	2b00      	cmp	r3, #0
 800229a:	f000 80c0 	beq.w	800241e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	60fb      	str	r3, [r7, #12]
 80022a2:	4b66      	ldr	r3, [pc, #408]	; (800243c <HAL_GPIO_Init+0x324>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a65      	ldr	r2, [pc, #404]	; (800243c <HAL_GPIO_Init+0x324>)
 80022a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b63      	ldr	r3, [pc, #396]	; (800243c <HAL_GPIO_Init+0x324>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022b6:	60fb      	str	r3, [r7, #12]
 80022b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022ba:	4a61      	ldr	r2, [pc, #388]	; (8002440 <HAL_GPIO_Init+0x328>)
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	089b      	lsrs	r3, r3, #2
 80022c0:	3302      	adds	r3, #2
 80022c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	f003 0303 	and.w	r3, r3, #3
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	220f      	movs	r2, #15
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43db      	mvns	r3, r3
 80022d8:	69ba      	ldr	r2, [r7, #24]
 80022da:	4013      	ands	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a58      	ldr	r2, [pc, #352]	; (8002444 <HAL_GPIO_Init+0x32c>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d037      	beq.n	8002356 <HAL_GPIO_Init+0x23e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a57      	ldr	r2, [pc, #348]	; (8002448 <HAL_GPIO_Init+0x330>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d031      	beq.n	8002352 <HAL_GPIO_Init+0x23a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a56      	ldr	r2, [pc, #344]	; (800244c <HAL_GPIO_Init+0x334>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d02b      	beq.n	800234e <HAL_GPIO_Init+0x236>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a55      	ldr	r2, [pc, #340]	; (8002450 <HAL_GPIO_Init+0x338>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d025      	beq.n	800234a <HAL_GPIO_Init+0x232>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a54      	ldr	r2, [pc, #336]	; (8002454 <HAL_GPIO_Init+0x33c>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d01f      	beq.n	8002346 <HAL_GPIO_Init+0x22e>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a53      	ldr	r2, [pc, #332]	; (8002458 <HAL_GPIO_Init+0x340>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d019      	beq.n	8002342 <HAL_GPIO_Init+0x22a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a52      	ldr	r2, [pc, #328]	; (800245c <HAL_GPIO_Init+0x344>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d013      	beq.n	800233e <HAL_GPIO_Init+0x226>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a51      	ldr	r2, [pc, #324]	; (8002460 <HAL_GPIO_Init+0x348>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d00d      	beq.n	800233a <HAL_GPIO_Init+0x222>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a50      	ldr	r2, [pc, #320]	; (8002464 <HAL_GPIO_Init+0x34c>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d007      	beq.n	8002336 <HAL_GPIO_Init+0x21e>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a4f      	ldr	r2, [pc, #316]	; (8002468 <HAL_GPIO_Init+0x350>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_GPIO_Init+0x21a>
 800232e:	2309      	movs	r3, #9
 8002330:	e012      	b.n	8002358 <HAL_GPIO_Init+0x240>
 8002332:	230a      	movs	r3, #10
 8002334:	e010      	b.n	8002358 <HAL_GPIO_Init+0x240>
 8002336:	2308      	movs	r3, #8
 8002338:	e00e      	b.n	8002358 <HAL_GPIO_Init+0x240>
 800233a:	2307      	movs	r3, #7
 800233c:	e00c      	b.n	8002358 <HAL_GPIO_Init+0x240>
 800233e:	2306      	movs	r3, #6
 8002340:	e00a      	b.n	8002358 <HAL_GPIO_Init+0x240>
 8002342:	2305      	movs	r3, #5
 8002344:	e008      	b.n	8002358 <HAL_GPIO_Init+0x240>
 8002346:	2304      	movs	r3, #4
 8002348:	e006      	b.n	8002358 <HAL_GPIO_Init+0x240>
 800234a:	2303      	movs	r3, #3
 800234c:	e004      	b.n	8002358 <HAL_GPIO_Init+0x240>
 800234e:	2302      	movs	r3, #2
 8002350:	e002      	b.n	8002358 <HAL_GPIO_Init+0x240>
 8002352:	2301      	movs	r3, #1
 8002354:	e000      	b.n	8002358 <HAL_GPIO_Init+0x240>
 8002356:	2300      	movs	r3, #0
 8002358:	69fa      	ldr	r2, [r7, #28]
 800235a:	f002 0203 	and.w	r2, r2, #3
 800235e:	0092      	lsls	r2, r2, #2
 8002360:	4093      	lsls	r3, r2
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002368:	4935      	ldr	r1, [pc, #212]	; (8002440 <HAL_GPIO_Init+0x328>)
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	089b      	lsrs	r3, r3, #2
 800236e:	3302      	adds	r3, #2
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002376:	4b3d      	ldr	r3, [pc, #244]	; (800246c <HAL_GPIO_Init+0x354>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	43db      	mvns	r3, r3
 8002380:	69ba      	ldr	r2, [r7, #24]
 8002382:	4013      	ands	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d003      	beq.n	800239a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002392:	69ba      	ldr	r2, [r7, #24]
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800239a:	4a34      	ldr	r2, [pc, #208]	; (800246c <HAL_GPIO_Init+0x354>)
 800239c:	69bb      	ldr	r3, [r7, #24]
 800239e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <HAL_GPIO_Init+0x354>)
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	43db      	mvns	r3, r3
 80023aa:	69ba      	ldr	r2, [r7, #24]
 80023ac:	4013      	ands	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d003      	beq.n	80023c4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023c4:	4a29      	ldr	r2, [pc, #164]	; (800246c <HAL_GPIO_Init+0x354>)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ca:	4b28      	ldr	r3, [pc, #160]	; (800246c <HAL_GPIO_Init+0x354>)
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	43db      	mvns	r3, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4013      	ands	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d003      	beq.n	80023ee <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	693b      	ldr	r3, [r7, #16]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023ee:	4a1f      	ldr	r2, [pc, #124]	; (800246c <HAL_GPIO_Init+0x354>)
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023f4:	4b1d      	ldr	r3, [pc, #116]	; (800246c <HAL_GPIO_Init+0x354>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d003      	beq.n	8002418 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002418:	4a14      	ldr	r2, [pc, #80]	; (800246c <HAL_GPIO_Init+0x354>)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	3301      	adds	r3, #1
 8002422:	61fb      	str	r3, [r7, #28]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	2b0f      	cmp	r3, #15
 8002428:	f67f ae84 	bls.w	8002134 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	3724      	adds	r7, #36	; 0x24
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	40023800 	.word	0x40023800
 8002440:	40013800 	.word	0x40013800
 8002444:	40020000 	.word	0x40020000
 8002448:	40020400 	.word	0x40020400
 800244c:	40020800 	.word	0x40020800
 8002450:	40020c00 	.word	0x40020c00
 8002454:	40021000 	.word	0x40021000
 8002458:	40021400 	.word	0x40021400
 800245c:	40021800 	.word	0x40021800
 8002460:	40021c00 	.word	0x40021c00
 8002464:	40022000 	.word	0x40022000
 8002468:	40022400 	.word	0x40022400
 800246c:	40013c00 	.word	0x40013c00

08002470 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	460b      	mov	r3, r1
 800247a:	807b      	strh	r3, [r7, #2]
 800247c:	4613      	mov	r3, r2
 800247e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002480:	787b      	ldrb	r3, [r7, #1]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d003      	beq.n	800248e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002486:	887a      	ldrh	r2, [r7, #2]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800248c:	e003      	b.n	8002496 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800248e:	887b      	ldrh	r3, [r7, #2]
 8002490:	041a      	lsls	r2, r3, #16
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	619a      	str	r2, [r3, #24]
}
 8002496:	bf00      	nop
 8002498:	370c      	adds	r7, #12
 800249a:	46bd      	mov	sp, r7
 800249c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a0:	4770      	bx	lr
	...

080024a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b084      	sub	sp, #16
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e12b      	b.n	800270e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d106      	bne.n	80024d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2200      	movs	r2, #0
 80024c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f7ff faa4 	bl	8001a18 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	2224      	movs	r2, #36	; 0x24
 80024d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f022 0201 	bic.w	r2, r2, #1
 80024e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	681a      	ldr	r2, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002506:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002508:	f001 f8c2 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 800250c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4a81      	ldr	r2, [pc, #516]	; (8002718 <HAL_I2C_Init+0x274>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d807      	bhi.n	8002528 <HAL_I2C_Init+0x84>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	4a80      	ldr	r2, [pc, #512]	; (800271c <HAL_I2C_Init+0x278>)
 800251c:	4293      	cmp	r3, r2
 800251e:	bf94      	ite	ls
 8002520:	2301      	movls	r3, #1
 8002522:	2300      	movhi	r3, #0
 8002524:	b2db      	uxtb	r3, r3
 8002526:	e006      	b.n	8002536 <HAL_I2C_Init+0x92>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4a7d      	ldr	r2, [pc, #500]	; (8002720 <HAL_I2C_Init+0x27c>)
 800252c:	4293      	cmp	r3, r2
 800252e:	bf94      	ite	ls
 8002530:	2301      	movls	r3, #1
 8002532:	2300      	movhi	r3, #0
 8002534:	b2db      	uxtb	r3, r3
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800253a:	2301      	movs	r3, #1
 800253c:	e0e7      	b.n	800270e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	4a78      	ldr	r2, [pc, #480]	; (8002724 <HAL_I2C_Init+0x280>)
 8002542:	fba2 2303 	umull	r2, r3, r2, r3
 8002546:	0c9b      	lsrs	r3, r3, #18
 8002548:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68ba      	ldr	r2, [r7, #8]
 800255a:	430a      	orrs	r2, r1
 800255c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6a1b      	ldr	r3, [r3, #32]
 8002564:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	4a6a      	ldr	r2, [pc, #424]	; (8002718 <HAL_I2C_Init+0x274>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d802      	bhi.n	8002578 <HAL_I2C_Init+0xd4>
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	3301      	adds	r3, #1
 8002576:	e009      	b.n	800258c <HAL_I2C_Init+0xe8>
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800257e:	fb02 f303 	mul.w	r3, r2, r3
 8002582:	4a69      	ldr	r2, [pc, #420]	; (8002728 <HAL_I2C_Init+0x284>)
 8002584:	fba2 2303 	umull	r2, r3, r2, r3
 8002588:	099b      	lsrs	r3, r3, #6
 800258a:	3301      	adds	r3, #1
 800258c:	687a      	ldr	r2, [r7, #4]
 800258e:	6812      	ldr	r2, [r2, #0]
 8002590:	430b      	orrs	r3, r1
 8002592:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	69db      	ldr	r3, [r3, #28]
 800259a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800259e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	495c      	ldr	r1, [pc, #368]	; (8002718 <HAL_I2C_Init+0x274>)
 80025a8:	428b      	cmp	r3, r1
 80025aa:	d819      	bhi.n	80025e0 <HAL_I2C_Init+0x13c>
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	1e59      	subs	r1, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	005b      	lsls	r3, r3, #1
 80025b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80025ba:	1c59      	adds	r1, r3, #1
 80025bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80025c0:	400b      	ands	r3, r1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00a      	beq.n	80025dc <HAL_I2C_Init+0x138>
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	1e59      	subs	r1, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80025d4:	3301      	adds	r3, #1
 80025d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025da:	e051      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 80025dc:	2304      	movs	r3, #4
 80025de:	e04f      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689b      	ldr	r3, [r3, #8]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d111      	bne.n	800260c <HAL_I2C_Init+0x168>
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	1e58      	subs	r0, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6859      	ldr	r1, [r3, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	005b      	lsls	r3, r3, #1
 80025f4:	440b      	add	r3, r1
 80025f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80025fa:	3301      	adds	r3, #1
 80025fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf0c      	ite	eq
 8002604:	2301      	moveq	r3, #1
 8002606:	2300      	movne	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	e012      	b.n	8002632 <HAL_I2C_Init+0x18e>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	1e58      	subs	r0, r3, #1
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6859      	ldr	r1, [r3, #4]
 8002614:	460b      	mov	r3, r1
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	0099      	lsls	r1, r3, #2
 800261c:	440b      	add	r3, r1
 800261e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002622:	3301      	adds	r3, #1
 8002624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002628:	2b00      	cmp	r3, #0
 800262a:	bf0c      	ite	eq
 800262c:	2301      	moveq	r3, #1
 800262e:	2300      	movne	r3, #0
 8002630:	b2db      	uxtb	r3, r3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d001      	beq.n	800263a <HAL_I2C_Init+0x196>
 8002636:	2301      	movs	r3, #1
 8002638:	e022      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d10e      	bne.n	8002660 <HAL_I2C_Init+0x1bc>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1e58      	subs	r0, r3, #1
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6859      	ldr	r1, [r3, #4]
 800264a:	460b      	mov	r3, r1
 800264c:	005b      	lsls	r3, r3, #1
 800264e:	440b      	add	r3, r1
 8002650:	fbb0 f3f3 	udiv	r3, r0, r3
 8002654:	3301      	adds	r3, #1
 8002656:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800265a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800265e:	e00f      	b.n	8002680 <HAL_I2C_Init+0x1dc>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	1e58      	subs	r0, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6859      	ldr	r1, [r3, #4]
 8002668:	460b      	mov	r3, r1
 800266a:	009b      	lsls	r3, r3, #2
 800266c:	440b      	add	r3, r1
 800266e:	0099      	lsls	r1, r3, #2
 8002670:	440b      	add	r3, r1
 8002672:	fbb0 f3f3 	udiv	r3, r0, r3
 8002676:	3301      	adds	r3, #1
 8002678:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800267c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	6809      	ldr	r1, [r1, #0]
 8002684:	4313      	orrs	r3, r2
 8002686:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	69da      	ldr	r2, [r3, #28]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6a1b      	ldr	r3, [r3, #32]
 800269a:	431a      	orrs	r2, r3
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	430a      	orrs	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80026ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6911      	ldr	r1, [r2, #16]
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	68d2      	ldr	r2, [r2, #12]
 80026ba:	4311      	orrs	r1, r2
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	6812      	ldr	r2, [r2, #0]
 80026c0:	430b      	orrs	r3, r1
 80026c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	695a      	ldr	r2, [r3, #20]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681a      	ldr	r2, [r3, #0]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f042 0201 	orr.w	r2, r2, #1
 80026ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2200      	movs	r2, #0
 80026f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2220      	movs	r2, #32
 80026fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2200      	movs	r2, #0
 8002708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3710      	adds	r7, #16
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	000186a0 	.word	0x000186a0
 800271c:	001e847f 	.word	0x001e847f
 8002720:	003d08ff 	.word	0x003d08ff
 8002724:	431bde83 	.word	0x431bde83
 8002728:	10624dd3 	.word	0x10624dd3

0800272c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b088      	sub	sp, #32
 8002730:	af02      	add	r7, sp, #8
 8002732:	60f8      	str	r0, [r7, #12]
 8002734:	607a      	str	r2, [r7, #4]
 8002736:	461a      	mov	r2, r3
 8002738:	460b      	mov	r3, r1
 800273a:	817b      	strh	r3, [r7, #10]
 800273c:	4613      	mov	r3, r2
 800273e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002740:	f7ff fbd4 	bl	8001eec <HAL_GetTick>
 8002744:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b20      	cmp	r3, #32
 8002750:	f040 80e0 	bne.w	8002914 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	9300      	str	r3, [sp, #0]
 8002758:	2319      	movs	r3, #25
 800275a:	2201      	movs	r2, #1
 800275c:	4970      	ldr	r1, [pc, #448]	; (8002920 <HAL_I2C_Master_Transmit+0x1f4>)
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f964 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800276a:	2302      	movs	r3, #2
 800276c:	e0d3      	b.n	8002916 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002774:	2b01      	cmp	r3, #1
 8002776:	d101      	bne.n	800277c <HAL_I2C_Master_Transmit+0x50>
 8002778:	2302      	movs	r3, #2
 800277a:	e0cc      	b.n	8002916 <HAL_I2C_Master_Transmit+0x1ea>
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	2b01      	cmp	r3, #1
 8002790:	d007      	beq.n	80027a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f042 0201 	orr.w	r2, r2, #1
 80027a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	2221      	movs	r2, #33	; 0x21
 80027b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2210      	movs	r2, #16
 80027be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	687a      	ldr	r2, [r7, #4]
 80027cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	893a      	ldrh	r2, [r7, #8]
 80027d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d8:	b29a      	uxth	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	4a50      	ldr	r2, [pc, #320]	; (8002924 <HAL_I2C_Master_Transmit+0x1f8>)
 80027e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80027e4:	8979      	ldrh	r1, [r7, #10]
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	6a3a      	ldr	r2, [r7, #32]
 80027ea:	68f8      	ldr	r0, [r7, #12]
 80027ec:	f000 f89c 	bl	8002928 <I2C_MasterRequestWrite>
 80027f0:	4603      	mov	r3, r0
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d001      	beq.n	80027fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e08d      	b.n	8002916 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	695b      	ldr	r3, [r3, #20]
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	613b      	str	r3, [r7, #16]
 800280e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002810:	e066      	b.n	80028e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002812:	697a      	ldr	r2, [r7, #20]
 8002814:	6a39      	ldr	r1, [r7, #32]
 8002816:	68f8      	ldr	r0, [r7, #12]
 8002818:	f000 f9de 	bl	8002bd8 <I2C_WaitOnTXEFlagUntilTimeout>
 800281c:	4603      	mov	r3, r0
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00d      	beq.n	800283e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	2b04      	cmp	r3, #4
 8002828:	d107      	bne.n	800283a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002838:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
 800283c:	e06b      	b.n	8002916 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002842:	781a      	ldrb	r2, [r3, #0]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800284e:	1c5a      	adds	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002858:	b29b      	uxth	r3, r3
 800285a:	3b01      	subs	r3, #1
 800285c:	b29a      	uxth	r2, r3
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002866:	3b01      	subs	r3, #1
 8002868:	b29a      	uxth	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	695b      	ldr	r3, [r3, #20]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b04      	cmp	r3, #4
 800287a:	d11b      	bne.n	80028b4 <HAL_I2C_Master_Transmit+0x188>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002880:	2b00      	cmp	r3, #0
 8002882:	d017      	beq.n	80028b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002888:	781a      	ldrb	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002894:	1c5a      	adds	r2, r3, #1
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289e:	b29b      	uxth	r3, r3
 80028a0:	3b01      	subs	r3, #1
 80028a2:	b29a      	uxth	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b29a      	uxth	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	6a39      	ldr	r1, [r7, #32]
 80028b8:	68f8      	ldr	r0, [r7, #12]
 80028ba:	f000 f9ce 	bl	8002c5a <I2C_WaitOnBTFFlagUntilTimeout>
 80028be:	4603      	mov	r3, r0
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d00d      	beq.n	80028e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d107      	bne.n	80028dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681a      	ldr	r2, [r3, #0]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e01a      	b.n	8002916 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d194      	bne.n	8002812 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	2200      	movs	r2, #0
 800290c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002910:	2300      	movs	r3, #0
 8002912:	e000      	b.n	8002916 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002914:	2302      	movs	r3, #2
  }
}
 8002916:	4618      	mov	r0, r3
 8002918:	3718      	adds	r7, #24
 800291a:	46bd      	mov	sp, r7
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	00100002 	.word	0x00100002
 8002924:	ffff0000 	.word	0xffff0000

08002928 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b088      	sub	sp, #32
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	603b      	str	r3, [r7, #0]
 8002934:	460b      	mov	r3, r1
 8002936:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800293c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b08      	cmp	r3, #8
 8002942:	d006      	beq.n	8002952 <I2C_MasterRequestWrite+0x2a>
 8002944:	697b      	ldr	r3, [r7, #20]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d003      	beq.n	8002952 <I2C_MasterRequestWrite+0x2a>
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002950:	d108      	bne.n	8002964 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	681a      	ldr	r2, [r3, #0]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002960:	601a      	str	r2, [r3, #0]
 8002962:	e00b      	b.n	800297c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	2b12      	cmp	r3, #18
 800296a:	d107      	bne.n	800297c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800297a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	9300      	str	r3, [sp, #0]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	f000 f84f 	bl	8002a2c <I2C_WaitOnFlagUntilTimeout>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00d      	beq.n	80029b0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029a2:	d103      	bne.n	80029ac <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80029aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e035      	b.n	8002a1c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029b8:	d108      	bne.n	80029cc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80029ba:	897b      	ldrh	r3, [r7, #10]
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	461a      	mov	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80029c8:	611a      	str	r2, [r3, #16]
 80029ca:	e01b      	b.n	8002a04 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80029cc:	897b      	ldrh	r3, [r7, #10]
 80029ce:	11db      	asrs	r3, r3, #7
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	f003 0306 	and.w	r3, r3, #6
 80029d6:	b2db      	uxtb	r3, r3
 80029d8:	f063 030f 	orn	r3, r3, #15
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	490e      	ldr	r1, [pc, #56]	; (8002a24 <I2C_MasterRequestWrite+0xfc>)
 80029ea:	68f8      	ldr	r0, [r7, #12]
 80029ec:	f000 f875 	bl	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029f0:	4603      	mov	r3, r0
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d001      	beq.n	80029fa <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e010      	b.n	8002a1c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029fa:	897b      	ldrh	r3, [r7, #10]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	4907      	ldr	r1, [pc, #28]	; (8002a28 <I2C_MasterRequestWrite+0x100>)
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f865 	bl	8002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e000      	b.n	8002a1c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002a1a:	2300      	movs	r3, #0
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	00010008 	.word	0x00010008
 8002a28:	00010002 	.word	0x00010002

08002a2c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b084      	sub	sp, #16
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	60f8      	str	r0, [r7, #12]
 8002a34:	60b9      	str	r1, [r7, #8]
 8002a36:	603b      	str	r3, [r7, #0]
 8002a38:	4613      	mov	r3, r2
 8002a3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3c:	e025      	b.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a44:	d021      	beq.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a46:	f7ff fa51 	bl	8001eec <HAL_GetTick>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	1ad3      	subs	r3, r2, r3
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d302      	bcc.n	8002a5c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d116      	bne.n	8002a8a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	2200      	movs	r2, #0
 8002a60:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	2220      	movs	r2, #32
 8002a66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f043 0220 	orr.w	r2, r3, #32
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	e023      	b.n	8002ad2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	0c1b      	lsrs	r3, r3, #16
 8002a8e:	b2db      	uxtb	r3, r3
 8002a90:	2b01      	cmp	r3, #1
 8002a92:	d10d      	bne.n	8002ab0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	43da      	mvns	r2, r3
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	bf0c      	ite	eq
 8002aa6:	2301      	moveq	r3, #1
 8002aa8:	2300      	movne	r3, #0
 8002aaa:	b2db      	uxtb	r3, r3
 8002aac:	461a      	mov	r2, r3
 8002aae:	e00c      	b.n	8002aca <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	699b      	ldr	r3, [r3, #24]
 8002ab6:	43da      	mvns	r2, r3
 8002ab8:	68bb      	ldr	r3, [r7, #8]
 8002aba:	4013      	ands	r3, r2
 8002abc:	b29b      	uxth	r3, r3
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	bf0c      	ite	eq
 8002ac2:	2301      	moveq	r3, #1
 8002ac4:	2300      	movne	r3, #0
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	461a      	mov	r2, r3
 8002aca:	79fb      	ldrb	r3, [r7, #7]
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d0b6      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3710      	adds	r7, #16
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b084      	sub	sp, #16
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	60f8      	str	r0, [r7, #12]
 8002ae2:	60b9      	str	r1, [r7, #8]
 8002ae4:	607a      	str	r2, [r7, #4]
 8002ae6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ae8:	e051      	b.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	695b      	ldr	r3, [r3, #20]
 8002af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002af8:	d123      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b08:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002b12:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0204 	orr.w	r2, r3, #4
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e046      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b48:	d021      	beq.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4a:	f7ff f9cf 	bl	8001eec <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	687a      	ldr	r2, [r7, #4]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d302      	bcc.n	8002b60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d116      	bne.n	8002b8e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2220      	movs	r2, #32
 8002b6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	f043 0220 	orr.w	r2, r3, #32
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e020      	b.n	8002bd0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	0c1b      	lsrs	r3, r3, #16
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	2b01      	cmp	r3, #1
 8002b96:	d10c      	bne.n	8002bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	695b      	ldr	r3, [r3, #20]
 8002b9e:	43da      	mvns	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	bf14      	ite	ne
 8002baa:	2301      	movne	r3, #1
 8002bac:	2300      	moveq	r3, #0
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	e00b      	b.n	8002bca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	43da      	mvns	r2, r3
 8002bba:	68bb      	ldr	r3, [r7, #8]
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	bf14      	ite	ne
 8002bc4:	2301      	movne	r3, #1
 8002bc6:	2300      	moveq	r3, #0
 8002bc8:	b2db      	uxtb	r3, r3
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d18d      	bne.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002bce:	2300      	movs	r3, #0
}
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	3710      	adds	r7, #16
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	bd80      	pop	{r7, pc}

08002bd8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002be4:	e02d      	b.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002be6:	68f8      	ldr	r0, [r7, #12]
 8002be8:	f000 f878 	bl	8002cdc <I2C_IsAcknowledgeFailed>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e02d      	b.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bfc:	d021      	beq.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bfe:	f7ff f975 	bl	8001eec <HAL_GetTick>
 8002c02:	4602      	mov	r2, r0
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	1ad3      	subs	r3, r2, r3
 8002c08:	68ba      	ldr	r2, [r7, #8]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d302      	bcc.n	8002c14 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d116      	bne.n	8002c42 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	2200      	movs	r2, #0
 8002c18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2220      	movs	r2, #32
 8002c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	2200      	movs	r2, #0
 8002c26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f043 0220 	orr.w	r2, r3, #32
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e007      	b.n	8002c52 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d1ca      	bne.n	8002be6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
 8002c60:	60f8      	str	r0, [r7, #12]
 8002c62:	60b9      	str	r1, [r7, #8]
 8002c64:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c66:	e02d      	b.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f000 f837 	bl	8002cdc <I2C_IsAcknowledgeFailed>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d001      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e02d      	b.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c7e:	d021      	beq.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c80:	f7ff f934 	bl	8001eec <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	68ba      	ldr	r2, [r7, #8]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d302      	bcc.n	8002c96 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	2220      	movs	r2, #32
 8002ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb0:	f043 0220 	orr.w	r2, r3, #32
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e007      	b.n	8002cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d1ca      	bne.n	8002c68 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	695b      	ldr	r3, [r3, #20]
 8002cea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002cf2:	d11b      	bne.n	8002d2c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cfc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2200      	movs	r2, #0
 8002d02:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2200      	movs	r2, #0
 8002d24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	e000      	b.n	8002d2e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002d2c:	2300      	movs	r3, #0
}
 8002d2e:	4618      	mov	r0, r3
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d3a:	b480      	push	{r7}
 8002d3c:	b083      	sub	sp, #12
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	6078      	str	r0, [r7, #4]
 8002d42:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d129      	bne.n	8002da4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2224      	movs	r2, #36	; 0x24
 8002d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f022 0201 	bic.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f022 0210 	bic.w	r2, r2, #16
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	683a      	ldr	r2, [r7, #0]
 8002d84:	430a      	orrs	r2, r1
 8002d86:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f042 0201 	orr.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2220      	movs	r2, #32
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002da0:	2300      	movs	r3, #0
 8002da2:	e000      	b.n	8002da6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
  }
}
 8002da6:	4618      	mov	r0, r3
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b085      	sub	sp, #20
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d12a      	bne.n	8002e22 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 0201 	bic.w	r2, r2, #1
 8002de2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dea:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8002dec:	89fb      	ldrh	r3, [r7, #14]
 8002dee:	f023 030f 	bic.w	r3, r3, #15
 8002df2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	b29a      	uxth	r2, r3
 8002df8:	89fb      	ldrh	r3, [r7, #14]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	89fa      	ldrh	r2, [r7, #14]
 8002e04:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f042 0201 	orr.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2220      	movs	r2, #32
 8002e1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	e000      	b.n	8002e24 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8002e22:	2302      	movs	r3, #2
  }
}
 8002e24:	4618      	mov	r0, r3
 8002e26:	3714      	adds	r7, #20
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e267      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 0301 	and.w	r3, r3, #1
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d075      	beq.n	8002f3a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e4e:	4b88      	ldr	r3, [pc, #544]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d00c      	beq.n	8002e74 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b85      	ldr	r3, [pc, #532]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	689b      	ldr	r3, [r3, #8]
 8002e5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d112      	bne.n	8002e8c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e66:	4b82      	ldr	r3, [pc, #520]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e72:	d10b      	bne.n	8002e8c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e74:	4b7e      	ldr	r3, [pc, #504]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d05b      	beq.n	8002f38 <HAL_RCC_OscConfig+0x108>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d157      	bne.n	8002f38 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e88:	2301      	movs	r3, #1
 8002e8a:	e242      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e94:	d106      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x74>
 8002e96:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a75      	ldr	r2, [pc, #468]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	e01d      	b.n	8002ee0 <HAL_RCC_OscConfig+0xb0>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eac:	d10c      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x98>
 8002eae:	4b70      	ldr	r3, [pc, #448]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6f      	ldr	r2, [pc, #444]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	4b6d      	ldr	r3, [pc, #436]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a6c      	ldr	r2, [pc, #432]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	e00b      	b.n	8002ee0 <HAL_RCC_OscConfig+0xb0>
 8002ec8:	4b69      	ldr	r3, [pc, #420]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a68      	ldr	r2, [pc, #416]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ed2:	6013      	str	r3, [r2, #0]
 8002ed4:	4b66      	ldr	r3, [pc, #408]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a65      	ldr	r2, [pc, #404]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002eda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d013      	beq.n	8002f10 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee8:	f7ff f800 	bl	8001eec <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ef0:	f7fe fffc 	bl	8001eec <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e207      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f02:	4b5b      	ldr	r3, [pc, #364]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0xc0>
 8002f0e:	e014      	b.n	8002f3a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe ffec 	bl	8001eec <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f18:	f7fe ffe8 	bl	8001eec <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b64      	cmp	r3, #100	; 0x64
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e1f3      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f2a:	4b51      	ldr	r3, [pc, #324]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0xe8>
 8002f36:	e000      	b.n	8002f3a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0302 	and.w	r3, r3, #2
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d063      	beq.n	800300e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f46:	4b4a      	ldr	r3, [pc, #296]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00b      	beq.n	8002f6a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d11c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5e:	4b44      	ldr	r3, [pc, #272]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d116      	bne.n	8002f98 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f6a:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0302 	and.w	r3, r3, #2
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d005      	beq.n	8002f82 <HAL_RCC_OscConfig+0x152>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	68db      	ldr	r3, [r3, #12]
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d001      	beq.n	8002f82 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	e1c7      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f82:	4b3b      	ldr	r3, [pc, #236]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	00db      	lsls	r3, r3, #3
 8002f90:	4937      	ldr	r1, [pc, #220]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f96:	e03a      	b.n	800300e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d020      	beq.n	8002fe2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fa0:	4b34      	ldr	r3, [pc, #208]	; (8003074 <HAL_RCC_OscConfig+0x244>)
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa6:	f7fe ffa1 	bl	8001eec <HAL_GetTick>
 8002faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fac:	e008      	b.n	8002fc0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fae:	f7fe ff9d 	bl	8001eec <HAL_GetTick>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	1ad3      	subs	r3, r2, r3
 8002fb8:	2b02      	cmp	r3, #2
 8002fba:	d901      	bls.n	8002fc0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fbc:	2303      	movs	r3, #3
 8002fbe:	e1a8      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fc0:	4b2b      	ldr	r3, [pc, #172]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0302 	and.w	r3, r3, #2
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d0f0      	beq.n	8002fae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fcc:	4b28      	ldr	r3, [pc, #160]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	00db      	lsls	r3, r3, #3
 8002fda:	4925      	ldr	r1, [pc, #148]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	600b      	str	r3, [r1, #0]
 8002fe0:	e015      	b.n	800300e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fe2:	4b24      	ldr	r3, [pc, #144]	; (8003074 <HAL_RCC_OscConfig+0x244>)
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe8:	f7fe ff80 	bl	8001eec <HAL_GetTick>
 8002fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ff0:	f7fe ff7c 	bl	8001eec <HAL_GetTick>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b02      	cmp	r3, #2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e187      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003002:	4b1b      	ldr	r3, [pc, #108]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b00      	cmp	r3, #0
 8003018:	d036      	beq.n	8003088 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	695b      	ldr	r3, [r3, #20]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d016      	beq.n	8003050 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003022:	4b15      	ldr	r3, [pc, #84]	; (8003078 <HAL_RCC_OscConfig+0x248>)
 8003024:	2201      	movs	r2, #1
 8003026:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003028:	f7fe ff60 	bl	8001eec <HAL_GetTick>
 800302c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800302e:	e008      	b.n	8003042 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003030:	f7fe ff5c 	bl	8001eec <HAL_GetTick>
 8003034:	4602      	mov	r2, r0
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	1ad3      	subs	r3, r2, r3
 800303a:	2b02      	cmp	r3, #2
 800303c:	d901      	bls.n	8003042 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800303e:	2303      	movs	r3, #3
 8003040:	e167      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003042:	4b0b      	ldr	r3, [pc, #44]	; (8003070 <HAL_RCC_OscConfig+0x240>)
 8003044:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003046:	f003 0302 	and.w	r3, r3, #2
 800304a:	2b00      	cmp	r3, #0
 800304c:	d0f0      	beq.n	8003030 <HAL_RCC_OscConfig+0x200>
 800304e:	e01b      	b.n	8003088 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003050:	4b09      	ldr	r3, [pc, #36]	; (8003078 <HAL_RCC_OscConfig+0x248>)
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003056:	f7fe ff49 	bl	8001eec <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800305c:	e00e      	b.n	800307c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800305e:	f7fe ff45 	bl	8001eec <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d907      	bls.n	800307c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e150      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
 8003070:	40023800 	.word	0x40023800
 8003074:	42470000 	.word	0x42470000
 8003078:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800307c:	4b88      	ldr	r3, [pc, #544]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 800307e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d1ea      	bne.n	800305e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 8097 	beq.w	80031c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003096:	2300      	movs	r3, #0
 8003098:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800309a:	4b81      	ldr	r3, [pc, #516]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030a6:	2300      	movs	r3, #0
 80030a8:	60bb      	str	r3, [r7, #8]
 80030aa:	4b7d      	ldr	r3, [pc, #500]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	4a7c      	ldr	r2, [pc, #496]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6413      	str	r3, [r2, #64]	; 0x40
 80030b6:	4b7a      	ldr	r3, [pc, #488]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030c2:	2301      	movs	r3, #1
 80030c4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c6:	4b77      	ldr	r3, [pc, #476]	; (80032a4 <HAL_RCC_OscConfig+0x474>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d118      	bne.n	8003104 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030d2:	4b74      	ldr	r3, [pc, #464]	; (80032a4 <HAL_RCC_OscConfig+0x474>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a73      	ldr	r2, [pc, #460]	; (80032a4 <HAL_RCC_OscConfig+0x474>)
 80030d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030de:	f7fe ff05 	bl	8001eec <HAL_GetTick>
 80030e2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e4:	e008      	b.n	80030f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030e6:	f7fe ff01 	bl	8001eec <HAL_GetTick>
 80030ea:	4602      	mov	r2, r0
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	2b02      	cmp	r3, #2
 80030f2:	d901      	bls.n	80030f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030f4:	2303      	movs	r3, #3
 80030f6:	e10c      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030f8:	4b6a      	ldr	r3, [pc, #424]	; (80032a4 <HAL_RCC_OscConfig+0x474>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0f0      	beq.n	80030e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d106      	bne.n	800311a <HAL_RCC_OscConfig+0x2ea>
 800310c:	4b64      	ldr	r3, [pc, #400]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 800310e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003110:	4a63      	ldr	r2, [pc, #396]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003112:	f043 0301 	orr.w	r3, r3, #1
 8003116:	6713      	str	r3, [r2, #112]	; 0x70
 8003118:	e01c      	b.n	8003154 <HAL_RCC_OscConfig+0x324>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	2b05      	cmp	r3, #5
 8003120:	d10c      	bne.n	800313c <HAL_RCC_OscConfig+0x30c>
 8003122:	4b5f      	ldr	r3, [pc, #380]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a5e      	ldr	r2, [pc, #376]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 0304 	orr.w	r3, r3, #4
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	4b5c      	ldr	r3, [pc, #368]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003130:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003132:	4a5b      	ldr	r2, [pc, #364]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003134:	f043 0301 	orr.w	r3, r3, #1
 8003138:	6713      	str	r3, [r2, #112]	; 0x70
 800313a:	e00b      	b.n	8003154 <HAL_RCC_OscConfig+0x324>
 800313c:	4b58      	ldr	r3, [pc, #352]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a57      	ldr	r2, [pc, #348]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003142:	f023 0301 	bic.w	r3, r3, #1
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
 8003148:	4b55      	ldr	r3, [pc, #340]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 800314a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800314c:	4a54      	ldr	r2, [pc, #336]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 800314e:	f023 0304 	bic.w	r3, r3, #4
 8003152:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d015      	beq.n	8003188 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800315c:	f7fe fec6 	bl	8001eec <HAL_GetTick>
 8003160:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003162:	e00a      	b.n	800317a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003164:	f7fe fec2 	bl	8001eec <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003172:	4293      	cmp	r3, r2
 8003174:	d901      	bls.n	800317a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0cb      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800317a:	4b49      	ldr	r3, [pc, #292]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800317e:	f003 0302 	and.w	r3, r3, #2
 8003182:	2b00      	cmp	r3, #0
 8003184:	d0ee      	beq.n	8003164 <HAL_RCC_OscConfig+0x334>
 8003186:	e014      	b.n	80031b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003188:	f7fe feb0 	bl	8001eec <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800318e:	e00a      	b.n	80031a6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003190:	f7fe feac 	bl	8001eec <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	f241 3288 	movw	r2, #5000	; 0x1388
 800319e:	4293      	cmp	r3, r2
 80031a0:	d901      	bls.n	80031a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e0b5      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031a6:	4b3e      	ldr	r3, [pc, #248]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 80031a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031aa:	f003 0302 	and.w	r3, r3, #2
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d1ee      	bne.n	8003190 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031b2:	7dfb      	ldrb	r3, [r7, #23]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d105      	bne.n	80031c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031b8:	4b39      	ldr	r3, [pc, #228]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 80031ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031bc:	4a38      	ldr	r2, [pc, #224]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 80031be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031c2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	f000 80a1 	beq.w	8003310 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031ce:	4b34      	ldr	r3, [pc, #208]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	f003 030c 	and.w	r3, r3, #12
 80031d6:	2b08      	cmp	r3, #8
 80031d8:	d05c      	beq.n	8003294 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d141      	bne.n	8003266 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCC_OscConfig+0x478>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe fe80 	bl	8001eec <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f0:	f7fe fe7c 	bl	8001eec <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e087      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003202:	4b27      	ldr	r3, [pc, #156]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d1f0      	bne.n	80031f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	69da      	ldr	r2, [r3, #28]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321c:	019b      	lsls	r3, r3, #6
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	085b      	lsrs	r3, r3, #1
 8003226:	3b01      	subs	r3, #1
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	431a      	orrs	r2, r3
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003230:	061b      	lsls	r3, r3, #24
 8003232:	491b      	ldr	r1, [pc, #108]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003234:	4313      	orrs	r3, r2
 8003236:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003238:	4b1b      	ldr	r3, [pc, #108]	; (80032a8 <HAL_RCC_OscConfig+0x478>)
 800323a:	2201      	movs	r2, #1
 800323c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800323e:	f7fe fe55 	bl	8001eec <HAL_GetTick>
 8003242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003246:	f7fe fe51 	bl	8001eec <HAL_GetTick>
 800324a:	4602      	mov	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b02      	cmp	r3, #2
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e05c      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0x416>
 8003264:	e054      	b.n	8003310 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003266:	4b10      	ldr	r3, [pc, #64]	; (80032a8 <HAL_RCC_OscConfig+0x478>)
 8003268:	2200      	movs	r2, #0
 800326a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7fe fe3e 	bl	8001eec <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003274:	f7fe fe3a 	bl	8001eec <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b02      	cmp	r3, #2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e045      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003286:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <HAL_RCC_OscConfig+0x470>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d1f0      	bne.n	8003274 <HAL_RCC_OscConfig+0x444>
 8003292:	e03d      	b.n	8003310 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	699b      	ldr	r3, [r3, #24]
 8003298:	2b01      	cmp	r3, #1
 800329a:	d107      	bne.n	80032ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e038      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
 80032a0:	40023800 	.word	0x40023800
 80032a4:	40007000 	.word	0x40007000
 80032a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032ac:	4b1b      	ldr	r3, [pc, #108]	; (800331c <HAL_RCC_OscConfig+0x4ec>)
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d028      	beq.n	800330c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d121      	bne.n	800330c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d11a      	bne.n	800330c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032dc:	4013      	ands	r3, r2
 80032de:	687a      	ldr	r2, [r7, #4]
 80032e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d111      	bne.n	800330c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f2:	085b      	lsrs	r3, r3, #1
 80032f4:	3b01      	subs	r3, #1
 80032f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d107      	bne.n	800330c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003306:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003308:	429a      	cmp	r2, r3
 800330a:	d001      	beq.n	8003310 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e000      	b.n	8003312 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	40023800 	.word	0x40023800

08003320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b084      	sub	sp, #16
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
 8003328:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	2b00      	cmp	r3, #0
 800332e:	d101      	bne.n	8003334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0cc      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003334:	4b68      	ldr	r3, [pc, #416]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f003 030f 	and.w	r3, r3, #15
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d90c      	bls.n	800335c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003342:	4b65      	ldr	r3, [pc, #404]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003344:	683a      	ldr	r2, [r7, #0]
 8003346:	b2d2      	uxtb	r2, r2
 8003348:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800334a:	4b63      	ldr	r3, [pc, #396]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	683a      	ldr	r2, [r7, #0]
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0b8      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d020      	beq.n	80033aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f003 0304 	and.w	r3, r3, #4
 8003370:	2b00      	cmp	r3, #0
 8003372:	d005      	beq.n	8003380 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003374:	4b59      	ldr	r3, [pc, #356]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	4a58      	ldr	r2, [pc, #352]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 800337a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800337e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0308 	and.w	r3, r3, #8
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800338c:	4b53      	ldr	r3, [pc, #332]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	4a52      	ldr	r2, [pc, #328]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003392:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003396:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003398:	4b50      	ldr	r3, [pc, #320]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	494d      	ldr	r1, [pc, #308]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0301 	and.w	r3, r3, #1
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d044      	beq.n	8003440 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b01      	cmp	r3, #1
 80033bc:	d107      	bne.n	80033ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033be:	4b47      	ldr	r3, [pc, #284]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d119      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e07f      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d003      	beq.n	80033de <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033da:	2b03      	cmp	r3, #3
 80033dc:	d107      	bne.n	80033ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033de:	4b3f      	ldr	r3, [pc, #252]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d109      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e06f      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ee:	4b3b      	ldr	r3, [pc, #236]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0302 	and.w	r3, r3, #2
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e067      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033fe:	4b37      	ldr	r3, [pc, #220]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	f023 0203 	bic.w	r2, r3, #3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	4934      	ldr	r1, [pc, #208]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	4313      	orrs	r3, r2
 800340e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003410:	f7fe fd6c 	bl	8001eec <HAL_GetTick>
 8003414:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003416:	e00a      	b.n	800342e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003418:	f7fe fd68 	bl	8001eec <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e04f      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800342e:	4b2b      	ldr	r3, [pc, #172]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 020c 	and.w	r2, r3, #12
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	429a      	cmp	r2, r3
 800343e:	d1eb      	bne.n	8003418 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003440:	4b25      	ldr	r3, [pc, #148]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	429a      	cmp	r2, r3
 800344c:	d20c      	bcs.n	8003468 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800344e:	4b22      	ldr	r3, [pc, #136]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003450:	683a      	ldr	r2, [r7, #0]
 8003452:	b2d2      	uxtb	r2, r2
 8003454:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003456:	4b20      	ldr	r3, [pc, #128]	; (80034d8 <HAL_RCC_ClockConfig+0x1b8>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 030f 	and.w	r3, r3, #15
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	429a      	cmp	r2, r3
 8003462:	d001      	beq.n	8003468 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e032      	b.n	80034ce <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003474:	4b19      	ldr	r3, [pc, #100]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	4916      	ldr	r1, [pc, #88]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	4313      	orrs	r3, r2
 8003484:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 0308 	and.w	r3, r3, #8
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003492:	4b12      	ldr	r3, [pc, #72]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	00db      	lsls	r3, r3, #3
 80034a0:	490e      	ldr	r1, [pc, #56]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	4313      	orrs	r3, r2
 80034a4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034a6:	f000 f821 	bl	80034ec <HAL_RCC_GetSysClockFreq>
 80034aa:	4602      	mov	r2, r0
 80034ac:	4b0b      	ldr	r3, [pc, #44]	; (80034dc <HAL_RCC_ClockConfig+0x1bc>)
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	091b      	lsrs	r3, r3, #4
 80034b2:	f003 030f 	and.w	r3, r3, #15
 80034b6:	490a      	ldr	r1, [pc, #40]	; (80034e0 <HAL_RCC_ClockConfig+0x1c0>)
 80034b8:	5ccb      	ldrb	r3, [r1, r3]
 80034ba:	fa22 f303 	lsr.w	r3, r2, r3
 80034be:	4a09      	ldr	r2, [pc, #36]	; (80034e4 <HAL_RCC_ClockConfig+0x1c4>)
 80034c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034c2:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <HAL_RCC_ClockConfig+0x1c8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7fe fccc 	bl	8001e64 <HAL_InitTick>

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40023c00 	.word	0x40023c00
 80034dc:	40023800 	.word	0x40023800
 80034e0:	0800742c 	.word	0x0800742c
 80034e4:	20000004 	.word	0x20000004
 80034e8:	20000008 	.word	0x20000008

080034ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034f0:	b090      	sub	sp, #64	; 0x40
 80034f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	637b      	str	r3, [r7, #52]	; 0x34
 80034f8:	2300      	movs	r3, #0
 80034fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034fc:	2300      	movs	r3, #0
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003500:	2300      	movs	r3, #0
 8003502:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003504:	4b59      	ldr	r3, [pc, #356]	; (800366c <HAL_RCC_GetSysClockFreq+0x180>)
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f003 030c 	and.w	r3, r3, #12
 800350c:	2b08      	cmp	r3, #8
 800350e:	d00d      	beq.n	800352c <HAL_RCC_GetSysClockFreq+0x40>
 8003510:	2b08      	cmp	r3, #8
 8003512:	f200 80a1 	bhi.w	8003658 <HAL_RCC_GetSysClockFreq+0x16c>
 8003516:	2b00      	cmp	r3, #0
 8003518:	d002      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x34>
 800351a:	2b04      	cmp	r3, #4
 800351c:	d003      	beq.n	8003526 <HAL_RCC_GetSysClockFreq+0x3a>
 800351e:	e09b      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003520:	4b53      	ldr	r3, [pc, #332]	; (8003670 <HAL_RCC_GetSysClockFreq+0x184>)
 8003522:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003524:	e09b      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003526:	4b53      	ldr	r3, [pc, #332]	; (8003674 <HAL_RCC_GetSysClockFreq+0x188>)
 8003528:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800352a:	e098      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800352c:	4b4f      	ldr	r3, [pc, #316]	; (800366c <HAL_RCC_GetSysClockFreq+0x180>)
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003534:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003536:	4b4d      	ldr	r3, [pc, #308]	; (800366c <HAL_RCC_GetSysClockFreq+0x180>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d028      	beq.n	8003594 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003542:	4b4a      	ldr	r3, [pc, #296]	; (800366c <HAL_RCC_GetSysClockFreq+0x180>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	099b      	lsrs	r3, r3, #6
 8003548:	2200      	movs	r2, #0
 800354a:	623b      	str	r3, [r7, #32]
 800354c:	627a      	str	r2, [r7, #36]	; 0x24
 800354e:	6a3b      	ldr	r3, [r7, #32]
 8003550:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003554:	2100      	movs	r1, #0
 8003556:	4b47      	ldr	r3, [pc, #284]	; (8003674 <HAL_RCC_GetSysClockFreq+0x188>)
 8003558:	fb03 f201 	mul.w	r2, r3, r1
 800355c:	2300      	movs	r3, #0
 800355e:	fb00 f303 	mul.w	r3, r0, r3
 8003562:	4413      	add	r3, r2
 8003564:	4a43      	ldr	r2, [pc, #268]	; (8003674 <HAL_RCC_GetSysClockFreq+0x188>)
 8003566:	fba0 1202 	umull	r1, r2, r0, r2
 800356a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800356c:	460a      	mov	r2, r1
 800356e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003572:	4413      	add	r3, r2
 8003574:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003576:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003578:	2200      	movs	r2, #0
 800357a:	61bb      	str	r3, [r7, #24]
 800357c:	61fa      	str	r2, [r7, #28]
 800357e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003582:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003586:	f7fd fb1f 	bl	8000bc8 <__aeabi_uldivmod>
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4613      	mov	r3, r2
 8003590:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003592:	e053      	b.n	800363c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003594:	4b35      	ldr	r3, [pc, #212]	; (800366c <HAL_RCC_GetSysClockFreq+0x180>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	099b      	lsrs	r3, r3, #6
 800359a:	2200      	movs	r2, #0
 800359c:	613b      	str	r3, [r7, #16]
 800359e:	617a      	str	r2, [r7, #20]
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035a6:	f04f 0b00 	mov.w	fp, #0
 80035aa:	4652      	mov	r2, sl
 80035ac:	465b      	mov	r3, fp
 80035ae:	f04f 0000 	mov.w	r0, #0
 80035b2:	f04f 0100 	mov.w	r1, #0
 80035b6:	0159      	lsls	r1, r3, #5
 80035b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035bc:	0150      	lsls	r0, r2, #5
 80035be:	4602      	mov	r2, r0
 80035c0:	460b      	mov	r3, r1
 80035c2:	ebb2 080a 	subs.w	r8, r2, sl
 80035c6:	eb63 090b 	sbc.w	r9, r3, fp
 80035ca:	f04f 0200 	mov.w	r2, #0
 80035ce:	f04f 0300 	mov.w	r3, #0
 80035d2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035d6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035da:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035de:	ebb2 0408 	subs.w	r4, r2, r8
 80035e2:	eb63 0509 	sbc.w	r5, r3, r9
 80035e6:	f04f 0200 	mov.w	r2, #0
 80035ea:	f04f 0300 	mov.w	r3, #0
 80035ee:	00eb      	lsls	r3, r5, #3
 80035f0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035f4:	00e2      	lsls	r2, r4, #3
 80035f6:	4614      	mov	r4, r2
 80035f8:	461d      	mov	r5, r3
 80035fa:	eb14 030a 	adds.w	r3, r4, sl
 80035fe:	603b      	str	r3, [r7, #0]
 8003600:	eb45 030b 	adc.w	r3, r5, fp
 8003604:	607b      	str	r3, [r7, #4]
 8003606:	f04f 0200 	mov.w	r2, #0
 800360a:	f04f 0300 	mov.w	r3, #0
 800360e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003612:	4629      	mov	r1, r5
 8003614:	028b      	lsls	r3, r1, #10
 8003616:	4621      	mov	r1, r4
 8003618:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800361c:	4621      	mov	r1, r4
 800361e:	028a      	lsls	r2, r1, #10
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	2200      	movs	r2, #0
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	60fa      	str	r2, [r7, #12]
 800362c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003630:	f7fd faca 	bl	8000bc8 <__aeabi_uldivmod>
 8003634:	4602      	mov	r2, r0
 8003636:	460b      	mov	r3, r1
 8003638:	4613      	mov	r3, r2
 800363a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800363c:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_GetSysClockFreq+0x180>)
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	0c1b      	lsrs	r3, r3, #16
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	3301      	adds	r3, #1
 8003648:	005b      	lsls	r3, r3, #1
 800364a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800364c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800364e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003650:	fbb2 f3f3 	udiv	r3, r2, r3
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003656:	e002      	b.n	800365e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003658:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetSysClockFreq+0x184>)
 800365a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800365c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800365e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003660:	4618      	mov	r0, r3
 8003662:	3740      	adds	r7, #64	; 0x40
 8003664:	46bd      	mov	sp, r7
 8003666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	017d7840 	.word	0x017d7840

08003678 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000004 	.word	0x20000004

08003690 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4602      	mov	r2, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0a9b      	lsrs	r3, r3, #10
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4903      	ldr	r1, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036a6:	5ccb      	ldrb	r3, [r1, r3]
 80036a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	0800743c 	.word	0x0800743c

080036b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036bc:	f7ff ffdc 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 80036c0:	4602      	mov	r2, r0
 80036c2:	4b05      	ldr	r3, [pc, #20]	; (80036d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	0b5b      	lsrs	r3, r3, #13
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	4903      	ldr	r1, [pc, #12]	; (80036dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80036ce:	5ccb      	ldrb	r3, [r1, r3]
 80036d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	bd80      	pop	{r7, pc}
 80036d8:	40023800 	.word	0x40023800
 80036dc:	0800743c 	.word	0x0800743c

080036e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d101      	bne.n	80036f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e07b      	b.n	80037ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d108      	bne.n	800370c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003702:	d009      	beq.n	8003718 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2200      	movs	r2, #0
 8003708:	61da      	str	r2, [r3, #28]
 800370a:	e005      	b.n	8003718 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	2200      	movs	r2, #0
 8003716:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2200      	movs	r2, #0
 800371c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d106      	bne.n	8003738 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2200      	movs	r2, #0
 800372e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f7fe f9b8 	bl	8001aa8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800374e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003792:	431a      	orrs	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6a1b      	ldr	r3, [r3, #32]
 8003798:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379c:	ea42 0103 	orr.w	r1, r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	699b      	ldr	r3, [r3, #24]
 80037b4:	0c1b      	lsrs	r3, r3, #16
 80037b6:	f003 0104 	and.w	r1, r3, #4
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037be:	f003 0210 	and.w	r2, r3, #16
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	69da      	ldr	r2, [r3, #28]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2200      	movs	r2, #0
 80037de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3708      	adds	r7, #8
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b08c      	sub	sp, #48	; 0x30
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	60f8      	str	r0, [r7, #12]
 80037fa:	60b9      	str	r1, [r7, #8]
 80037fc:	607a      	str	r2, [r7, #4]
 80037fe:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003800:	2301      	movs	r3, #1
 8003802:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003810:	2b01      	cmp	r3, #1
 8003812:	d101      	bne.n	8003818 <HAL_SPI_TransmitReceive+0x26>
 8003814:	2302      	movs	r3, #2
 8003816:	e18a      	b.n	8003b2e <HAL_SPI_TransmitReceive+0x33c>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003820:	f7fe fb64 	bl	8001eec <HAL_GetTick>
 8003824:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800382c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003836:	887b      	ldrh	r3, [r7, #2]
 8003838:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800383a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800383e:	2b01      	cmp	r3, #1
 8003840:	d00f      	beq.n	8003862 <HAL_SPI_TransmitReceive+0x70>
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003848:	d107      	bne.n	800385a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d103      	bne.n	800385a <HAL_SPI_TransmitReceive+0x68>
 8003852:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003856:	2b04      	cmp	r3, #4
 8003858:	d003      	beq.n	8003862 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800385a:	2302      	movs	r3, #2
 800385c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003860:	e15b      	b.n	8003b1a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	2b00      	cmp	r3, #0
 8003866:	d005      	beq.n	8003874 <HAL_SPI_TransmitReceive+0x82>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <HAL_SPI_TransmitReceive+0x82>
 800386e:	887b      	ldrh	r3, [r7, #2]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d103      	bne.n	800387c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800387a:	e14e      	b.n	8003b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b04      	cmp	r3, #4
 8003886:	d003      	beq.n	8003890 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2205      	movs	r2, #5
 800388c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	887a      	ldrh	r2, [r7, #2]
 80038a0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	887a      	ldrh	r2, [r7, #2]
 80038a6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	68ba      	ldr	r2, [r7, #8]
 80038ac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	887a      	ldrh	r2, [r7, #2]
 80038b2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	887a      	ldrh	r2, [r7, #2]
 80038b8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2200      	movs	r2, #0
 80038c4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038d0:	2b40      	cmp	r3, #64	; 0x40
 80038d2:	d007      	beq.n	80038e4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038e2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	68db      	ldr	r3, [r3, #12]
 80038e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038ec:	d178      	bne.n	80039e0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d002      	beq.n	80038fc <HAL_SPI_TransmitReceive+0x10a>
 80038f6:	8b7b      	ldrh	r3, [r7, #26]
 80038f8:	2b01      	cmp	r3, #1
 80038fa:	d166      	bne.n	80039ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003900:	881a      	ldrh	r2, [r3, #0]
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800390c:	1c9a      	adds	r2, r3, #2
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003916:	b29b      	uxth	r3, r3
 8003918:	3b01      	subs	r3, #1
 800391a:	b29a      	uxth	r2, r3
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003920:	e053      	b.n	80039ca <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b02      	cmp	r3, #2
 800392e:	d11b      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x176>
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003934:	b29b      	uxth	r3, r3
 8003936:	2b00      	cmp	r3, #0
 8003938:	d016      	beq.n	8003968 <HAL_SPI_TransmitReceive+0x176>
 800393a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800393c:	2b01      	cmp	r3, #1
 800393e:	d113      	bne.n	8003968 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003944:	881a      	ldrh	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003950:	1c9a      	adds	r2, r3, #2
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800395a:	b29b      	uxth	r3, r3
 800395c:	3b01      	subs	r3, #1
 800395e:	b29a      	uxth	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	2b01      	cmp	r3, #1
 8003974:	d119      	bne.n	80039aa <HAL_SPI_TransmitReceive+0x1b8>
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800397a:	b29b      	uxth	r3, r3
 800397c:	2b00      	cmp	r3, #0
 800397e:	d014      	beq.n	80039aa <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68da      	ldr	r2, [r3, #12]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	b292      	uxth	r2, r2
 800398c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003992:	1c9a      	adds	r2, r3, #2
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80039a6:	2301      	movs	r3, #1
 80039a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80039aa:	f7fe fa9f 	bl	8001eec <HAL_GetTick>
 80039ae:	4602      	mov	r2, r0
 80039b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039b2:	1ad3      	subs	r3, r2, r3
 80039b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d807      	bhi.n	80039ca <HAL_SPI_TransmitReceive+0x1d8>
 80039ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039c0:	d003      	beq.n	80039ca <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80039c8:	e0a7      	b.n	8003b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d1a6      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x130>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039d8:	b29b      	uxth	r3, r3
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d1a1      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x130>
 80039de:	e07c      	b.n	8003ada <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d002      	beq.n	80039ee <HAL_SPI_TransmitReceive+0x1fc>
 80039e8:	8b7b      	ldrh	r3, [r7, #26]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d16b      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	330c      	adds	r3, #12
 80039f8:	7812      	ldrb	r2, [r2, #0]
 80039fa:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a00:	1c5a      	adds	r2, r3, #1
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	3b01      	subs	r3, #1
 8003a0e:	b29a      	uxth	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a14:	e057      	b.n	8003ac6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f003 0302 	and.w	r3, r3, #2
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d11c      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x26c>
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a28:	b29b      	uxth	r3, r3
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d017      	beq.n	8003a5e <HAL_SPI_TransmitReceive+0x26c>
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d114      	bne.n	8003a5e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	330c      	adds	r3, #12
 8003a3e:	7812      	ldrb	r2, [r2, #0]
 8003a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a46:	1c5a      	adds	r2, r3, #1
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	3b01      	subs	r3, #1
 8003a54:	b29a      	uxth	r2, r3
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 0301 	and.w	r3, r3, #1
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d119      	bne.n	8003aa0 <HAL_SPI_TransmitReceive+0x2ae>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	b29b      	uxth	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d014      	beq.n	8003aa0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68da      	ldr	r2, [r3, #12]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a80:	b2d2      	uxtb	r2, r2
 8003a82:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	1c5a      	adds	r2, r3, #1
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	3b01      	subs	r3, #1
 8003a96:	b29a      	uxth	r2, r3
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003aa0:	f7fe fa24 	bl	8001eec <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003aac:	429a      	cmp	r2, r3
 8003aae:	d803      	bhi.n	8003ab8 <HAL_SPI_TransmitReceive+0x2c6>
 8003ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ab2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ab6:	d102      	bne.n	8003abe <HAL_SPI_TransmitReceive+0x2cc>
 8003ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d103      	bne.n	8003ac6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003abe:	2303      	movs	r3, #3
 8003ac0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ac4:	e029      	b.n	8003b1a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1a2      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x224>
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ad4:	b29b      	uxth	r3, r3
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d19d      	bne.n	8003a16 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ada:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003adc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 f8b2 	bl	8003c48 <SPI_EndRxTxTransaction>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d006      	beq.n	8003af8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003aea:	2301      	movs	r3, #1
 8003aec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2220      	movs	r2, #32
 8003af4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003af6:	e010      	b.n	8003b1a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10b      	bne.n	8003b18 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	68db      	ldr	r3, [r3, #12]
 8003b0a:	617b      	str	r3, [r7, #20]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	617b      	str	r3, [r7, #20]
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	e000      	b.n	8003b1a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003b18:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003b2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3730      	adds	r7, #48	; 0x30
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
	...

08003b38 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	60f8      	str	r0, [r7, #12]
 8003b40:	60b9      	str	r1, [r7, #8]
 8003b42:	603b      	str	r3, [r7, #0]
 8003b44:	4613      	mov	r3, r2
 8003b46:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b48:	f7fe f9d0 	bl	8001eec <HAL_GetTick>
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	4413      	add	r3, r2
 8003b56:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b58:	f7fe f9c8 	bl	8001eec <HAL_GetTick>
 8003b5c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b5e:	4b39      	ldr	r3, [pc, #228]	; (8003c44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	015b      	lsls	r3, r3, #5
 8003b64:	0d1b      	lsrs	r3, r3, #20
 8003b66:	69fa      	ldr	r2, [r7, #28]
 8003b68:	fb02 f303 	mul.w	r3, r2, r3
 8003b6c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b6e:	e054      	b.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b76:	d050      	beq.n	8003c1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b78:	f7fe f9b8 	bl	8001eec <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	69fa      	ldr	r2, [r7, #28]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d902      	bls.n	8003b8e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d13d      	bne.n	8003c0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b9c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685b      	ldr	r3, [r3, #4]
 8003ba2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ba6:	d111      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bb0:	d004      	beq.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bba:	d107      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bd4:	d10f      	bne.n	8003bf6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003be4:	601a      	str	r2, [r3, #0]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bf4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e017      	b.n	8003c3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d101      	bne.n	8003c14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003c14:	697b      	ldr	r3, [r7, #20]
 8003c16:	3b01      	subs	r3, #1
 8003c18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d19b      	bne.n	8003b70 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3720      	adds	r7, #32
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	20000004 	.word	0x20000004

08003c48 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af02      	add	r7, sp, #8
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c54:	4b1b      	ldr	r3, [pc, #108]	; (8003cc4 <SPI_EndRxTxTransaction+0x7c>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4a1b      	ldr	r2, [pc, #108]	; (8003cc8 <SPI_EndRxTxTransaction+0x80>)
 8003c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8003c5e:	0d5b      	lsrs	r3, r3, #21
 8003c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c64:	fb02 f303 	mul.w	r3, r2, r3
 8003c68:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c72:	d112      	bne.n	8003c9a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2180      	movs	r1, #128	; 0x80
 8003c7e:	68f8      	ldr	r0, [r7, #12]
 8003c80:	f7ff ff5a 	bl	8003b38 <SPI_WaitFlagStateUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c8e:	f043 0220 	orr.w	r2, r3, #32
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e00f      	b.n	8003cba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb0:	2b80      	cmp	r3, #128	; 0x80
 8003cb2:	d0f2      	beq.n	8003c9a <SPI_EndRxTxTransaction+0x52>
 8003cb4:	e000      	b.n	8003cb8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003cb6:	bf00      	nop
  }

  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3718      	adds	r7, #24
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	20000004 	.word	0x20000004
 8003cc8:	165e9f81 	.word	0x165e9f81

08003ccc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e03f      	b.n	8003d5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d106      	bne.n	8003cf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2200      	movs	r2, #0
 8003cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fd ff20 	bl	8001b38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2224      	movs	r2, #36	; 0x24
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68da      	ldr	r2, [r3, #12]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f000 f929 	bl	8003f68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	691a      	ldr	r2, [r3, #16]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	695a      	ldr	r2, [r3, #20]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68da      	ldr	r2, [r3, #12]
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2220      	movs	r2, #32
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d5c:	2300      	movs	r3, #0
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}

08003d66 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d66:	b580      	push	{r7, lr}
 8003d68:	b08a      	sub	sp, #40	; 0x28
 8003d6a:	af02      	add	r7, sp, #8
 8003d6c:	60f8      	str	r0, [r7, #12]
 8003d6e:	60b9      	str	r1, [r7, #8]
 8003d70:	603b      	str	r3, [r7, #0]
 8003d72:	4613      	mov	r3, r2
 8003d74:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003d76:	2300      	movs	r3, #0
 8003d78:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	2b20      	cmp	r3, #32
 8003d84:	d17c      	bne.n	8003e80 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d002      	beq.n	8003d92 <HAL_UART_Transmit+0x2c>
 8003d8c:	88fb      	ldrh	r3, [r7, #6]
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d101      	bne.n	8003d96 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	e075      	b.n	8003e82 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d101      	bne.n	8003da4 <HAL_UART_Transmit+0x3e>
 8003da0:	2302      	movs	r3, #2
 8003da2:	e06e      	b.n	8003e82 <HAL_UART_Transmit+0x11c>
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2221      	movs	r2, #33	; 0x21
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dba:	f7fe f897 	bl	8001eec <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	88fa      	ldrh	r2, [r7, #6]
 8003dca:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	689b      	ldr	r3, [r3, #8]
 8003dd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd4:	d108      	bne.n	8003de8 <HAL_UART_Transmit+0x82>
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	691b      	ldr	r3, [r3, #16]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d104      	bne.n	8003de8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003dde:	2300      	movs	r3, #0
 8003de0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003de2:	68bb      	ldr	r3, [r7, #8]
 8003de4:	61bb      	str	r3, [r7, #24]
 8003de6:	e003      	b.n	8003df0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dec:	2300      	movs	r3, #0
 8003dee:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003df8:	e02a      	b.n	8003e50 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	2200      	movs	r2, #0
 8003e02:	2180      	movs	r1, #128	; 0x80
 8003e04:	68f8      	ldr	r0, [r7, #12]
 8003e06:	f000 f840 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d001      	beq.n	8003e14 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e10:	2303      	movs	r3, #3
 8003e12:	e036      	b.n	8003e82 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	881b      	ldrh	r3, [r3, #0]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e28:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	3302      	adds	r3, #2
 8003e2e:	61bb      	str	r3, [r7, #24]
 8003e30:	e007      	b.n	8003e42 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e32:	69fb      	ldr	r3, [r7, #28]
 8003e34:	781a      	ldrb	r2, [r3, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	3301      	adds	r3, #1
 8003e40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e46:	b29b      	uxth	r3, r3
 8003e48:	3b01      	subs	r3, #1
 8003e4a:	b29a      	uxth	r2, r3
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d1cf      	bne.n	8003dfa <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2140      	movs	r1, #64	; 0x40
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 f810 	bl	8003e8a <UART_WaitOnFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003e70:	2303      	movs	r3, #3
 8003e72:	e006      	b.n	8003e82 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	2220      	movs	r2, #32
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b090      	sub	sp, #64	; 0x40
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e9a:	e050      	b.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ea2:	d04c      	beq.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ea4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <UART_WaitOnFlagUntilTimeout+0x30>
 8003eaa:	f7fe f81f 	bl	8001eec <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	d241      	bcs.n	8003f3e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	330c      	adds	r3, #12
 8003ec0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	e853 3f00 	ldrex	r3, [r3]
 8003ec8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ecc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	330c      	adds	r3, #12
 8003ed8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003eda:	637a      	str	r2, [r7, #52]	; 0x34
 8003edc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ede:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee2:	e841 2300 	strex	r3, r2, [r1]
 8003ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1e5      	bne.n	8003eba <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	3314      	adds	r3, #20
 8003ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	e853 3f00 	ldrex	r3, [r3]
 8003efc:	613b      	str	r3, [r7, #16]
   return(result);
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	f023 0301 	bic.w	r3, r3, #1
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	3314      	adds	r3, #20
 8003f0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f0e:	623a      	str	r2, [r7, #32]
 8003f10:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f12:	69f9      	ldr	r1, [r7, #28]
 8003f14:	6a3a      	ldr	r2, [r7, #32]
 8003f16:	e841 2300 	strex	r3, r2, [r1]
 8003f1a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d1e5      	bne.n	8003eee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2220      	movs	r2, #32
 8003f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2220      	movs	r2, #32
 8003f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e00f      	b.n	8003f5e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	4013      	ands	r3, r2
 8003f48:	68ba      	ldr	r2, [r7, #8]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	bf0c      	ite	eq
 8003f4e:	2301      	moveq	r3, #1
 8003f50:	2300      	movne	r3, #0
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	461a      	mov	r2, r3
 8003f56:	79fb      	ldrb	r3, [r7, #7]
 8003f58:	429a      	cmp	r2, r3
 8003f5a:	d09f      	beq.n	8003e9c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f5c:	2300      	movs	r3, #0
}
 8003f5e:	4618      	mov	r0, r3
 8003f60:	3740      	adds	r7, #64	; 0x40
 8003f62:	46bd      	mov	sp, r7
 8003f64:	bd80      	pop	{r7, pc}
	...

08003f68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f6c:	b0c0      	sub	sp, #256	; 0x100
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	691b      	ldr	r3, [r3, #16]
 8003f7c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f84:	68d9      	ldr	r1, [r3, #12]
 8003f86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	ea40 0301 	orr.w	r3, r0, r1
 8003f90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	689a      	ldr	r2, [r3, #8]
 8003f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	431a      	orrs	r2, r3
 8003fa0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003fc0:	f021 010c 	bic.w	r1, r1, #12
 8003fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003fce:	430b      	orrs	r3, r1
 8003fd0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	695b      	ldr	r3, [r3, #20]
 8003fda:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe2:	6999      	ldr	r1, [r3, #24]
 8003fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe8:	681a      	ldr	r2, [r3, #0]
 8003fea:	ea40 0301 	orr.w	r3, r0, r1
 8003fee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4b8f      	ldr	r3, [pc, #572]	; (8004234 <UART_SetConfig+0x2cc>)
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d005      	beq.n	8004008 <UART_SetConfig+0xa0>
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4b8d      	ldr	r3, [pc, #564]	; (8004238 <UART_SetConfig+0x2d0>)
 8004004:	429a      	cmp	r2, r3
 8004006:	d104      	bne.n	8004012 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004008:	f7ff fb56 	bl	80036b8 <HAL_RCC_GetPCLK2Freq>
 800400c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004010:	e003      	b.n	800401a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004012:	f7ff fb3d 	bl	8003690 <HAL_RCC_GetPCLK1Freq>
 8004016:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800401a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800401e:	69db      	ldr	r3, [r3, #28]
 8004020:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004024:	f040 810c 	bne.w	8004240 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004028:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800402c:	2200      	movs	r2, #0
 800402e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004032:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004036:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	1891      	adds	r1, r2, r2
 8004040:	65b9      	str	r1, [r7, #88]	; 0x58
 8004042:	415b      	adcs	r3, r3
 8004044:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004046:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800404a:	4621      	mov	r1, r4
 800404c:	eb12 0801 	adds.w	r8, r2, r1
 8004050:	4629      	mov	r1, r5
 8004052:	eb43 0901 	adc.w	r9, r3, r1
 8004056:	f04f 0200 	mov.w	r2, #0
 800405a:	f04f 0300 	mov.w	r3, #0
 800405e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004062:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004066:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800406a:	4690      	mov	r8, r2
 800406c:	4699      	mov	r9, r3
 800406e:	4623      	mov	r3, r4
 8004070:	eb18 0303 	adds.w	r3, r8, r3
 8004074:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004078:	462b      	mov	r3, r5
 800407a:	eb49 0303 	adc.w	r3, r9, r3
 800407e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004082:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	2200      	movs	r2, #0
 800408a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800408e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004092:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004096:	460b      	mov	r3, r1
 8004098:	18db      	adds	r3, r3, r3
 800409a:	653b      	str	r3, [r7, #80]	; 0x50
 800409c:	4613      	mov	r3, r2
 800409e:	eb42 0303 	adc.w	r3, r2, r3
 80040a2:	657b      	str	r3, [r7, #84]	; 0x54
 80040a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80040a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80040ac:	f7fc fd8c 	bl	8000bc8 <__aeabi_uldivmod>
 80040b0:	4602      	mov	r2, r0
 80040b2:	460b      	mov	r3, r1
 80040b4:	4b61      	ldr	r3, [pc, #388]	; (800423c <UART_SetConfig+0x2d4>)
 80040b6:	fba3 2302 	umull	r2, r3, r3, r2
 80040ba:	095b      	lsrs	r3, r3, #5
 80040bc:	011c      	lsls	r4, r3, #4
 80040be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040c2:	2200      	movs	r2, #0
 80040c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80040cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	1891      	adds	r1, r2, r2
 80040d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80040d8:	415b      	adcs	r3, r3
 80040da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80040e0:	4641      	mov	r1, r8
 80040e2:	eb12 0a01 	adds.w	sl, r2, r1
 80040e6:	4649      	mov	r1, r9
 80040e8:	eb43 0b01 	adc.w	fp, r3, r1
 80040ec:	f04f 0200 	mov.w	r2, #0
 80040f0:	f04f 0300 	mov.w	r3, #0
 80040f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80040f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80040fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004100:	4692      	mov	sl, r2
 8004102:	469b      	mov	fp, r3
 8004104:	4643      	mov	r3, r8
 8004106:	eb1a 0303 	adds.w	r3, sl, r3
 800410a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800410e:	464b      	mov	r3, r9
 8004110:	eb4b 0303 	adc.w	r3, fp, r3
 8004114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004124:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004128:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800412c:	460b      	mov	r3, r1
 800412e:	18db      	adds	r3, r3, r3
 8004130:	643b      	str	r3, [r7, #64]	; 0x40
 8004132:	4613      	mov	r3, r2
 8004134:	eb42 0303 	adc.w	r3, r2, r3
 8004138:	647b      	str	r3, [r7, #68]	; 0x44
 800413a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800413e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004142:	f7fc fd41 	bl	8000bc8 <__aeabi_uldivmod>
 8004146:	4602      	mov	r2, r0
 8004148:	460b      	mov	r3, r1
 800414a:	4611      	mov	r1, r2
 800414c:	4b3b      	ldr	r3, [pc, #236]	; (800423c <UART_SetConfig+0x2d4>)
 800414e:	fba3 2301 	umull	r2, r3, r3, r1
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2264      	movs	r2, #100	; 0x64
 8004156:	fb02 f303 	mul.w	r3, r2, r3
 800415a:	1acb      	subs	r3, r1, r3
 800415c:	00db      	lsls	r3, r3, #3
 800415e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004162:	4b36      	ldr	r3, [pc, #216]	; (800423c <UART_SetConfig+0x2d4>)
 8004164:	fba3 2302 	umull	r2, r3, r3, r2
 8004168:	095b      	lsrs	r3, r3, #5
 800416a:	005b      	lsls	r3, r3, #1
 800416c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004170:	441c      	add	r4, r3
 8004172:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004176:	2200      	movs	r2, #0
 8004178:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800417c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004180:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004184:	4642      	mov	r2, r8
 8004186:	464b      	mov	r3, r9
 8004188:	1891      	adds	r1, r2, r2
 800418a:	63b9      	str	r1, [r7, #56]	; 0x38
 800418c:	415b      	adcs	r3, r3
 800418e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004190:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004194:	4641      	mov	r1, r8
 8004196:	1851      	adds	r1, r2, r1
 8004198:	6339      	str	r1, [r7, #48]	; 0x30
 800419a:	4649      	mov	r1, r9
 800419c:	414b      	adcs	r3, r1
 800419e:	637b      	str	r3, [r7, #52]	; 0x34
 80041a0:	f04f 0200 	mov.w	r2, #0
 80041a4:	f04f 0300 	mov.w	r3, #0
 80041a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80041ac:	4659      	mov	r1, fp
 80041ae:	00cb      	lsls	r3, r1, #3
 80041b0:	4651      	mov	r1, sl
 80041b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041b6:	4651      	mov	r1, sl
 80041b8:	00ca      	lsls	r2, r1, #3
 80041ba:	4610      	mov	r0, r2
 80041bc:	4619      	mov	r1, r3
 80041be:	4603      	mov	r3, r0
 80041c0:	4642      	mov	r2, r8
 80041c2:	189b      	adds	r3, r3, r2
 80041c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80041c8:	464b      	mov	r3, r9
 80041ca:	460a      	mov	r2, r1
 80041cc:	eb42 0303 	adc.w	r3, r2, r3
 80041d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	685b      	ldr	r3, [r3, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80041e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80041e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80041e8:	460b      	mov	r3, r1
 80041ea:	18db      	adds	r3, r3, r3
 80041ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80041ee:	4613      	mov	r3, r2
 80041f0:	eb42 0303 	adc.w	r3, r2, r3
 80041f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80041fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80041fe:	f7fc fce3 	bl	8000bc8 <__aeabi_uldivmod>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4b0d      	ldr	r3, [pc, #52]	; (800423c <UART_SetConfig+0x2d4>)
 8004208:	fba3 1302 	umull	r1, r3, r3, r2
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	2164      	movs	r1, #100	; 0x64
 8004210:	fb01 f303 	mul.w	r3, r1, r3
 8004214:	1ad3      	subs	r3, r2, r3
 8004216:	00db      	lsls	r3, r3, #3
 8004218:	3332      	adds	r3, #50	; 0x32
 800421a:	4a08      	ldr	r2, [pc, #32]	; (800423c <UART_SetConfig+0x2d4>)
 800421c:	fba2 2303 	umull	r2, r3, r2, r3
 8004220:	095b      	lsrs	r3, r3, #5
 8004222:	f003 0207 	and.w	r2, r3, #7
 8004226:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4422      	add	r2, r4
 800422e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004230:	e105      	b.n	800443e <UART_SetConfig+0x4d6>
 8004232:	bf00      	nop
 8004234:	40011000 	.word	0x40011000
 8004238:	40011400 	.word	0x40011400
 800423c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004240:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004244:	2200      	movs	r2, #0
 8004246:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800424a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800424e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004252:	4642      	mov	r2, r8
 8004254:	464b      	mov	r3, r9
 8004256:	1891      	adds	r1, r2, r2
 8004258:	6239      	str	r1, [r7, #32]
 800425a:	415b      	adcs	r3, r3
 800425c:	627b      	str	r3, [r7, #36]	; 0x24
 800425e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004262:	4641      	mov	r1, r8
 8004264:	1854      	adds	r4, r2, r1
 8004266:	4649      	mov	r1, r9
 8004268:	eb43 0501 	adc.w	r5, r3, r1
 800426c:	f04f 0200 	mov.w	r2, #0
 8004270:	f04f 0300 	mov.w	r3, #0
 8004274:	00eb      	lsls	r3, r5, #3
 8004276:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800427a:	00e2      	lsls	r2, r4, #3
 800427c:	4614      	mov	r4, r2
 800427e:	461d      	mov	r5, r3
 8004280:	4643      	mov	r3, r8
 8004282:	18e3      	adds	r3, r4, r3
 8004284:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004288:	464b      	mov	r3, r9
 800428a:	eb45 0303 	adc.w	r3, r5, r3
 800428e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004292:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800429e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	f04f 0300 	mov.w	r3, #0
 80042aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80042ae:	4629      	mov	r1, r5
 80042b0:	008b      	lsls	r3, r1, #2
 80042b2:	4621      	mov	r1, r4
 80042b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042b8:	4621      	mov	r1, r4
 80042ba:	008a      	lsls	r2, r1, #2
 80042bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80042c0:	f7fc fc82 	bl	8000bc8 <__aeabi_uldivmod>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4b60      	ldr	r3, [pc, #384]	; (800444c <UART_SetConfig+0x4e4>)
 80042ca:	fba3 2302 	umull	r2, r3, r3, r2
 80042ce:	095b      	lsrs	r3, r3, #5
 80042d0:	011c      	lsls	r4, r3, #4
 80042d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80042dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80042e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80042e4:	4642      	mov	r2, r8
 80042e6:	464b      	mov	r3, r9
 80042e8:	1891      	adds	r1, r2, r2
 80042ea:	61b9      	str	r1, [r7, #24]
 80042ec:	415b      	adcs	r3, r3
 80042ee:	61fb      	str	r3, [r7, #28]
 80042f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80042f4:	4641      	mov	r1, r8
 80042f6:	1851      	adds	r1, r2, r1
 80042f8:	6139      	str	r1, [r7, #16]
 80042fa:	4649      	mov	r1, r9
 80042fc:	414b      	adcs	r3, r1
 80042fe:	617b      	str	r3, [r7, #20]
 8004300:	f04f 0200 	mov.w	r2, #0
 8004304:	f04f 0300 	mov.w	r3, #0
 8004308:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800430c:	4659      	mov	r1, fp
 800430e:	00cb      	lsls	r3, r1, #3
 8004310:	4651      	mov	r1, sl
 8004312:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004316:	4651      	mov	r1, sl
 8004318:	00ca      	lsls	r2, r1, #3
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	4603      	mov	r3, r0
 8004320:	4642      	mov	r2, r8
 8004322:	189b      	adds	r3, r3, r2
 8004324:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004328:	464b      	mov	r3, r9
 800432a:	460a      	mov	r2, r1
 800432c:	eb42 0303 	adc.w	r3, r2, r3
 8004330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	67bb      	str	r3, [r7, #120]	; 0x78
 800433e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800434c:	4649      	mov	r1, r9
 800434e:	008b      	lsls	r3, r1, #2
 8004350:	4641      	mov	r1, r8
 8004352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004356:	4641      	mov	r1, r8
 8004358:	008a      	lsls	r2, r1, #2
 800435a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800435e:	f7fc fc33 	bl	8000bc8 <__aeabi_uldivmod>
 8004362:	4602      	mov	r2, r0
 8004364:	460b      	mov	r3, r1
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <UART_SetConfig+0x4e4>)
 8004368:	fba3 1302 	umull	r1, r3, r3, r2
 800436c:	095b      	lsrs	r3, r3, #5
 800436e:	2164      	movs	r1, #100	; 0x64
 8004370:	fb01 f303 	mul.w	r3, r1, r3
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	011b      	lsls	r3, r3, #4
 8004378:	3332      	adds	r3, #50	; 0x32
 800437a:	4a34      	ldr	r2, [pc, #208]	; (800444c <UART_SetConfig+0x4e4>)
 800437c:	fba2 2303 	umull	r2, r3, r2, r3
 8004380:	095b      	lsrs	r3, r3, #5
 8004382:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004386:	441c      	add	r4, r3
 8004388:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800438c:	2200      	movs	r2, #0
 800438e:	673b      	str	r3, [r7, #112]	; 0x70
 8004390:	677a      	str	r2, [r7, #116]	; 0x74
 8004392:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004396:	4642      	mov	r2, r8
 8004398:	464b      	mov	r3, r9
 800439a:	1891      	adds	r1, r2, r2
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	415b      	adcs	r3, r3
 80043a0:	60fb      	str	r3, [r7, #12]
 80043a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80043a6:	4641      	mov	r1, r8
 80043a8:	1851      	adds	r1, r2, r1
 80043aa:	6039      	str	r1, [r7, #0]
 80043ac:	4649      	mov	r1, r9
 80043ae:	414b      	adcs	r3, r1
 80043b0:	607b      	str	r3, [r7, #4]
 80043b2:	f04f 0200 	mov.w	r2, #0
 80043b6:	f04f 0300 	mov.w	r3, #0
 80043ba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80043be:	4659      	mov	r1, fp
 80043c0:	00cb      	lsls	r3, r1, #3
 80043c2:	4651      	mov	r1, sl
 80043c4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043c8:	4651      	mov	r1, sl
 80043ca:	00ca      	lsls	r2, r1, #3
 80043cc:	4610      	mov	r0, r2
 80043ce:	4619      	mov	r1, r3
 80043d0:	4603      	mov	r3, r0
 80043d2:	4642      	mov	r2, r8
 80043d4:	189b      	adds	r3, r3, r2
 80043d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043d8:	464b      	mov	r3, r9
 80043da:	460a      	mov	r2, r1
 80043dc:	eb42 0303 	adc.w	r3, r2, r3
 80043e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80043e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043e6:	685b      	ldr	r3, [r3, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	663b      	str	r3, [r7, #96]	; 0x60
 80043ec:	667a      	str	r2, [r7, #100]	; 0x64
 80043ee:	f04f 0200 	mov.w	r2, #0
 80043f2:	f04f 0300 	mov.w	r3, #0
 80043f6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80043fa:	4649      	mov	r1, r9
 80043fc:	008b      	lsls	r3, r1, #2
 80043fe:	4641      	mov	r1, r8
 8004400:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004404:	4641      	mov	r1, r8
 8004406:	008a      	lsls	r2, r1, #2
 8004408:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800440c:	f7fc fbdc 	bl	8000bc8 <__aeabi_uldivmod>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4b0d      	ldr	r3, [pc, #52]	; (800444c <UART_SetConfig+0x4e4>)
 8004416:	fba3 1302 	umull	r1, r3, r3, r2
 800441a:	095b      	lsrs	r3, r3, #5
 800441c:	2164      	movs	r1, #100	; 0x64
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	3332      	adds	r3, #50	; 0x32
 8004428:	4a08      	ldr	r2, [pc, #32]	; (800444c <UART_SetConfig+0x4e4>)
 800442a:	fba2 2303 	umull	r2, r3, r2, r3
 800442e:	095b      	lsrs	r3, r3, #5
 8004430:	f003 020f 	and.w	r2, r3, #15
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	4422      	add	r2, r4
 800443c:	609a      	str	r2, [r3, #8]
}
 800443e:	bf00      	nop
 8004440:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004444:	46bd      	mov	sp, r7
 8004446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444a:	bf00      	nop
 800444c:	51eb851f 	.word	0x51eb851f

08004450 <__errno>:
 8004450:	4b01      	ldr	r3, [pc, #4]	; (8004458 <__errno+0x8>)
 8004452:	6818      	ldr	r0, [r3, #0]
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	20000010 	.word	0x20000010

0800445c <__libc_init_array>:
 800445c:	b570      	push	{r4, r5, r6, lr}
 800445e:	4d0d      	ldr	r5, [pc, #52]	; (8004494 <__libc_init_array+0x38>)
 8004460:	4c0d      	ldr	r4, [pc, #52]	; (8004498 <__libc_init_array+0x3c>)
 8004462:	1b64      	subs	r4, r4, r5
 8004464:	10a4      	asrs	r4, r4, #2
 8004466:	2600      	movs	r6, #0
 8004468:	42a6      	cmp	r6, r4
 800446a:	d109      	bne.n	8004480 <__libc_init_array+0x24>
 800446c:	4d0b      	ldr	r5, [pc, #44]	; (800449c <__libc_init_array+0x40>)
 800446e:	4c0c      	ldr	r4, [pc, #48]	; (80044a0 <__libc_init_array+0x44>)
 8004470:	f002 ff92 	bl	8007398 <_init>
 8004474:	1b64      	subs	r4, r4, r5
 8004476:	10a4      	asrs	r4, r4, #2
 8004478:	2600      	movs	r6, #0
 800447a:	42a6      	cmp	r6, r4
 800447c:	d105      	bne.n	800448a <__libc_init_array+0x2e>
 800447e:	bd70      	pop	{r4, r5, r6, pc}
 8004480:	f855 3b04 	ldr.w	r3, [r5], #4
 8004484:	4798      	blx	r3
 8004486:	3601      	adds	r6, #1
 8004488:	e7ee      	b.n	8004468 <__libc_init_array+0xc>
 800448a:	f855 3b04 	ldr.w	r3, [r5], #4
 800448e:	4798      	blx	r3
 8004490:	3601      	adds	r6, #1
 8004492:	e7f2      	b.n	800447a <__libc_init_array+0x1e>
 8004494:	08007824 	.word	0x08007824
 8004498:	08007824 	.word	0x08007824
 800449c:	08007824 	.word	0x08007824
 80044a0:	08007828 	.word	0x08007828

080044a4 <memset>:
 80044a4:	4402      	add	r2, r0
 80044a6:	4603      	mov	r3, r0
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d100      	bne.n	80044ae <memset+0xa>
 80044ac:	4770      	bx	lr
 80044ae:	f803 1b01 	strb.w	r1, [r3], #1
 80044b2:	e7f9      	b.n	80044a8 <memset+0x4>

080044b4 <__cvt>:
 80044b4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80044b8:	ec55 4b10 	vmov	r4, r5, d0
 80044bc:	2d00      	cmp	r5, #0
 80044be:	460e      	mov	r6, r1
 80044c0:	4619      	mov	r1, r3
 80044c2:	462b      	mov	r3, r5
 80044c4:	bfbb      	ittet	lt
 80044c6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80044ca:	461d      	movlt	r5, r3
 80044cc:	2300      	movge	r3, #0
 80044ce:	232d      	movlt	r3, #45	; 0x2d
 80044d0:	700b      	strb	r3, [r1, #0]
 80044d2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80044d4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80044d8:	4691      	mov	r9, r2
 80044da:	f023 0820 	bic.w	r8, r3, #32
 80044de:	bfbc      	itt	lt
 80044e0:	4622      	movlt	r2, r4
 80044e2:	4614      	movlt	r4, r2
 80044e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80044e8:	d005      	beq.n	80044f6 <__cvt+0x42>
 80044ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80044ee:	d100      	bne.n	80044f2 <__cvt+0x3e>
 80044f0:	3601      	adds	r6, #1
 80044f2:	2102      	movs	r1, #2
 80044f4:	e000      	b.n	80044f8 <__cvt+0x44>
 80044f6:	2103      	movs	r1, #3
 80044f8:	ab03      	add	r3, sp, #12
 80044fa:	9301      	str	r3, [sp, #4]
 80044fc:	ab02      	add	r3, sp, #8
 80044fe:	9300      	str	r3, [sp, #0]
 8004500:	ec45 4b10 	vmov	d0, r4, r5
 8004504:	4653      	mov	r3, sl
 8004506:	4632      	mov	r2, r6
 8004508:	f000 fe3a 	bl	8005180 <_dtoa_r>
 800450c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004510:	4607      	mov	r7, r0
 8004512:	d102      	bne.n	800451a <__cvt+0x66>
 8004514:	f019 0f01 	tst.w	r9, #1
 8004518:	d022      	beq.n	8004560 <__cvt+0xac>
 800451a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800451e:	eb07 0906 	add.w	r9, r7, r6
 8004522:	d110      	bne.n	8004546 <__cvt+0x92>
 8004524:	783b      	ldrb	r3, [r7, #0]
 8004526:	2b30      	cmp	r3, #48	; 0x30
 8004528:	d10a      	bne.n	8004540 <__cvt+0x8c>
 800452a:	2200      	movs	r2, #0
 800452c:	2300      	movs	r3, #0
 800452e:	4620      	mov	r0, r4
 8004530:	4629      	mov	r1, r5
 8004532:	f7fc fad9 	bl	8000ae8 <__aeabi_dcmpeq>
 8004536:	b918      	cbnz	r0, 8004540 <__cvt+0x8c>
 8004538:	f1c6 0601 	rsb	r6, r6, #1
 800453c:	f8ca 6000 	str.w	r6, [sl]
 8004540:	f8da 3000 	ldr.w	r3, [sl]
 8004544:	4499      	add	r9, r3
 8004546:	2200      	movs	r2, #0
 8004548:	2300      	movs	r3, #0
 800454a:	4620      	mov	r0, r4
 800454c:	4629      	mov	r1, r5
 800454e:	f7fc facb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004552:	b108      	cbz	r0, 8004558 <__cvt+0xa4>
 8004554:	f8cd 900c 	str.w	r9, [sp, #12]
 8004558:	2230      	movs	r2, #48	; 0x30
 800455a:	9b03      	ldr	r3, [sp, #12]
 800455c:	454b      	cmp	r3, r9
 800455e:	d307      	bcc.n	8004570 <__cvt+0xbc>
 8004560:	9b03      	ldr	r3, [sp, #12]
 8004562:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004564:	1bdb      	subs	r3, r3, r7
 8004566:	4638      	mov	r0, r7
 8004568:	6013      	str	r3, [r2, #0]
 800456a:	b004      	add	sp, #16
 800456c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004570:	1c59      	adds	r1, r3, #1
 8004572:	9103      	str	r1, [sp, #12]
 8004574:	701a      	strb	r2, [r3, #0]
 8004576:	e7f0      	b.n	800455a <__cvt+0xa6>

08004578 <__exponent>:
 8004578:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800457a:	4603      	mov	r3, r0
 800457c:	2900      	cmp	r1, #0
 800457e:	bfb8      	it	lt
 8004580:	4249      	neglt	r1, r1
 8004582:	f803 2b02 	strb.w	r2, [r3], #2
 8004586:	bfb4      	ite	lt
 8004588:	222d      	movlt	r2, #45	; 0x2d
 800458a:	222b      	movge	r2, #43	; 0x2b
 800458c:	2909      	cmp	r1, #9
 800458e:	7042      	strb	r2, [r0, #1]
 8004590:	dd2a      	ble.n	80045e8 <__exponent+0x70>
 8004592:	f10d 0407 	add.w	r4, sp, #7
 8004596:	46a4      	mov	ip, r4
 8004598:	270a      	movs	r7, #10
 800459a:	46a6      	mov	lr, r4
 800459c:	460a      	mov	r2, r1
 800459e:	fb91 f6f7 	sdiv	r6, r1, r7
 80045a2:	fb07 1516 	mls	r5, r7, r6, r1
 80045a6:	3530      	adds	r5, #48	; 0x30
 80045a8:	2a63      	cmp	r2, #99	; 0x63
 80045aa:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80045ae:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80045b2:	4631      	mov	r1, r6
 80045b4:	dcf1      	bgt.n	800459a <__exponent+0x22>
 80045b6:	3130      	adds	r1, #48	; 0x30
 80045b8:	f1ae 0502 	sub.w	r5, lr, #2
 80045bc:	f804 1c01 	strb.w	r1, [r4, #-1]
 80045c0:	1c44      	adds	r4, r0, #1
 80045c2:	4629      	mov	r1, r5
 80045c4:	4561      	cmp	r1, ip
 80045c6:	d30a      	bcc.n	80045de <__exponent+0x66>
 80045c8:	f10d 0209 	add.w	r2, sp, #9
 80045cc:	eba2 020e 	sub.w	r2, r2, lr
 80045d0:	4565      	cmp	r5, ip
 80045d2:	bf88      	it	hi
 80045d4:	2200      	movhi	r2, #0
 80045d6:	4413      	add	r3, r2
 80045d8:	1a18      	subs	r0, r3, r0
 80045da:	b003      	add	sp, #12
 80045dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045e2:	f804 2f01 	strb.w	r2, [r4, #1]!
 80045e6:	e7ed      	b.n	80045c4 <__exponent+0x4c>
 80045e8:	2330      	movs	r3, #48	; 0x30
 80045ea:	3130      	adds	r1, #48	; 0x30
 80045ec:	7083      	strb	r3, [r0, #2]
 80045ee:	70c1      	strb	r1, [r0, #3]
 80045f0:	1d03      	adds	r3, r0, #4
 80045f2:	e7f1      	b.n	80045d8 <__exponent+0x60>

080045f4 <_printf_float>:
 80045f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045f8:	ed2d 8b02 	vpush	{d8}
 80045fc:	b08d      	sub	sp, #52	; 0x34
 80045fe:	460c      	mov	r4, r1
 8004600:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004604:	4616      	mov	r6, r2
 8004606:	461f      	mov	r7, r3
 8004608:	4605      	mov	r5, r0
 800460a:	f001 fd5f 	bl	80060cc <_localeconv_r>
 800460e:	f8d0 a000 	ldr.w	sl, [r0]
 8004612:	4650      	mov	r0, sl
 8004614:	f7fb fdec 	bl	80001f0 <strlen>
 8004618:	2300      	movs	r3, #0
 800461a:	930a      	str	r3, [sp, #40]	; 0x28
 800461c:	6823      	ldr	r3, [r4, #0]
 800461e:	9305      	str	r3, [sp, #20]
 8004620:	f8d8 3000 	ldr.w	r3, [r8]
 8004624:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004628:	3307      	adds	r3, #7
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	f103 0208 	add.w	r2, r3, #8
 8004632:	f8c8 2000 	str.w	r2, [r8]
 8004636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800463e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8004642:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004646:	9307      	str	r3, [sp, #28]
 8004648:	f8cd 8018 	str.w	r8, [sp, #24]
 800464c:	ee08 0a10 	vmov	s16, r0
 8004650:	4b9f      	ldr	r3, [pc, #636]	; (80048d0 <_printf_float+0x2dc>)
 8004652:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004656:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800465a:	f7fc fa77 	bl	8000b4c <__aeabi_dcmpun>
 800465e:	bb88      	cbnz	r0, 80046c4 <_printf_float+0xd0>
 8004660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004664:	4b9a      	ldr	r3, [pc, #616]	; (80048d0 <_printf_float+0x2dc>)
 8004666:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800466a:	f7fc fa51 	bl	8000b10 <__aeabi_dcmple>
 800466e:	bb48      	cbnz	r0, 80046c4 <_printf_float+0xd0>
 8004670:	2200      	movs	r2, #0
 8004672:	2300      	movs	r3, #0
 8004674:	4640      	mov	r0, r8
 8004676:	4649      	mov	r1, r9
 8004678:	f7fc fa40 	bl	8000afc <__aeabi_dcmplt>
 800467c:	b110      	cbz	r0, 8004684 <_printf_float+0x90>
 800467e:	232d      	movs	r3, #45	; 0x2d
 8004680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004684:	4b93      	ldr	r3, [pc, #588]	; (80048d4 <_printf_float+0x2e0>)
 8004686:	4894      	ldr	r0, [pc, #592]	; (80048d8 <_printf_float+0x2e4>)
 8004688:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800468c:	bf94      	ite	ls
 800468e:	4698      	movls	r8, r3
 8004690:	4680      	movhi	r8, r0
 8004692:	2303      	movs	r3, #3
 8004694:	6123      	str	r3, [r4, #16]
 8004696:	9b05      	ldr	r3, [sp, #20]
 8004698:	f023 0204 	bic.w	r2, r3, #4
 800469c:	6022      	str	r2, [r4, #0]
 800469e:	f04f 0900 	mov.w	r9, #0
 80046a2:	9700      	str	r7, [sp, #0]
 80046a4:	4633      	mov	r3, r6
 80046a6:	aa0b      	add	r2, sp, #44	; 0x2c
 80046a8:	4621      	mov	r1, r4
 80046aa:	4628      	mov	r0, r5
 80046ac:	f000 f9d8 	bl	8004a60 <_printf_common>
 80046b0:	3001      	adds	r0, #1
 80046b2:	f040 8090 	bne.w	80047d6 <_printf_float+0x1e2>
 80046b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80046ba:	b00d      	add	sp, #52	; 0x34
 80046bc:	ecbd 8b02 	vpop	{d8}
 80046c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046c4:	4642      	mov	r2, r8
 80046c6:	464b      	mov	r3, r9
 80046c8:	4640      	mov	r0, r8
 80046ca:	4649      	mov	r1, r9
 80046cc:	f7fc fa3e 	bl	8000b4c <__aeabi_dcmpun>
 80046d0:	b140      	cbz	r0, 80046e4 <_printf_float+0xf0>
 80046d2:	464b      	mov	r3, r9
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	bfbc      	itt	lt
 80046d8:	232d      	movlt	r3, #45	; 0x2d
 80046da:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80046de:	487f      	ldr	r0, [pc, #508]	; (80048dc <_printf_float+0x2e8>)
 80046e0:	4b7f      	ldr	r3, [pc, #508]	; (80048e0 <_printf_float+0x2ec>)
 80046e2:	e7d1      	b.n	8004688 <_printf_float+0x94>
 80046e4:	6863      	ldr	r3, [r4, #4]
 80046e6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80046ea:	9206      	str	r2, [sp, #24]
 80046ec:	1c5a      	adds	r2, r3, #1
 80046ee:	d13f      	bne.n	8004770 <_printf_float+0x17c>
 80046f0:	2306      	movs	r3, #6
 80046f2:	6063      	str	r3, [r4, #4]
 80046f4:	9b05      	ldr	r3, [sp, #20]
 80046f6:	6861      	ldr	r1, [r4, #4]
 80046f8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80046fc:	2300      	movs	r3, #0
 80046fe:	9303      	str	r3, [sp, #12]
 8004700:	ab0a      	add	r3, sp, #40	; 0x28
 8004702:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004706:	ab09      	add	r3, sp, #36	; 0x24
 8004708:	ec49 8b10 	vmov	d0, r8, r9
 800470c:	9300      	str	r3, [sp, #0]
 800470e:	6022      	str	r2, [r4, #0]
 8004710:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004714:	4628      	mov	r0, r5
 8004716:	f7ff fecd 	bl	80044b4 <__cvt>
 800471a:	9b06      	ldr	r3, [sp, #24]
 800471c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800471e:	2b47      	cmp	r3, #71	; 0x47
 8004720:	4680      	mov	r8, r0
 8004722:	d108      	bne.n	8004736 <_printf_float+0x142>
 8004724:	1cc8      	adds	r0, r1, #3
 8004726:	db02      	blt.n	800472e <_printf_float+0x13a>
 8004728:	6863      	ldr	r3, [r4, #4]
 800472a:	4299      	cmp	r1, r3
 800472c:	dd41      	ble.n	80047b2 <_printf_float+0x1be>
 800472e:	f1ab 0b02 	sub.w	fp, fp, #2
 8004732:	fa5f fb8b 	uxtb.w	fp, fp
 8004736:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800473a:	d820      	bhi.n	800477e <_printf_float+0x18a>
 800473c:	3901      	subs	r1, #1
 800473e:	465a      	mov	r2, fp
 8004740:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004744:	9109      	str	r1, [sp, #36]	; 0x24
 8004746:	f7ff ff17 	bl	8004578 <__exponent>
 800474a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800474c:	1813      	adds	r3, r2, r0
 800474e:	2a01      	cmp	r2, #1
 8004750:	4681      	mov	r9, r0
 8004752:	6123      	str	r3, [r4, #16]
 8004754:	dc02      	bgt.n	800475c <_printf_float+0x168>
 8004756:	6822      	ldr	r2, [r4, #0]
 8004758:	07d2      	lsls	r2, r2, #31
 800475a:	d501      	bpl.n	8004760 <_printf_float+0x16c>
 800475c:	3301      	adds	r3, #1
 800475e:	6123      	str	r3, [r4, #16]
 8004760:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004764:	2b00      	cmp	r3, #0
 8004766:	d09c      	beq.n	80046a2 <_printf_float+0xae>
 8004768:	232d      	movs	r3, #45	; 0x2d
 800476a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800476e:	e798      	b.n	80046a2 <_printf_float+0xae>
 8004770:	9a06      	ldr	r2, [sp, #24]
 8004772:	2a47      	cmp	r2, #71	; 0x47
 8004774:	d1be      	bne.n	80046f4 <_printf_float+0x100>
 8004776:	2b00      	cmp	r3, #0
 8004778:	d1bc      	bne.n	80046f4 <_printf_float+0x100>
 800477a:	2301      	movs	r3, #1
 800477c:	e7b9      	b.n	80046f2 <_printf_float+0xfe>
 800477e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004782:	d118      	bne.n	80047b6 <_printf_float+0x1c2>
 8004784:	2900      	cmp	r1, #0
 8004786:	6863      	ldr	r3, [r4, #4]
 8004788:	dd0b      	ble.n	80047a2 <_printf_float+0x1ae>
 800478a:	6121      	str	r1, [r4, #16]
 800478c:	b913      	cbnz	r3, 8004794 <_printf_float+0x1a0>
 800478e:	6822      	ldr	r2, [r4, #0]
 8004790:	07d0      	lsls	r0, r2, #31
 8004792:	d502      	bpl.n	800479a <_printf_float+0x1a6>
 8004794:	3301      	adds	r3, #1
 8004796:	440b      	add	r3, r1
 8004798:	6123      	str	r3, [r4, #16]
 800479a:	65a1      	str	r1, [r4, #88]	; 0x58
 800479c:	f04f 0900 	mov.w	r9, #0
 80047a0:	e7de      	b.n	8004760 <_printf_float+0x16c>
 80047a2:	b913      	cbnz	r3, 80047aa <_printf_float+0x1b6>
 80047a4:	6822      	ldr	r2, [r4, #0]
 80047a6:	07d2      	lsls	r2, r2, #31
 80047a8:	d501      	bpl.n	80047ae <_printf_float+0x1ba>
 80047aa:	3302      	adds	r3, #2
 80047ac:	e7f4      	b.n	8004798 <_printf_float+0x1a4>
 80047ae:	2301      	movs	r3, #1
 80047b0:	e7f2      	b.n	8004798 <_printf_float+0x1a4>
 80047b2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80047b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80047b8:	4299      	cmp	r1, r3
 80047ba:	db05      	blt.n	80047c8 <_printf_float+0x1d4>
 80047bc:	6823      	ldr	r3, [r4, #0]
 80047be:	6121      	str	r1, [r4, #16]
 80047c0:	07d8      	lsls	r0, r3, #31
 80047c2:	d5ea      	bpl.n	800479a <_printf_float+0x1a6>
 80047c4:	1c4b      	adds	r3, r1, #1
 80047c6:	e7e7      	b.n	8004798 <_printf_float+0x1a4>
 80047c8:	2900      	cmp	r1, #0
 80047ca:	bfd4      	ite	le
 80047cc:	f1c1 0202 	rsble	r2, r1, #2
 80047d0:	2201      	movgt	r2, #1
 80047d2:	4413      	add	r3, r2
 80047d4:	e7e0      	b.n	8004798 <_printf_float+0x1a4>
 80047d6:	6823      	ldr	r3, [r4, #0]
 80047d8:	055a      	lsls	r2, r3, #21
 80047da:	d407      	bmi.n	80047ec <_printf_float+0x1f8>
 80047dc:	6923      	ldr	r3, [r4, #16]
 80047de:	4642      	mov	r2, r8
 80047e0:	4631      	mov	r1, r6
 80047e2:	4628      	mov	r0, r5
 80047e4:	47b8      	blx	r7
 80047e6:	3001      	adds	r0, #1
 80047e8:	d12c      	bne.n	8004844 <_printf_float+0x250>
 80047ea:	e764      	b.n	80046b6 <_printf_float+0xc2>
 80047ec:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80047f0:	f240 80e0 	bls.w	80049b4 <_printf_float+0x3c0>
 80047f4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80047f8:	2200      	movs	r2, #0
 80047fa:	2300      	movs	r3, #0
 80047fc:	f7fc f974 	bl	8000ae8 <__aeabi_dcmpeq>
 8004800:	2800      	cmp	r0, #0
 8004802:	d034      	beq.n	800486e <_printf_float+0x27a>
 8004804:	4a37      	ldr	r2, [pc, #220]	; (80048e4 <_printf_float+0x2f0>)
 8004806:	2301      	movs	r3, #1
 8004808:	4631      	mov	r1, r6
 800480a:	4628      	mov	r0, r5
 800480c:	47b8      	blx	r7
 800480e:	3001      	adds	r0, #1
 8004810:	f43f af51 	beq.w	80046b6 <_printf_float+0xc2>
 8004814:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004818:	429a      	cmp	r2, r3
 800481a:	db02      	blt.n	8004822 <_printf_float+0x22e>
 800481c:	6823      	ldr	r3, [r4, #0]
 800481e:	07d8      	lsls	r0, r3, #31
 8004820:	d510      	bpl.n	8004844 <_printf_float+0x250>
 8004822:	ee18 3a10 	vmov	r3, s16
 8004826:	4652      	mov	r2, sl
 8004828:	4631      	mov	r1, r6
 800482a:	4628      	mov	r0, r5
 800482c:	47b8      	blx	r7
 800482e:	3001      	adds	r0, #1
 8004830:	f43f af41 	beq.w	80046b6 <_printf_float+0xc2>
 8004834:	f04f 0800 	mov.w	r8, #0
 8004838:	f104 091a 	add.w	r9, r4, #26
 800483c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800483e:	3b01      	subs	r3, #1
 8004840:	4543      	cmp	r3, r8
 8004842:	dc09      	bgt.n	8004858 <_printf_float+0x264>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	079b      	lsls	r3, r3, #30
 8004848:	f100 8105 	bmi.w	8004a56 <_printf_float+0x462>
 800484c:	68e0      	ldr	r0, [r4, #12]
 800484e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004850:	4298      	cmp	r0, r3
 8004852:	bfb8      	it	lt
 8004854:	4618      	movlt	r0, r3
 8004856:	e730      	b.n	80046ba <_printf_float+0xc6>
 8004858:	2301      	movs	r3, #1
 800485a:	464a      	mov	r2, r9
 800485c:	4631      	mov	r1, r6
 800485e:	4628      	mov	r0, r5
 8004860:	47b8      	blx	r7
 8004862:	3001      	adds	r0, #1
 8004864:	f43f af27 	beq.w	80046b6 <_printf_float+0xc2>
 8004868:	f108 0801 	add.w	r8, r8, #1
 800486c:	e7e6      	b.n	800483c <_printf_float+0x248>
 800486e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004870:	2b00      	cmp	r3, #0
 8004872:	dc39      	bgt.n	80048e8 <_printf_float+0x2f4>
 8004874:	4a1b      	ldr	r2, [pc, #108]	; (80048e4 <_printf_float+0x2f0>)
 8004876:	2301      	movs	r3, #1
 8004878:	4631      	mov	r1, r6
 800487a:	4628      	mov	r0, r5
 800487c:	47b8      	blx	r7
 800487e:	3001      	adds	r0, #1
 8004880:	f43f af19 	beq.w	80046b6 <_printf_float+0xc2>
 8004884:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004888:	4313      	orrs	r3, r2
 800488a:	d102      	bne.n	8004892 <_printf_float+0x29e>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	07d9      	lsls	r1, r3, #31
 8004890:	d5d8      	bpl.n	8004844 <_printf_float+0x250>
 8004892:	ee18 3a10 	vmov	r3, s16
 8004896:	4652      	mov	r2, sl
 8004898:	4631      	mov	r1, r6
 800489a:	4628      	mov	r0, r5
 800489c:	47b8      	blx	r7
 800489e:	3001      	adds	r0, #1
 80048a0:	f43f af09 	beq.w	80046b6 <_printf_float+0xc2>
 80048a4:	f04f 0900 	mov.w	r9, #0
 80048a8:	f104 0a1a 	add.w	sl, r4, #26
 80048ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ae:	425b      	negs	r3, r3
 80048b0:	454b      	cmp	r3, r9
 80048b2:	dc01      	bgt.n	80048b8 <_printf_float+0x2c4>
 80048b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80048b6:	e792      	b.n	80047de <_printf_float+0x1ea>
 80048b8:	2301      	movs	r3, #1
 80048ba:	4652      	mov	r2, sl
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	f43f aef7 	beq.w	80046b6 <_printf_float+0xc2>
 80048c8:	f109 0901 	add.w	r9, r9, #1
 80048cc:	e7ee      	b.n	80048ac <_printf_float+0x2b8>
 80048ce:	bf00      	nop
 80048d0:	7fefffff 	.word	0x7fefffff
 80048d4:	08007448 	.word	0x08007448
 80048d8:	0800744c 	.word	0x0800744c
 80048dc:	08007454 	.word	0x08007454
 80048e0:	08007450 	.word	0x08007450
 80048e4:	08007458 	.word	0x08007458
 80048e8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80048ea:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80048ec:	429a      	cmp	r2, r3
 80048ee:	bfa8      	it	ge
 80048f0:	461a      	movge	r2, r3
 80048f2:	2a00      	cmp	r2, #0
 80048f4:	4691      	mov	r9, r2
 80048f6:	dc37      	bgt.n	8004968 <_printf_float+0x374>
 80048f8:	f04f 0b00 	mov.w	fp, #0
 80048fc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004900:	f104 021a 	add.w	r2, r4, #26
 8004904:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004906:	9305      	str	r3, [sp, #20]
 8004908:	eba3 0309 	sub.w	r3, r3, r9
 800490c:	455b      	cmp	r3, fp
 800490e:	dc33      	bgt.n	8004978 <_printf_float+0x384>
 8004910:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004914:	429a      	cmp	r2, r3
 8004916:	db3b      	blt.n	8004990 <_printf_float+0x39c>
 8004918:	6823      	ldr	r3, [r4, #0]
 800491a:	07da      	lsls	r2, r3, #31
 800491c:	d438      	bmi.n	8004990 <_printf_float+0x39c>
 800491e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004920:	9a05      	ldr	r2, [sp, #20]
 8004922:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004924:	1a9a      	subs	r2, r3, r2
 8004926:	eba3 0901 	sub.w	r9, r3, r1
 800492a:	4591      	cmp	r9, r2
 800492c:	bfa8      	it	ge
 800492e:	4691      	movge	r9, r2
 8004930:	f1b9 0f00 	cmp.w	r9, #0
 8004934:	dc35      	bgt.n	80049a2 <_printf_float+0x3ae>
 8004936:	f04f 0800 	mov.w	r8, #0
 800493a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800493e:	f104 0a1a 	add.w	sl, r4, #26
 8004942:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004946:	1a9b      	subs	r3, r3, r2
 8004948:	eba3 0309 	sub.w	r3, r3, r9
 800494c:	4543      	cmp	r3, r8
 800494e:	f77f af79 	ble.w	8004844 <_printf_float+0x250>
 8004952:	2301      	movs	r3, #1
 8004954:	4652      	mov	r2, sl
 8004956:	4631      	mov	r1, r6
 8004958:	4628      	mov	r0, r5
 800495a:	47b8      	blx	r7
 800495c:	3001      	adds	r0, #1
 800495e:	f43f aeaa 	beq.w	80046b6 <_printf_float+0xc2>
 8004962:	f108 0801 	add.w	r8, r8, #1
 8004966:	e7ec      	b.n	8004942 <_printf_float+0x34e>
 8004968:	4613      	mov	r3, r2
 800496a:	4631      	mov	r1, r6
 800496c:	4642      	mov	r2, r8
 800496e:	4628      	mov	r0, r5
 8004970:	47b8      	blx	r7
 8004972:	3001      	adds	r0, #1
 8004974:	d1c0      	bne.n	80048f8 <_printf_float+0x304>
 8004976:	e69e      	b.n	80046b6 <_printf_float+0xc2>
 8004978:	2301      	movs	r3, #1
 800497a:	4631      	mov	r1, r6
 800497c:	4628      	mov	r0, r5
 800497e:	9205      	str	r2, [sp, #20]
 8004980:	47b8      	blx	r7
 8004982:	3001      	adds	r0, #1
 8004984:	f43f ae97 	beq.w	80046b6 <_printf_float+0xc2>
 8004988:	9a05      	ldr	r2, [sp, #20]
 800498a:	f10b 0b01 	add.w	fp, fp, #1
 800498e:	e7b9      	b.n	8004904 <_printf_float+0x310>
 8004990:	ee18 3a10 	vmov	r3, s16
 8004994:	4652      	mov	r2, sl
 8004996:	4631      	mov	r1, r6
 8004998:	4628      	mov	r0, r5
 800499a:	47b8      	blx	r7
 800499c:	3001      	adds	r0, #1
 800499e:	d1be      	bne.n	800491e <_printf_float+0x32a>
 80049a0:	e689      	b.n	80046b6 <_printf_float+0xc2>
 80049a2:	9a05      	ldr	r2, [sp, #20]
 80049a4:	464b      	mov	r3, r9
 80049a6:	4442      	add	r2, r8
 80049a8:	4631      	mov	r1, r6
 80049aa:	4628      	mov	r0, r5
 80049ac:	47b8      	blx	r7
 80049ae:	3001      	adds	r0, #1
 80049b0:	d1c1      	bne.n	8004936 <_printf_float+0x342>
 80049b2:	e680      	b.n	80046b6 <_printf_float+0xc2>
 80049b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80049b6:	2a01      	cmp	r2, #1
 80049b8:	dc01      	bgt.n	80049be <_printf_float+0x3ca>
 80049ba:	07db      	lsls	r3, r3, #31
 80049bc:	d538      	bpl.n	8004a30 <_printf_float+0x43c>
 80049be:	2301      	movs	r3, #1
 80049c0:	4642      	mov	r2, r8
 80049c2:	4631      	mov	r1, r6
 80049c4:	4628      	mov	r0, r5
 80049c6:	47b8      	blx	r7
 80049c8:	3001      	adds	r0, #1
 80049ca:	f43f ae74 	beq.w	80046b6 <_printf_float+0xc2>
 80049ce:	ee18 3a10 	vmov	r3, s16
 80049d2:	4652      	mov	r2, sl
 80049d4:	4631      	mov	r1, r6
 80049d6:	4628      	mov	r0, r5
 80049d8:	47b8      	blx	r7
 80049da:	3001      	adds	r0, #1
 80049dc:	f43f ae6b 	beq.w	80046b6 <_printf_float+0xc2>
 80049e0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80049e4:	2200      	movs	r2, #0
 80049e6:	2300      	movs	r3, #0
 80049e8:	f7fc f87e 	bl	8000ae8 <__aeabi_dcmpeq>
 80049ec:	b9d8      	cbnz	r0, 8004a26 <_printf_float+0x432>
 80049ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f0:	f108 0201 	add.w	r2, r8, #1
 80049f4:	3b01      	subs	r3, #1
 80049f6:	4631      	mov	r1, r6
 80049f8:	4628      	mov	r0, r5
 80049fa:	47b8      	blx	r7
 80049fc:	3001      	adds	r0, #1
 80049fe:	d10e      	bne.n	8004a1e <_printf_float+0x42a>
 8004a00:	e659      	b.n	80046b6 <_printf_float+0xc2>
 8004a02:	2301      	movs	r3, #1
 8004a04:	4652      	mov	r2, sl
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	47b8      	blx	r7
 8004a0c:	3001      	adds	r0, #1
 8004a0e:	f43f ae52 	beq.w	80046b6 <_printf_float+0xc2>
 8004a12:	f108 0801 	add.w	r8, r8, #1
 8004a16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	4543      	cmp	r3, r8
 8004a1c:	dcf1      	bgt.n	8004a02 <_printf_float+0x40e>
 8004a1e:	464b      	mov	r3, r9
 8004a20:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a24:	e6dc      	b.n	80047e0 <_printf_float+0x1ec>
 8004a26:	f04f 0800 	mov.w	r8, #0
 8004a2a:	f104 0a1a 	add.w	sl, r4, #26
 8004a2e:	e7f2      	b.n	8004a16 <_printf_float+0x422>
 8004a30:	2301      	movs	r3, #1
 8004a32:	4642      	mov	r2, r8
 8004a34:	e7df      	b.n	80049f6 <_printf_float+0x402>
 8004a36:	2301      	movs	r3, #1
 8004a38:	464a      	mov	r2, r9
 8004a3a:	4631      	mov	r1, r6
 8004a3c:	4628      	mov	r0, r5
 8004a3e:	47b8      	blx	r7
 8004a40:	3001      	adds	r0, #1
 8004a42:	f43f ae38 	beq.w	80046b6 <_printf_float+0xc2>
 8004a46:	f108 0801 	add.w	r8, r8, #1
 8004a4a:	68e3      	ldr	r3, [r4, #12]
 8004a4c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004a4e:	1a5b      	subs	r3, r3, r1
 8004a50:	4543      	cmp	r3, r8
 8004a52:	dcf0      	bgt.n	8004a36 <_printf_float+0x442>
 8004a54:	e6fa      	b.n	800484c <_printf_float+0x258>
 8004a56:	f04f 0800 	mov.w	r8, #0
 8004a5a:	f104 0919 	add.w	r9, r4, #25
 8004a5e:	e7f4      	b.n	8004a4a <_printf_float+0x456>

08004a60 <_printf_common>:
 8004a60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a64:	4616      	mov	r6, r2
 8004a66:	4699      	mov	r9, r3
 8004a68:	688a      	ldr	r2, [r1, #8]
 8004a6a:	690b      	ldr	r3, [r1, #16]
 8004a6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a70:	4293      	cmp	r3, r2
 8004a72:	bfb8      	it	lt
 8004a74:	4613      	movlt	r3, r2
 8004a76:	6033      	str	r3, [r6, #0]
 8004a78:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a7c:	4607      	mov	r7, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	b10a      	cbz	r2, 8004a86 <_printf_common+0x26>
 8004a82:	3301      	adds	r3, #1
 8004a84:	6033      	str	r3, [r6, #0]
 8004a86:	6823      	ldr	r3, [r4, #0]
 8004a88:	0699      	lsls	r1, r3, #26
 8004a8a:	bf42      	ittt	mi
 8004a8c:	6833      	ldrmi	r3, [r6, #0]
 8004a8e:	3302      	addmi	r3, #2
 8004a90:	6033      	strmi	r3, [r6, #0]
 8004a92:	6825      	ldr	r5, [r4, #0]
 8004a94:	f015 0506 	ands.w	r5, r5, #6
 8004a98:	d106      	bne.n	8004aa8 <_printf_common+0x48>
 8004a9a:	f104 0a19 	add.w	sl, r4, #25
 8004a9e:	68e3      	ldr	r3, [r4, #12]
 8004aa0:	6832      	ldr	r2, [r6, #0]
 8004aa2:	1a9b      	subs	r3, r3, r2
 8004aa4:	42ab      	cmp	r3, r5
 8004aa6:	dc26      	bgt.n	8004af6 <_printf_common+0x96>
 8004aa8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004aac:	1e13      	subs	r3, r2, #0
 8004aae:	6822      	ldr	r2, [r4, #0]
 8004ab0:	bf18      	it	ne
 8004ab2:	2301      	movne	r3, #1
 8004ab4:	0692      	lsls	r2, r2, #26
 8004ab6:	d42b      	bmi.n	8004b10 <_printf_common+0xb0>
 8004ab8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004abc:	4649      	mov	r1, r9
 8004abe:	4638      	mov	r0, r7
 8004ac0:	47c0      	blx	r8
 8004ac2:	3001      	adds	r0, #1
 8004ac4:	d01e      	beq.n	8004b04 <_printf_common+0xa4>
 8004ac6:	6823      	ldr	r3, [r4, #0]
 8004ac8:	68e5      	ldr	r5, [r4, #12]
 8004aca:	6832      	ldr	r2, [r6, #0]
 8004acc:	f003 0306 	and.w	r3, r3, #6
 8004ad0:	2b04      	cmp	r3, #4
 8004ad2:	bf08      	it	eq
 8004ad4:	1aad      	subeq	r5, r5, r2
 8004ad6:	68a3      	ldr	r3, [r4, #8]
 8004ad8:	6922      	ldr	r2, [r4, #16]
 8004ada:	bf0c      	ite	eq
 8004adc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae0:	2500      	movne	r5, #0
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	bfc4      	itt	gt
 8004ae6:	1a9b      	subgt	r3, r3, r2
 8004ae8:	18ed      	addgt	r5, r5, r3
 8004aea:	2600      	movs	r6, #0
 8004aec:	341a      	adds	r4, #26
 8004aee:	42b5      	cmp	r5, r6
 8004af0:	d11a      	bne.n	8004b28 <_printf_common+0xc8>
 8004af2:	2000      	movs	r0, #0
 8004af4:	e008      	b.n	8004b08 <_printf_common+0xa8>
 8004af6:	2301      	movs	r3, #1
 8004af8:	4652      	mov	r2, sl
 8004afa:	4649      	mov	r1, r9
 8004afc:	4638      	mov	r0, r7
 8004afe:	47c0      	blx	r8
 8004b00:	3001      	adds	r0, #1
 8004b02:	d103      	bne.n	8004b0c <_printf_common+0xac>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004b08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0c:	3501      	adds	r5, #1
 8004b0e:	e7c6      	b.n	8004a9e <_printf_common+0x3e>
 8004b10:	18e1      	adds	r1, r4, r3
 8004b12:	1c5a      	adds	r2, r3, #1
 8004b14:	2030      	movs	r0, #48	; 0x30
 8004b16:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b1a:	4422      	add	r2, r4
 8004b1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b24:	3302      	adds	r3, #2
 8004b26:	e7c7      	b.n	8004ab8 <_printf_common+0x58>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	4622      	mov	r2, r4
 8004b2c:	4649      	mov	r1, r9
 8004b2e:	4638      	mov	r0, r7
 8004b30:	47c0      	blx	r8
 8004b32:	3001      	adds	r0, #1
 8004b34:	d0e6      	beq.n	8004b04 <_printf_common+0xa4>
 8004b36:	3601      	adds	r6, #1
 8004b38:	e7d9      	b.n	8004aee <_printf_common+0x8e>
	...

08004b3c <_printf_i>:
 8004b3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b40:	7e0f      	ldrb	r7, [r1, #24]
 8004b42:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b44:	2f78      	cmp	r7, #120	; 0x78
 8004b46:	4691      	mov	r9, r2
 8004b48:	4680      	mov	r8, r0
 8004b4a:	460c      	mov	r4, r1
 8004b4c:	469a      	mov	sl, r3
 8004b4e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b52:	d807      	bhi.n	8004b64 <_printf_i+0x28>
 8004b54:	2f62      	cmp	r7, #98	; 0x62
 8004b56:	d80a      	bhi.n	8004b6e <_printf_i+0x32>
 8004b58:	2f00      	cmp	r7, #0
 8004b5a:	f000 80d8 	beq.w	8004d0e <_printf_i+0x1d2>
 8004b5e:	2f58      	cmp	r7, #88	; 0x58
 8004b60:	f000 80a3 	beq.w	8004caa <_printf_i+0x16e>
 8004b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b68:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b6c:	e03a      	b.n	8004be4 <_printf_i+0xa8>
 8004b6e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b72:	2b15      	cmp	r3, #21
 8004b74:	d8f6      	bhi.n	8004b64 <_printf_i+0x28>
 8004b76:	a101      	add	r1, pc, #4	; (adr r1, 8004b7c <_printf_i+0x40>)
 8004b78:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b7c:	08004bd5 	.word	0x08004bd5
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004b65 	.word	0x08004b65
 8004b88:	08004b65 	.word	0x08004b65
 8004b8c:	08004b65 	.word	0x08004b65
 8004b90:	08004b65 	.word	0x08004b65
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004b65 	.word	0x08004b65
 8004b9c:	08004b65 	.word	0x08004b65
 8004ba0:	08004b65 	.word	0x08004b65
 8004ba4:	08004b65 	.word	0x08004b65
 8004ba8:	08004cf5 	.word	0x08004cf5
 8004bac:	08004c19 	.word	0x08004c19
 8004bb0:	08004cd7 	.word	0x08004cd7
 8004bb4:	08004b65 	.word	0x08004b65
 8004bb8:	08004b65 	.word	0x08004b65
 8004bbc:	08004d17 	.word	0x08004d17
 8004bc0:	08004b65 	.word	0x08004b65
 8004bc4:	08004c19 	.word	0x08004c19
 8004bc8:	08004b65 	.word	0x08004b65
 8004bcc:	08004b65 	.word	0x08004b65
 8004bd0:	08004cdf 	.word	0x08004cdf
 8004bd4:	682b      	ldr	r3, [r5, #0]
 8004bd6:	1d1a      	adds	r2, r3, #4
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	602a      	str	r2, [r5, #0]
 8004bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004be4:	2301      	movs	r3, #1
 8004be6:	e0a3      	b.n	8004d30 <_printf_i+0x1f4>
 8004be8:	6820      	ldr	r0, [r4, #0]
 8004bea:	6829      	ldr	r1, [r5, #0]
 8004bec:	0606      	lsls	r6, r0, #24
 8004bee:	f101 0304 	add.w	r3, r1, #4
 8004bf2:	d50a      	bpl.n	8004c0a <_printf_i+0xce>
 8004bf4:	680e      	ldr	r6, [r1, #0]
 8004bf6:	602b      	str	r3, [r5, #0]
 8004bf8:	2e00      	cmp	r6, #0
 8004bfa:	da03      	bge.n	8004c04 <_printf_i+0xc8>
 8004bfc:	232d      	movs	r3, #45	; 0x2d
 8004bfe:	4276      	negs	r6, r6
 8004c00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c04:	485e      	ldr	r0, [pc, #376]	; (8004d80 <_printf_i+0x244>)
 8004c06:	230a      	movs	r3, #10
 8004c08:	e019      	b.n	8004c3e <_printf_i+0x102>
 8004c0a:	680e      	ldr	r6, [r1, #0]
 8004c0c:	602b      	str	r3, [r5, #0]
 8004c0e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004c12:	bf18      	it	ne
 8004c14:	b236      	sxthne	r6, r6
 8004c16:	e7ef      	b.n	8004bf8 <_printf_i+0xbc>
 8004c18:	682b      	ldr	r3, [r5, #0]
 8004c1a:	6820      	ldr	r0, [r4, #0]
 8004c1c:	1d19      	adds	r1, r3, #4
 8004c1e:	6029      	str	r1, [r5, #0]
 8004c20:	0601      	lsls	r1, r0, #24
 8004c22:	d501      	bpl.n	8004c28 <_printf_i+0xec>
 8004c24:	681e      	ldr	r6, [r3, #0]
 8004c26:	e002      	b.n	8004c2e <_printf_i+0xf2>
 8004c28:	0646      	lsls	r6, r0, #25
 8004c2a:	d5fb      	bpl.n	8004c24 <_printf_i+0xe8>
 8004c2c:	881e      	ldrh	r6, [r3, #0]
 8004c2e:	4854      	ldr	r0, [pc, #336]	; (8004d80 <_printf_i+0x244>)
 8004c30:	2f6f      	cmp	r7, #111	; 0x6f
 8004c32:	bf0c      	ite	eq
 8004c34:	2308      	moveq	r3, #8
 8004c36:	230a      	movne	r3, #10
 8004c38:	2100      	movs	r1, #0
 8004c3a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c3e:	6865      	ldr	r5, [r4, #4]
 8004c40:	60a5      	str	r5, [r4, #8]
 8004c42:	2d00      	cmp	r5, #0
 8004c44:	bfa2      	ittt	ge
 8004c46:	6821      	ldrge	r1, [r4, #0]
 8004c48:	f021 0104 	bicge.w	r1, r1, #4
 8004c4c:	6021      	strge	r1, [r4, #0]
 8004c4e:	b90e      	cbnz	r6, 8004c54 <_printf_i+0x118>
 8004c50:	2d00      	cmp	r5, #0
 8004c52:	d04d      	beq.n	8004cf0 <_printf_i+0x1b4>
 8004c54:	4615      	mov	r5, r2
 8004c56:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c5a:	fb03 6711 	mls	r7, r3, r1, r6
 8004c5e:	5dc7      	ldrb	r7, [r0, r7]
 8004c60:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c64:	4637      	mov	r7, r6
 8004c66:	42bb      	cmp	r3, r7
 8004c68:	460e      	mov	r6, r1
 8004c6a:	d9f4      	bls.n	8004c56 <_printf_i+0x11a>
 8004c6c:	2b08      	cmp	r3, #8
 8004c6e:	d10b      	bne.n	8004c88 <_printf_i+0x14c>
 8004c70:	6823      	ldr	r3, [r4, #0]
 8004c72:	07de      	lsls	r6, r3, #31
 8004c74:	d508      	bpl.n	8004c88 <_printf_i+0x14c>
 8004c76:	6923      	ldr	r3, [r4, #16]
 8004c78:	6861      	ldr	r1, [r4, #4]
 8004c7a:	4299      	cmp	r1, r3
 8004c7c:	bfde      	ittt	le
 8004c7e:	2330      	movle	r3, #48	; 0x30
 8004c80:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c84:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004c88:	1b52      	subs	r2, r2, r5
 8004c8a:	6122      	str	r2, [r4, #16]
 8004c8c:	f8cd a000 	str.w	sl, [sp]
 8004c90:	464b      	mov	r3, r9
 8004c92:	aa03      	add	r2, sp, #12
 8004c94:	4621      	mov	r1, r4
 8004c96:	4640      	mov	r0, r8
 8004c98:	f7ff fee2 	bl	8004a60 <_printf_common>
 8004c9c:	3001      	adds	r0, #1
 8004c9e:	d14c      	bne.n	8004d3a <_printf_i+0x1fe>
 8004ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ca4:	b004      	add	sp, #16
 8004ca6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004caa:	4835      	ldr	r0, [pc, #212]	; (8004d80 <_printf_i+0x244>)
 8004cac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004cb0:	6829      	ldr	r1, [r5, #0]
 8004cb2:	6823      	ldr	r3, [r4, #0]
 8004cb4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cb8:	6029      	str	r1, [r5, #0]
 8004cba:	061d      	lsls	r5, r3, #24
 8004cbc:	d514      	bpl.n	8004ce8 <_printf_i+0x1ac>
 8004cbe:	07df      	lsls	r7, r3, #31
 8004cc0:	bf44      	itt	mi
 8004cc2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cc6:	6023      	strmi	r3, [r4, #0]
 8004cc8:	b91e      	cbnz	r6, 8004cd2 <_printf_i+0x196>
 8004cca:	6823      	ldr	r3, [r4, #0]
 8004ccc:	f023 0320 	bic.w	r3, r3, #32
 8004cd0:	6023      	str	r3, [r4, #0]
 8004cd2:	2310      	movs	r3, #16
 8004cd4:	e7b0      	b.n	8004c38 <_printf_i+0xfc>
 8004cd6:	6823      	ldr	r3, [r4, #0]
 8004cd8:	f043 0320 	orr.w	r3, r3, #32
 8004cdc:	6023      	str	r3, [r4, #0]
 8004cde:	2378      	movs	r3, #120	; 0x78
 8004ce0:	4828      	ldr	r0, [pc, #160]	; (8004d84 <_printf_i+0x248>)
 8004ce2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ce6:	e7e3      	b.n	8004cb0 <_printf_i+0x174>
 8004ce8:	0659      	lsls	r1, r3, #25
 8004cea:	bf48      	it	mi
 8004cec:	b2b6      	uxthmi	r6, r6
 8004cee:	e7e6      	b.n	8004cbe <_printf_i+0x182>
 8004cf0:	4615      	mov	r5, r2
 8004cf2:	e7bb      	b.n	8004c6c <_printf_i+0x130>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	6826      	ldr	r6, [r4, #0]
 8004cf8:	6961      	ldr	r1, [r4, #20]
 8004cfa:	1d18      	adds	r0, r3, #4
 8004cfc:	6028      	str	r0, [r5, #0]
 8004cfe:	0635      	lsls	r5, r6, #24
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	d501      	bpl.n	8004d08 <_printf_i+0x1cc>
 8004d04:	6019      	str	r1, [r3, #0]
 8004d06:	e002      	b.n	8004d0e <_printf_i+0x1d2>
 8004d08:	0670      	lsls	r0, r6, #25
 8004d0a:	d5fb      	bpl.n	8004d04 <_printf_i+0x1c8>
 8004d0c:	8019      	strh	r1, [r3, #0]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	4615      	mov	r5, r2
 8004d14:	e7ba      	b.n	8004c8c <_printf_i+0x150>
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	602a      	str	r2, [r5, #0]
 8004d1c:	681d      	ldr	r5, [r3, #0]
 8004d1e:	6862      	ldr	r2, [r4, #4]
 8004d20:	2100      	movs	r1, #0
 8004d22:	4628      	mov	r0, r5
 8004d24:	f7fb fa6c 	bl	8000200 <memchr>
 8004d28:	b108      	cbz	r0, 8004d2e <_printf_i+0x1f2>
 8004d2a:	1b40      	subs	r0, r0, r5
 8004d2c:	6060      	str	r0, [r4, #4]
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	6123      	str	r3, [r4, #16]
 8004d32:	2300      	movs	r3, #0
 8004d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d38:	e7a8      	b.n	8004c8c <_printf_i+0x150>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	47d0      	blx	sl
 8004d44:	3001      	adds	r0, #1
 8004d46:	d0ab      	beq.n	8004ca0 <_printf_i+0x164>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	079b      	lsls	r3, r3, #30
 8004d4c:	d413      	bmi.n	8004d76 <_printf_i+0x23a>
 8004d4e:	68e0      	ldr	r0, [r4, #12]
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	4298      	cmp	r0, r3
 8004d54:	bfb8      	it	lt
 8004d56:	4618      	movlt	r0, r3
 8004d58:	e7a4      	b.n	8004ca4 <_printf_i+0x168>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	47d0      	blx	sl
 8004d64:	3001      	adds	r0, #1
 8004d66:	d09b      	beq.n	8004ca0 <_printf_i+0x164>
 8004d68:	3501      	adds	r5, #1
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	9903      	ldr	r1, [sp, #12]
 8004d6e:	1a5b      	subs	r3, r3, r1
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dcf2      	bgt.n	8004d5a <_printf_i+0x21e>
 8004d74:	e7eb      	b.n	8004d4e <_printf_i+0x212>
 8004d76:	2500      	movs	r5, #0
 8004d78:	f104 0619 	add.w	r6, r4, #25
 8004d7c:	e7f5      	b.n	8004d6a <_printf_i+0x22e>
 8004d7e:	bf00      	nop
 8004d80:	0800745a 	.word	0x0800745a
 8004d84:	0800746b 	.word	0x0800746b

08004d88 <iprintf>:
 8004d88:	b40f      	push	{r0, r1, r2, r3}
 8004d8a:	4b0a      	ldr	r3, [pc, #40]	; (8004db4 <iprintf+0x2c>)
 8004d8c:	b513      	push	{r0, r1, r4, lr}
 8004d8e:	681c      	ldr	r4, [r3, #0]
 8004d90:	b124      	cbz	r4, 8004d9c <iprintf+0x14>
 8004d92:	69a3      	ldr	r3, [r4, #24]
 8004d94:	b913      	cbnz	r3, 8004d9c <iprintf+0x14>
 8004d96:	4620      	mov	r0, r4
 8004d98:	f001 f8fa 	bl	8005f90 <__sinit>
 8004d9c:	ab05      	add	r3, sp, #20
 8004d9e:	9a04      	ldr	r2, [sp, #16]
 8004da0:	68a1      	ldr	r1, [r4, #8]
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	4620      	mov	r0, r4
 8004da6:	f002 f813 	bl	8006dd0 <_vfiprintf_r>
 8004daa:	b002      	add	sp, #8
 8004dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004db0:	b004      	add	sp, #16
 8004db2:	4770      	bx	lr
 8004db4:	20000010 	.word	0x20000010

08004db8 <_puts_r>:
 8004db8:	b570      	push	{r4, r5, r6, lr}
 8004dba:	460e      	mov	r6, r1
 8004dbc:	4605      	mov	r5, r0
 8004dbe:	b118      	cbz	r0, 8004dc8 <_puts_r+0x10>
 8004dc0:	6983      	ldr	r3, [r0, #24]
 8004dc2:	b90b      	cbnz	r3, 8004dc8 <_puts_r+0x10>
 8004dc4:	f001 f8e4 	bl	8005f90 <__sinit>
 8004dc8:	69ab      	ldr	r3, [r5, #24]
 8004dca:	68ac      	ldr	r4, [r5, #8]
 8004dcc:	b913      	cbnz	r3, 8004dd4 <_puts_r+0x1c>
 8004dce:	4628      	mov	r0, r5
 8004dd0:	f001 f8de 	bl	8005f90 <__sinit>
 8004dd4:	4b2c      	ldr	r3, [pc, #176]	; (8004e88 <_puts_r+0xd0>)
 8004dd6:	429c      	cmp	r4, r3
 8004dd8:	d120      	bne.n	8004e1c <_puts_r+0x64>
 8004dda:	686c      	ldr	r4, [r5, #4]
 8004ddc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004dde:	07db      	lsls	r3, r3, #31
 8004de0:	d405      	bmi.n	8004dee <_puts_r+0x36>
 8004de2:	89a3      	ldrh	r3, [r4, #12]
 8004de4:	0598      	lsls	r0, r3, #22
 8004de6:	d402      	bmi.n	8004dee <_puts_r+0x36>
 8004de8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004dea:	f001 f974 	bl	80060d6 <__retarget_lock_acquire_recursive>
 8004dee:	89a3      	ldrh	r3, [r4, #12]
 8004df0:	0719      	lsls	r1, r3, #28
 8004df2:	d51d      	bpl.n	8004e30 <_puts_r+0x78>
 8004df4:	6923      	ldr	r3, [r4, #16]
 8004df6:	b1db      	cbz	r3, 8004e30 <_puts_r+0x78>
 8004df8:	3e01      	subs	r6, #1
 8004dfa:	68a3      	ldr	r3, [r4, #8]
 8004dfc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004e00:	3b01      	subs	r3, #1
 8004e02:	60a3      	str	r3, [r4, #8]
 8004e04:	bb39      	cbnz	r1, 8004e56 <_puts_r+0x9e>
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	da38      	bge.n	8004e7c <_puts_r+0xc4>
 8004e0a:	4622      	mov	r2, r4
 8004e0c:	210a      	movs	r1, #10
 8004e0e:	4628      	mov	r0, r5
 8004e10:	f000 f868 	bl	8004ee4 <__swbuf_r>
 8004e14:	3001      	adds	r0, #1
 8004e16:	d011      	beq.n	8004e3c <_puts_r+0x84>
 8004e18:	250a      	movs	r5, #10
 8004e1a:	e011      	b.n	8004e40 <_puts_r+0x88>
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <_puts_r+0xd4>)
 8004e1e:	429c      	cmp	r4, r3
 8004e20:	d101      	bne.n	8004e26 <_puts_r+0x6e>
 8004e22:	68ac      	ldr	r4, [r5, #8]
 8004e24:	e7da      	b.n	8004ddc <_puts_r+0x24>
 8004e26:	4b1a      	ldr	r3, [pc, #104]	; (8004e90 <_puts_r+0xd8>)
 8004e28:	429c      	cmp	r4, r3
 8004e2a:	bf08      	it	eq
 8004e2c:	68ec      	ldreq	r4, [r5, #12]
 8004e2e:	e7d5      	b.n	8004ddc <_puts_r+0x24>
 8004e30:	4621      	mov	r1, r4
 8004e32:	4628      	mov	r0, r5
 8004e34:	f000 f8a8 	bl	8004f88 <__swsetup_r>
 8004e38:	2800      	cmp	r0, #0
 8004e3a:	d0dd      	beq.n	8004df8 <_puts_r+0x40>
 8004e3c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8004e40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004e42:	07da      	lsls	r2, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_puts_r+0x9a>
 8004e46:	89a3      	ldrh	r3, [r4, #12]
 8004e48:	059b      	lsls	r3, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_puts_r+0x9a>
 8004e4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004e4e:	f001 f943 	bl	80060d8 <__retarget_lock_release_recursive>
 8004e52:	4628      	mov	r0, r5
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	da04      	bge.n	8004e64 <_puts_r+0xac>
 8004e5a:	69a2      	ldr	r2, [r4, #24]
 8004e5c:	429a      	cmp	r2, r3
 8004e5e:	dc06      	bgt.n	8004e6e <_puts_r+0xb6>
 8004e60:	290a      	cmp	r1, #10
 8004e62:	d004      	beq.n	8004e6e <_puts_r+0xb6>
 8004e64:	6823      	ldr	r3, [r4, #0]
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	6022      	str	r2, [r4, #0]
 8004e6a:	7019      	strb	r1, [r3, #0]
 8004e6c:	e7c5      	b.n	8004dfa <_puts_r+0x42>
 8004e6e:	4622      	mov	r2, r4
 8004e70:	4628      	mov	r0, r5
 8004e72:	f000 f837 	bl	8004ee4 <__swbuf_r>
 8004e76:	3001      	adds	r0, #1
 8004e78:	d1bf      	bne.n	8004dfa <_puts_r+0x42>
 8004e7a:	e7df      	b.n	8004e3c <_puts_r+0x84>
 8004e7c:	6823      	ldr	r3, [r4, #0]
 8004e7e:	250a      	movs	r5, #10
 8004e80:	1c5a      	adds	r2, r3, #1
 8004e82:	6022      	str	r2, [r4, #0]
 8004e84:	701d      	strb	r5, [r3, #0]
 8004e86:	e7db      	b.n	8004e40 <_puts_r+0x88>
 8004e88:	0800752c 	.word	0x0800752c
 8004e8c:	0800754c 	.word	0x0800754c
 8004e90:	0800750c 	.word	0x0800750c

08004e94 <puts>:
 8004e94:	4b02      	ldr	r3, [pc, #8]	; (8004ea0 <puts+0xc>)
 8004e96:	4601      	mov	r1, r0
 8004e98:	6818      	ldr	r0, [r3, #0]
 8004e9a:	f7ff bf8d 	b.w	8004db8 <_puts_r>
 8004e9e:	bf00      	nop
 8004ea0:	20000010 	.word	0x20000010

08004ea4 <siprintf>:
 8004ea4:	b40e      	push	{r1, r2, r3}
 8004ea6:	b500      	push	{lr}
 8004ea8:	b09c      	sub	sp, #112	; 0x70
 8004eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8004eac:	9002      	str	r0, [sp, #8]
 8004eae:	9006      	str	r0, [sp, #24]
 8004eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004eb4:	4809      	ldr	r0, [pc, #36]	; (8004edc <siprintf+0x38>)
 8004eb6:	9107      	str	r1, [sp, #28]
 8004eb8:	9104      	str	r1, [sp, #16]
 8004eba:	4909      	ldr	r1, [pc, #36]	; (8004ee0 <siprintf+0x3c>)
 8004ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8004ec0:	9105      	str	r1, [sp, #20]
 8004ec2:	6800      	ldr	r0, [r0, #0]
 8004ec4:	9301      	str	r3, [sp, #4]
 8004ec6:	a902      	add	r1, sp, #8
 8004ec8:	f001 fe58 	bl	8006b7c <_svfiprintf_r>
 8004ecc:	9b02      	ldr	r3, [sp, #8]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	701a      	strb	r2, [r3, #0]
 8004ed2:	b01c      	add	sp, #112	; 0x70
 8004ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ed8:	b003      	add	sp, #12
 8004eda:	4770      	bx	lr
 8004edc:	20000010 	.word	0x20000010
 8004ee0:	ffff0208 	.word	0xffff0208

08004ee4 <__swbuf_r>:
 8004ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ee6:	460e      	mov	r6, r1
 8004ee8:	4614      	mov	r4, r2
 8004eea:	4605      	mov	r5, r0
 8004eec:	b118      	cbz	r0, 8004ef6 <__swbuf_r+0x12>
 8004eee:	6983      	ldr	r3, [r0, #24]
 8004ef0:	b90b      	cbnz	r3, 8004ef6 <__swbuf_r+0x12>
 8004ef2:	f001 f84d 	bl	8005f90 <__sinit>
 8004ef6:	4b21      	ldr	r3, [pc, #132]	; (8004f7c <__swbuf_r+0x98>)
 8004ef8:	429c      	cmp	r4, r3
 8004efa:	d12b      	bne.n	8004f54 <__swbuf_r+0x70>
 8004efc:	686c      	ldr	r4, [r5, #4]
 8004efe:	69a3      	ldr	r3, [r4, #24]
 8004f00:	60a3      	str	r3, [r4, #8]
 8004f02:	89a3      	ldrh	r3, [r4, #12]
 8004f04:	071a      	lsls	r2, r3, #28
 8004f06:	d52f      	bpl.n	8004f68 <__swbuf_r+0x84>
 8004f08:	6923      	ldr	r3, [r4, #16]
 8004f0a:	b36b      	cbz	r3, 8004f68 <__swbuf_r+0x84>
 8004f0c:	6923      	ldr	r3, [r4, #16]
 8004f0e:	6820      	ldr	r0, [r4, #0]
 8004f10:	1ac0      	subs	r0, r0, r3
 8004f12:	6963      	ldr	r3, [r4, #20]
 8004f14:	b2f6      	uxtb	r6, r6
 8004f16:	4283      	cmp	r3, r0
 8004f18:	4637      	mov	r7, r6
 8004f1a:	dc04      	bgt.n	8004f26 <__swbuf_r+0x42>
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	4628      	mov	r0, r5
 8004f20:	f000 ffa2 	bl	8005e68 <_fflush_r>
 8004f24:	bb30      	cbnz	r0, 8004f74 <__swbuf_r+0x90>
 8004f26:	68a3      	ldr	r3, [r4, #8]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	60a3      	str	r3, [r4, #8]
 8004f2c:	6823      	ldr	r3, [r4, #0]
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	6022      	str	r2, [r4, #0]
 8004f32:	701e      	strb	r6, [r3, #0]
 8004f34:	6963      	ldr	r3, [r4, #20]
 8004f36:	3001      	adds	r0, #1
 8004f38:	4283      	cmp	r3, r0
 8004f3a:	d004      	beq.n	8004f46 <__swbuf_r+0x62>
 8004f3c:	89a3      	ldrh	r3, [r4, #12]
 8004f3e:	07db      	lsls	r3, r3, #31
 8004f40:	d506      	bpl.n	8004f50 <__swbuf_r+0x6c>
 8004f42:	2e0a      	cmp	r6, #10
 8004f44:	d104      	bne.n	8004f50 <__swbuf_r+0x6c>
 8004f46:	4621      	mov	r1, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 ff8d 	bl	8005e68 <_fflush_r>
 8004f4e:	b988      	cbnz	r0, 8004f74 <__swbuf_r+0x90>
 8004f50:	4638      	mov	r0, r7
 8004f52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f54:	4b0a      	ldr	r3, [pc, #40]	; (8004f80 <__swbuf_r+0x9c>)
 8004f56:	429c      	cmp	r4, r3
 8004f58:	d101      	bne.n	8004f5e <__swbuf_r+0x7a>
 8004f5a:	68ac      	ldr	r4, [r5, #8]
 8004f5c:	e7cf      	b.n	8004efe <__swbuf_r+0x1a>
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <__swbuf_r+0xa0>)
 8004f60:	429c      	cmp	r4, r3
 8004f62:	bf08      	it	eq
 8004f64:	68ec      	ldreq	r4, [r5, #12]
 8004f66:	e7ca      	b.n	8004efe <__swbuf_r+0x1a>
 8004f68:	4621      	mov	r1, r4
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	f000 f80c 	bl	8004f88 <__swsetup_r>
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d0cb      	beq.n	8004f0c <__swbuf_r+0x28>
 8004f74:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8004f78:	e7ea      	b.n	8004f50 <__swbuf_r+0x6c>
 8004f7a:	bf00      	nop
 8004f7c:	0800752c 	.word	0x0800752c
 8004f80:	0800754c 	.word	0x0800754c
 8004f84:	0800750c 	.word	0x0800750c

08004f88 <__swsetup_r>:
 8004f88:	4b32      	ldr	r3, [pc, #200]	; (8005054 <__swsetup_r+0xcc>)
 8004f8a:	b570      	push	{r4, r5, r6, lr}
 8004f8c:	681d      	ldr	r5, [r3, #0]
 8004f8e:	4606      	mov	r6, r0
 8004f90:	460c      	mov	r4, r1
 8004f92:	b125      	cbz	r5, 8004f9e <__swsetup_r+0x16>
 8004f94:	69ab      	ldr	r3, [r5, #24]
 8004f96:	b913      	cbnz	r3, 8004f9e <__swsetup_r+0x16>
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 fff9 	bl	8005f90 <__sinit>
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <__swsetup_r+0xd0>)
 8004fa0:	429c      	cmp	r4, r3
 8004fa2:	d10f      	bne.n	8004fc4 <__swsetup_r+0x3c>
 8004fa4:	686c      	ldr	r4, [r5, #4]
 8004fa6:	89a3      	ldrh	r3, [r4, #12]
 8004fa8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004fac:	0719      	lsls	r1, r3, #28
 8004fae:	d42c      	bmi.n	800500a <__swsetup_r+0x82>
 8004fb0:	06dd      	lsls	r5, r3, #27
 8004fb2:	d411      	bmi.n	8004fd8 <__swsetup_r+0x50>
 8004fb4:	2309      	movs	r3, #9
 8004fb6:	6033      	str	r3, [r6, #0]
 8004fb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004fbc:	81a3      	strh	r3, [r4, #12]
 8004fbe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004fc2:	e03e      	b.n	8005042 <__swsetup_r+0xba>
 8004fc4:	4b25      	ldr	r3, [pc, #148]	; (800505c <__swsetup_r+0xd4>)
 8004fc6:	429c      	cmp	r4, r3
 8004fc8:	d101      	bne.n	8004fce <__swsetup_r+0x46>
 8004fca:	68ac      	ldr	r4, [r5, #8]
 8004fcc:	e7eb      	b.n	8004fa6 <__swsetup_r+0x1e>
 8004fce:	4b24      	ldr	r3, [pc, #144]	; (8005060 <__swsetup_r+0xd8>)
 8004fd0:	429c      	cmp	r4, r3
 8004fd2:	bf08      	it	eq
 8004fd4:	68ec      	ldreq	r4, [r5, #12]
 8004fd6:	e7e6      	b.n	8004fa6 <__swsetup_r+0x1e>
 8004fd8:	0758      	lsls	r0, r3, #29
 8004fda:	d512      	bpl.n	8005002 <__swsetup_r+0x7a>
 8004fdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004fde:	b141      	cbz	r1, 8004ff2 <__swsetup_r+0x6a>
 8004fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004fe4:	4299      	cmp	r1, r3
 8004fe6:	d002      	beq.n	8004fee <__swsetup_r+0x66>
 8004fe8:	4630      	mov	r0, r6
 8004fea:	f001 fc8b 	bl	8006904 <_free_r>
 8004fee:	2300      	movs	r3, #0
 8004ff0:	6363      	str	r3, [r4, #52]	; 0x34
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004ff8:	81a3      	strh	r3, [r4, #12]
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	6063      	str	r3, [r4, #4]
 8004ffe:	6923      	ldr	r3, [r4, #16]
 8005000:	6023      	str	r3, [r4, #0]
 8005002:	89a3      	ldrh	r3, [r4, #12]
 8005004:	f043 0308 	orr.w	r3, r3, #8
 8005008:	81a3      	strh	r3, [r4, #12]
 800500a:	6923      	ldr	r3, [r4, #16]
 800500c:	b94b      	cbnz	r3, 8005022 <__swsetup_r+0x9a>
 800500e:	89a3      	ldrh	r3, [r4, #12]
 8005010:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005014:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005018:	d003      	beq.n	8005022 <__swsetup_r+0x9a>
 800501a:	4621      	mov	r1, r4
 800501c:	4630      	mov	r0, r6
 800501e:	f001 f881 	bl	8006124 <__smakebuf_r>
 8005022:	89a0      	ldrh	r0, [r4, #12]
 8005024:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005028:	f010 0301 	ands.w	r3, r0, #1
 800502c:	d00a      	beq.n	8005044 <__swsetup_r+0xbc>
 800502e:	2300      	movs	r3, #0
 8005030:	60a3      	str	r3, [r4, #8]
 8005032:	6963      	ldr	r3, [r4, #20]
 8005034:	425b      	negs	r3, r3
 8005036:	61a3      	str	r3, [r4, #24]
 8005038:	6923      	ldr	r3, [r4, #16]
 800503a:	b943      	cbnz	r3, 800504e <__swsetup_r+0xc6>
 800503c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005040:	d1ba      	bne.n	8004fb8 <__swsetup_r+0x30>
 8005042:	bd70      	pop	{r4, r5, r6, pc}
 8005044:	0781      	lsls	r1, r0, #30
 8005046:	bf58      	it	pl
 8005048:	6963      	ldrpl	r3, [r4, #20]
 800504a:	60a3      	str	r3, [r4, #8]
 800504c:	e7f4      	b.n	8005038 <__swsetup_r+0xb0>
 800504e:	2000      	movs	r0, #0
 8005050:	e7f7      	b.n	8005042 <__swsetup_r+0xba>
 8005052:	bf00      	nop
 8005054:	20000010 	.word	0x20000010
 8005058:	0800752c 	.word	0x0800752c
 800505c:	0800754c 	.word	0x0800754c
 8005060:	0800750c 	.word	0x0800750c

08005064 <quorem>:
 8005064:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005068:	6903      	ldr	r3, [r0, #16]
 800506a:	690c      	ldr	r4, [r1, #16]
 800506c:	42a3      	cmp	r3, r4
 800506e:	4607      	mov	r7, r0
 8005070:	f2c0 8081 	blt.w	8005176 <quorem+0x112>
 8005074:	3c01      	subs	r4, #1
 8005076:	f101 0814 	add.w	r8, r1, #20
 800507a:	f100 0514 	add.w	r5, r0, #20
 800507e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005082:	9301      	str	r3, [sp, #4]
 8005084:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005088:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800508c:	3301      	adds	r3, #1
 800508e:	429a      	cmp	r2, r3
 8005090:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005094:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005098:	fbb2 f6f3 	udiv	r6, r2, r3
 800509c:	d331      	bcc.n	8005102 <quorem+0x9e>
 800509e:	f04f 0e00 	mov.w	lr, #0
 80050a2:	4640      	mov	r0, r8
 80050a4:	46ac      	mov	ip, r5
 80050a6:	46f2      	mov	sl, lr
 80050a8:	f850 2b04 	ldr.w	r2, [r0], #4
 80050ac:	b293      	uxth	r3, r2
 80050ae:	fb06 e303 	mla	r3, r6, r3, lr
 80050b2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	ebaa 0303 	sub.w	r3, sl, r3
 80050bc:	f8dc a000 	ldr.w	sl, [ip]
 80050c0:	0c12      	lsrs	r2, r2, #16
 80050c2:	fa13 f38a 	uxtah	r3, r3, sl
 80050c6:	fb06 e202 	mla	r2, r6, r2, lr
 80050ca:	9300      	str	r3, [sp, #0]
 80050cc:	9b00      	ldr	r3, [sp, #0]
 80050ce:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80050d2:	b292      	uxth	r2, r2
 80050d4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80050d8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80050dc:	f8bd 3000 	ldrh.w	r3, [sp]
 80050e0:	4581      	cmp	r9, r0
 80050e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80050e6:	f84c 3b04 	str.w	r3, [ip], #4
 80050ea:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80050ee:	d2db      	bcs.n	80050a8 <quorem+0x44>
 80050f0:	f855 300b 	ldr.w	r3, [r5, fp]
 80050f4:	b92b      	cbnz	r3, 8005102 <quorem+0x9e>
 80050f6:	9b01      	ldr	r3, [sp, #4]
 80050f8:	3b04      	subs	r3, #4
 80050fa:	429d      	cmp	r5, r3
 80050fc:	461a      	mov	r2, r3
 80050fe:	d32e      	bcc.n	800515e <quorem+0xfa>
 8005100:	613c      	str	r4, [r7, #16]
 8005102:	4638      	mov	r0, r7
 8005104:	f001 fae6 	bl	80066d4 <__mcmp>
 8005108:	2800      	cmp	r0, #0
 800510a:	db24      	blt.n	8005156 <quorem+0xf2>
 800510c:	3601      	adds	r6, #1
 800510e:	4628      	mov	r0, r5
 8005110:	f04f 0c00 	mov.w	ip, #0
 8005114:	f858 2b04 	ldr.w	r2, [r8], #4
 8005118:	f8d0 e000 	ldr.w	lr, [r0]
 800511c:	b293      	uxth	r3, r2
 800511e:	ebac 0303 	sub.w	r3, ip, r3
 8005122:	0c12      	lsrs	r2, r2, #16
 8005124:	fa13 f38e 	uxtah	r3, r3, lr
 8005128:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800512c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005130:	b29b      	uxth	r3, r3
 8005132:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005136:	45c1      	cmp	r9, r8
 8005138:	f840 3b04 	str.w	r3, [r0], #4
 800513c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005140:	d2e8      	bcs.n	8005114 <quorem+0xb0>
 8005142:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005146:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800514a:	b922      	cbnz	r2, 8005156 <quorem+0xf2>
 800514c:	3b04      	subs	r3, #4
 800514e:	429d      	cmp	r5, r3
 8005150:	461a      	mov	r2, r3
 8005152:	d30a      	bcc.n	800516a <quorem+0x106>
 8005154:	613c      	str	r4, [r7, #16]
 8005156:	4630      	mov	r0, r6
 8005158:	b003      	add	sp, #12
 800515a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800515e:	6812      	ldr	r2, [r2, #0]
 8005160:	3b04      	subs	r3, #4
 8005162:	2a00      	cmp	r2, #0
 8005164:	d1cc      	bne.n	8005100 <quorem+0x9c>
 8005166:	3c01      	subs	r4, #1
 8005168:	e7c7      	b.n	80050fa <quorem+0x96>
 800516a:	6812      	ldr	r2, [r2, #0]
 800516c:	3b04      	subs	r3, #4
 800516e:	2a00      	cmp	r2, #0
 8005170:	d1f0      	bne.n	8005154 <quorem+0xf0>
 8005172:	3c01      	subs	r4, #1
 8005174:	e7eb      	b.n	800514e <quorem+0xea>
 8005176:	2000      	movs	r0, #0
 8005178:	e7ee      	b.n	8005158 <quorem+0xf4>
 800517a:	0000      	movs	r0, r0
 800517c:	0000      	movs	r0, r0
	...

08005180 <_dtoa_r>:
 8005180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005184:	ed2d 8b04 	vpush	{d8-d9}
 8005188:	ec57 6b10 	vmov	r6, r7, d0
 800518c:	b093      	sub	sp, #76	; 0x4c
 800518e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8005190:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005194:	9106      	str	r1, [sp, #24]
 8005196:	ee10 aa10 	vmov	sl, s0
 800519a:	4604      	mov	r4, r0
 800519c:	9209      	str	r2, [sp, #36]	; 0x24
 800519e:	930c      	str	r3, [sp, #48]	; 0x30
 80051a0:	46bb      	mov	fp, r7
 80051a2:	b975      	cbnz	r5, 80051c2 <_dtoa_r+0x42>
 80051a4:	2010      	movs	r0, #16
 80051a6:	f000 fffd 	bl	80061a4 <malloc>
 80051aa:	4602      	mov	r2, r0
 80051ac:	6260      	str	r0, [r4, #36]	; 0x24
 80051ae:	b920      	cbnz	r0, 80051ba <_dtoa_r+0x3a>
 80051b0:	4ba7      	ldr	r3, [pc, #668]	; (8005450 <_dtoa_r+0x2d0>)
 80051b2:	21ea      	movs	r1, #234	; 0xea
 80051b4:	48a7      	ldr	r0, [pc, #668]	; (8005454 <_dtoa_r+0x2d4>)
 80051b6:	f001 ffa1 	bl	80070fc <__assert_func>
 80051ba:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80051be:	6005      	str	r5, [r0, #0]
 80051c0:	60c5      	str	r5, [r0, #12]
 80051c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051c4:	6819      	ldr	r1, [r3, #0]
 80051c6:	b151      	cbz	r1, 80051de <_dtoa_r+0x5e>
 80051c8:	685a      	ldr	r2, [r3, #4]
 80051ca:	604a      	str	r2, [r1, #4]
 80051cc:	2301      	movs	r3, #1
 80051ce:	4093      	lsls	r3, r2
 80051d0:	608b      	str	r3, [r1, #8]
 80051d2:	4620      	mov	r0, r4
 80051d4:	f001 f83c 	bl	8006250 <_Bfree>
 80051d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051da:	2200      	movs	r2, #0
 80051dc:	601a      	str	r2, [r3, #0]
 80051de:	1e3b      	subs	r3, r7, #0
 80051e0:	bfaa      	itet	ge
 80051e2:	2300      	movge	r3, #0
 80051e4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80051e8:	f8c8 3000 	strge.w	r3, [r8]
 80051ec:	4b9a      	ldr	r3, [pc, #616]	; (8005458 <_dtoa_r+0x2d8>)
 80051ee:	bfbc      	itt	lt
 80051f0:	2201      	movlt	r2, #1
 80051f2:	f8c8 2000 	strlt.w	r2, [r8]
 80051f6:	ea33 030b 	bics.w	r3, r3, fp
 80051fa:	d11b      	bne.n	8005234 <_dtoa_r+0xb4>
 80051fc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80051fe:	f242 730f 	movw	r3, #9999	; 0x270f
 8005202:	6013      	str	r3, [r2, #0]
 8005204:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005208:	4333      	orrs	r3, r6
 800520a:	f000 8592 	beq.w	8005d32 <_dtoa_r+0xbb2>
 800520e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005210:	b963      	cbnz	r3, 800522c <_dtoa_r+0xac>
 8005212:	4b92      	ldr	r3, [pc, #584]	; (800545c <_dtoa_r+0x2dc>)
 8005214:	e022      	b.n	800525c <_dtoa_r+0xdc>
 8005216:	4b92      	ldr	r3, [pc, #584]	; (8005460 <_dtoa_r+0x2e0>)
 8005218:	9301      	str	r3, [sp, #4]
 800521a:	3308      	adds	r3, #8
 800521c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800521e:	6013      	str	r3, [r2, #0]
 8005220:	9801      	ldr	r0, [sp, #4]
 8005222:	b013      	add	sp, #76	; 0x4c
 8005224:	ecbd 8b04 	vpop	{d8-d9}
 8005228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800522c:	4b8b      	ldr	r3, [pc, #556]	; (800545c <_dtoa_r+0x2dc>)
 800522e:	9301      	str	r3, [sp, #4]
 8005230:	3303      	adds	r3, #3
 8005232:	e7f3      	b.n	800521c <_dtoa_r+0x9c>
 8005234:	2200      	movs	r2, #0
 8005236:	2300      	movs	r3, #0
 8005238:	4650      	mov	r0, sl
 800523a:	4659      	mov	r1, fp
 800523c:	f7fb fc54 	bl	8000ae8 <__aeabi_dcmpeq>
 8005240:	ec4b ab19 	vmov	d9, sl, fp
 8005244:	4680      	mov	r8, r0
 8005246:	b158      	cbz	r0, 8005260 <_dtoa_r+0xe0>
 8005248:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800524a:	2301      	movs	r3, #1
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005250:	2b00      	cmp	r3, #0
 8005252:	f000 856b 	beq.w	8005d2c <_dtoa_r+0xbac>
 8005256:	4883      	ldr	r0, [pc, #524]	; (8005464 <_dtoa_r+0x2e4>)
 8005258:	6018      	str	r0, [r3, #0]
 800525a:	1e43      	subs	r3, r0, #1
 800525c:	9301      	str	r3, [sp, #4]
 800525e:	e7df      	b.n	8005220 <_dtoa_r+0xa0>
 8005260:	ec4b ab10 	vmov	d0, sl, fp
 8005264:	aa10      	add	r2, sp, #64	; 0x40
 8005266:	a911      	add	r1, sp, #68	; 0x44
 8005268:	4620      	mov	r0, r4
 800526a:	f001 fad9 	bl	8006820 <__d2b>
 800526e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8005272:	ee08 0a10 	vmov	s16, r0
 8005276:	2d00      	cmp	r5, #0
 8005278:	f000 8084 	beq.w	8005384 <_dtoa_r+0x204>
 800527c:	ee19 3a90 	vmov	r3, s19
 8005280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005284:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8005288:	4656      	mov	r6, sl
 800528a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800528e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005292:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8005296:	4b74      	ldr	r3, [pc, #464]	; (8005468 <_dtoa_r+0x2e8>)
 8005298:	2200      	movs	r2, #0
 800529a:	4630      	mov	r0, r6
 800529c:	4639      	mov	r1, r7
 800529e:	f7fb f803 	bl	80002a8 <__aeabi_dsub>
 80052a2:	a365      	add	r3, pc, #404	; (adr r3, 8005438 <_dtoa_r+0x2b8>)
 80052a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052a8:	f7fb f9b6 	bl	8000618 <__aeabi_dmul>
 80052ac:	a364      	add	r3, pc, #400	; (adr r3, 8005440 <_dtoa_r+0x2c0>)
 80052ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b2:	f7fa fffb 	bl	80002ac <__adddf3>
 80052b6:	4606      	mov	r6, r0
 80052b8:	4628      	mov	r0, r5
 80052ba:	460f      	mov	r7, r1
 80052bc:	f7fb f942 	bl	8000544 <__aeabi_i2d>
 80052c0:	a361      	add	r3, pc, #388	; (adr r3, 8005448 <_dtoa_r+0x2c8>)
 80052c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052c6:	f7fb f9a7 	bl	8000618 <__aeabi_dmul>
 80052ca:	4602      	mov	r2, r0
 80052cc:	460b      	mov	r3, r1
 80052ce:	4630      	mov	r0, r6
 80052d0:	4639      	mov	r1, r7
 80052d2:	f7fa ffeb 	bl	80002ac <__adddf3>
 80052d6:	4606      	mov	r6, r0
 80052d8:	460f      	mov	r7, r1
 80052da:	f7fb fc4d 	bl	8000b78 <__aeabi_d2iz>
 80052de:	2200      	movs	r2, #0
 80052e0:	9000      	str	r0, [sp, #0]
 80052e2:	2300      	movs	r3, #0
 80052e4:	4630      	mov	r0, r6
 80052e6:	4639      	mov	r1, r7
 80052e8:	f7fb fc08 	bl	8000afc <__aeabi_dcmplt>
 80052ec:	b150      	cbz	r0, 8005304 <_dtoa_r+0x184>
 80052ee:	9800      	ldr	r0, [sp, #0]
 80052f0:	f7fb f928 	bl	8000544 <__aeabi_i2d>
 80052f4:	4632      	mov	r2, r6
 80052f6:	463b      	mov	r3, r7
 80052f8:	f7fb fbf6 	bl	8000ae8 <__aeabi_dcmpeq>
 80052fc:	b910      	cbnz	r0, 8005304 <_dtoa_r+0x184>
 80052fe:	9b00      	ldr	r3, [sp, #0]
 8005300:	3b01      	subs	r3, #1
 8005302:	9300      	str	r3, [sp, #0]
 8005304:	9b00      	ldr	r3, [sp, #0]
 8005306:	2b16      	cmp	r3, #22
 8005308:	d85a      	bhi.n	80053c0 <_dtoa_r+0x240>
 800530a:	9a00      	ldr	r2, [sp, #0]
 800530c:	4b57      	ldr	r3, [pc, #348]	; (800546c <_dtoa_r+0x2ec>)
 800530e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005312:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005316:	ec51 0b19 	vmov	r0, r1, d9
 800531a:	f7fb fbef 	bl	8000afc <__aeabi_dcmplt>
 800531e:	2800      	cmp	r0, #0
 8005320:	d050      	beq.n	80053c4 <_dtoa_r+0x244>
 8005322:	9b00      	ldr	r3, [sp, #0]
 8005324:	3b01      	subs	r3, #1
 8005326:	9300      	str	r3, [sp, #0]
 8005328:	2300      	movs	r3, #0
 800532a:	930b      	str	r3, [sp, #44]	; 0x2c
 800532c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800532e:	1b5d      	subs	r5, r3, r5
 8005330:	1e6b      	subs	r3, r5, #1
 8005332:	9305      	str	r3, [sp, #20]
 8005334:	bf45      	ittet	mi
 8005336:	f1c5 0301 	rsbmi	r3, r5, #1
 800533a:	9304      	strmi	r3, [sp, #16]
 800533c:	2300      	movpl	r3, #0
 800533e:	2300      	movmi	r3, #0
 8005340:	bf4c      	ite	mi
 8005342:	9305      	strmi	r3, [sp, #20]
 8005344:	9304      	strpl	r3, [sp, #16]
 8005346:	9b00      	ldr	r3, [sp, #0]
 8005348:	2b00      	cmp	r3, #0
 800534a:	db3d      	blt.n	80053c8 <_dtoa_r+0x248>
 800534c:	9b05      	ldr	r3, [sp, #20]
 800534e:	9a00      	ldr	r2, [sp, #0]
 8005350:	920a      	str	r2, [sp, #40]	; 0x28
 8005352:	4413      	add	r3, r2
 8005354:	9305      	str	r3, [sp, #20]
 8005356:	2300      	movs	r3, #0
 8005358:	9307      	str	r3, [sp, #28]
 800535a:	9b06      	ldr	r3, [sp, #24]
 800535c:	2b09      	cmp	r3, #9
 800535e:	f200 8089 	bhi.w	8005474 <_dtoa_r+0x2f4>
 8005362:	2b05      	cmp	r3, #5
 8005364:	bfc4      	itt	gt
 8005366:	3b04      	subgt	r3, #4
 8005368:	9306      	strgt	r3, [sp, #24]
 800536a:	9b06      	ldr	r3, [sp, #24]
 800536c:	f1a3 0302 	sub.w	r3, r3, #2
 8005370:	bfcc      	ite	gt
 8005372:	2500      	movgt	r5, #0
 8005374:	2501      	movle	r5, #1
 8005376:	2b03      	cmp	r3, #3
 8005378:	f200 8087 	bhi.w	800548a <_dtoa_r+0x30a>
 800537c:	e8df f003 	tbb	[pc, r3]
 8005380:	59383a2d 	.word	0x59383a2d
 8005384:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005388:	441d      	add	r5, r3
 800538a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800538e:	2b20      	cmp	r3, #32
 8005390:	bfc1      	itttt	gt
 8005392:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005396:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800539a:	fa0b f303 	lslgt.w	r3, fp, r3
 800539e:	fa26 f000 	lsrgt.w	r0, r6, r0
 80053a2:	bfda      	itte	le
 80053a4:	f1c3 0320 	rsble	r3, r3, #32
 80053a8:	fa06 f003 	lslle.w	r0, r6, r3
 80053ac:	4318      	orrgt	r0, r3
 80053ae:	f7fb f8b9 	bl	8000524 <__aeabi_ui2d>
 80053b2:	2301      	movs	r3, #1
 80053b4:	4606      	mov	r6, r0
 80053b6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80053ba:	3d01      	subs	r5, #1
 80053bc:	930e      	str	r3, [sp, #56]	; 0x38
 80053be:	e76a      	b.n	8005296 <_dtoa_r+0x116>
 80053c0:	2301      	movs	r3, #1
 80053c2:	e7b2      	b.n	800532a <_dtoa_r+0x1aa>
 80053c4:	900b      	str	r0, [sp, #44]	; 0x2c
 80053c6:	e7b1      	b.n	800532c <_dtoa_r+0x1ac>
 80053c8:	9b04      	ldr	r3, [sp, #16]
 80053ca:	9a00      	ldr	r2, [sp, #0]
 80053cc:	1a9b      	subs	r3, r3, r2
 80053ce:	9304      	str	r3, [sp, #16]
 80053d0:	4253      	negs	r3, r2
 80053d2:	9307      	str	r3, [sp, #28]
 80053d4:	2300      	movs	r3, #0
 80053d6:	930a      	str	r3, [sp, #40]	; 0x28
 80053d8:	e7bf      	b.n	800535a <_dtoa_r+0x1da>
 80053da:	2300      	movs	r3, #0
 80053dc:	9308      	str	r3, [sp, #32]
 80053de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	dc55      	bgt.n	8005490 <_dtoa_r+0x310>
 80053e4:	2301      	movs	r3, #1
 80053e6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80053ea:	461a      	mov	r2, r3
 80053ec:	9209      	str	r2, [sp, #36]	; 0x24
 80053ee:	e00c      	b.n	800540a <_dtoa_r+0x28a>
 80053f0:	2301      	movs	r3, #1
 80053f2:	e7f3      	b.n	80053dc <_dtoa_r+0x25c>
 80053f4:	2300      	movs	r3, #0
 80053f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80053f8:	9308      	str	r3, [sp, #32]
 80053fa:	9b00      	ldr	r3, [sp, #0]
 80053fc:	4413      	add	r3, r2
 80053fe:	9302      	str	r3, [sp, #8]
 8005400:	3301      	adds	r3, #1
 8005402:	2b01      	cmp	r3, #1
 8005404:	9303      	str	r3, [sp, #12]
 8005406:	bfb8      	it	lt
 8005408:	2301      	movlt	r3, #1
 800540a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800540c:	2200      	movs	r2, #0
 800540e:	6042      	str	r2, [r0, #4]
 8005410:	2204      	movs	r2, #4
 8005412:	f102 0614 	add.w	r6, r2, #20
 8005416:	429e      	cmp	r6, r3
 8005418:	6841      	ldr	r1, [r0, #4]
 800541a:	d93d      	bls.n	8005498 <_dtoa_r+0x318>
 800541c:	4620      	mov	r0, r4
 800541e:	f000 fed7 	bl	80061d0 <_Balloc>
 8005422:	9001      	str	r0, [sp, #4]
 8005424:	2800      	cmp	r0, #0
 8005426:	d13b      	bne.n	80054a0 <_dtoa_r+0x320>
 8005428:	4b11      	ldr	r3, [pc, #68]	; (8005470 <_dtoa_r+0x2f0>)
 800542a:	4602      	mov	r2, r0
 800542c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005430:	e6c0      	b.n	80051b4 <_dtoa_r+0x34>
 8005432:	2301      	movs	r3, #1
 8005434:	e7df      	b.n	80053f6 <_dtoa_r+0x276>
 8005436:	bf00      	nop
 8005438:	636f4361 	.word	0x636f4361
 800543c:	3fd287a7 	.word	0x3fd287a7
 8005440:	8b60c8b3 	.word	0x8b60c8b3
 8005444:	3fc68a28 	.word	0x3fc68a28
 8005448:	509f79fb 	.word	0x509f79fb
 800544c:	3fd34413 	.word	0x3fd34413
 8005450:	08007489 	.word	0x08007489
 8005454:	080074a0 	.word	0x080074a0
 8005458:	7ff00000 	.word	0x7ff00000
 800545c:	08007485 	.word	0x08007485
 8005460:	0800747c 	.word	0x0800747c
 8005464:	08007459 	.word	0x08007459
 8005468:	3ff80000 	.word	0x3ff80000
 800546c:	080075f0 	.word	0x080075f0
 8005470:	080074fb 	.word	0x080074fb
 8005474:	2501      	movs	r5, #1
 8005476:	2300      	movs	r3, #0
 8005478:	9306      	str	r3, [sp, #24]
 800547a:	9508      	str	r5, [sp, #32]
 800547c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005480:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005484:	2200      	movs	r2, #0
 8005486:	2312      	movs	r3, #18
 8005488:	e7b0      	b.n	80053ec <_dtoa_r+0x26c>
 800548a:	2301      	movs	r3, #1
 800548c:	9308      	str	r3, [sp, #32]
 800548e:	e7f5      	b.n	800547c <_dtoa_r+0x2fc>
 8005490:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005492:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005496:	e7b8      	b.n	800540a <_dtoa_r+0x28a>
 8005498:	3101      	adds	r1, #1
 800549a:	6041      	str	r1, [r0, #4]
 800549c:	0052      	lsls	r2, r2, #1
 800549e:	e7b8      	b.n	8005412 <_dtoa_r+0x292>
 80054a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a2:	9a01      	ldr	r2, [sp, #4]
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	9b03      	ldr	r3, [sp, #12]
 80054a8:	2b0e      	cmp	r3, #14
 80054aa:	f200 809d 	bhi.w	80055e8 <_dtoa_r+0x468>
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	f000 809a 	beq.w	80055e8 <_dtoa_r+0x468>
 80054b4:	9b00      	ldr	r3, [sp, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	dd32      	ble.n	8005520 <_dtoa_r+0x3a0>
 80054ba:	4ab7      	ldr	r2, [pc, #732]	; (8005798 <_dtoa_r+0x618>)
 80054bc:	f003 030f 	and.w	r3, r3, #15
 80054c0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80054c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80054c8:	9b00      	ldr	r3, [sp, #0]
 80054ca:	05d8      	lsls	r0, r3, #23
 80054cc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80054d0:	d516      	bpl.n	8005500 <_dtoa_r+0x380>
 80054d2:	4bb2      	ldr	r3, [pc, #712]	; (800579c <_dtoa_r+0x61c>)
 80054d4:	ec51 0b19 	vmov	r0, r1, d9
 80054d8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80054dc:	f7fb f9c6 	bl	800086c <__aeabi_ddiv>
 80054e0:	f007 070f 	and.w	r7, r7, #15
 80054e4:	4682      	mov	sl, r0
 80054e6:	468b      	mov	fp, r1
 80054e8:	2503      	movs	r5, #3
 80054ea:	4eac      	ldr	r6, [pc, #688]	; (800579c <_dtoa_r+0x61c>)
 80054ec:	b957      	cbnz	r7, 8005504 <_dtoa_r+0x384>
 80054ee:	4642      	mov	r2, r8
 80054f0:	464b      	mov	r3, r9
 80054f2:	4650      	mov	r0, sl
 80054f4:	4659      	mov	r1, fp
 80054f6:	f7fb f9b9 	bl	800086c <__aeabi_ddiv>
 80054fa:	4682      	mov	sl, r0
 80054fc:	468b      	mov	fp, r1
 80054fe:	e028      	b.n	8005552 <_dtoa_r+0x3d2>
 8005500:	2502      	movs	r5, #2
 8005502:	e7f2      	b.n	80054ea <_dtoa_r+0x36a>
 8005504:	07f9      	lsls	r1, r7, #31
 8005506:	d508      	bpl.n	800551a <_dtoa_r+0x39a>
 8005508:	4640      	mov	r0, r8
 800550a:	4649      	mov	r1, r9
 800550c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005510:	f7fb f882 	bl	8000618 <__aeabi_dmul>
 8005514:	3501      	adds	r5, #1
 8005516:	4680      	mov	r8, r0
 8005518:	4689      	mov	r9, r1
 800551a:	107f      	asrs	r7, r7, #1
 800551c:	3608      	adds	r6, #8
 800551e:	e7e5      	b.n	80054ec <_dtoa_r+0x36c>
 8005520:	f000 809b 	beq.w	800565a <_dtoa_r+0x4da>
 8005524:	9b00      	ldr	r3, [sp, #0]
 8005526:	4f9d      	ldr	r7, [pc, #628]	; (800579c <_dtoa_r+0x61c>)
 8005528:	425e      	negs	r6, r3
 800552a:	4b9b      	ldr	r3, [pc, #620]	; (8005798 <_dtoa_r+0x618>)
 800552c:	f006 020f 	and.w	r2, r6, #15
 8005530:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005538:	ec51 0b19 	vmov	r0, r1, d9
 800553c:	f7fb f86c 	bl	8000618 <__aeabi_dmul>
 8005540:	1136      	asrs	r6, r6, #4
 8005542:	4682      	mov	sl, r0
 8005544:	468b      	mov	fp, r1
 8005546:	2300      	movs	r3, #0
 8005548:	2502      	movs	r5, #2
 800554a:	2e00      	cmp	r6, #0
 800554c:	d17a      	bne.n	8005644 <_dtoa_r+0x4c4>
 800554e:	2b00      	cmp	r3, #0
 8005550:	d1d3      	bne.n	80054fa <_dtoa_r+0x37a>
 8005552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005554:	2b00      	cmp	r3, #0
 8005556:	f000 8082 	beq.w	800565e <_dtoa_r+0x4de>
 800555a:	4b91      	ldr	r3, [pc, #580]	; (80057a0 <_dtoa_r+0x620>)
 800555c:	2200      	movs	r2, #0
 800555e:	4650      	mov	r0, sl
 8005560:	4659      	mov	r1, fp
 8005562:	f7fb facb 	bl	8000afc <__aeabi_dcmplt>
 8005566:	2800      	cmp	r0, #0
 8005568:	d079      	beq.n	800565e <_dtoa_r+0x4de>
 800556a:	9b03      	ldr	r3, [sp, #12]
 800556c:	2b00      	cmp	r3, #0
 800556e:	d076      	beq.n	800565e <_dtoa_r+0x4de>
 8005570:	9b02      	ldr	r3, [sp, #8]
 8005572:	2b00      	cmp	r3, #0
 8005574:	dd36      	ble.n	80055e4 <_dtoa_r+0x464>
 8005576:	9b00      	ldr	r3, [sp, #0]
 8005578:	4650      	mov	r0, sl
 800557a:	4659      	mov	r1, fp
 800557c:	1e5f      	subs	r7, r3, #1
 800557e:	2200      	movs	r2, #0
 8005580:	4b88      	ldr	r3, [pc, #544]	; (80057a4 <_dtoa_r+0x624>)
 8005582:	f7fb f849 	bl	8000618 <__aeabi_dmul>
 8005586:	9e02      	ldr	r6, [sp, #8]
 8005588:	4682      	mov	sl, r0
 800558a:	468b      	mov	fp, r1
 800558c:	3501      	adds	r5, #1
 800558e:	4628      	mov	r0, r5
 8005590:	f7fa ffd8 	bl	8000544 <__aeabi_i2d>
 8005594:	4652      	mov	r2, sl
 8005596:	465b      	mov	r3, fp
 8005598:	f7fb f83e 	bl	8000618 <__aeabi_dmul>
 800559c:	4b82      	ldr	r3, [pc, #520]	; (80057a8 <_dtoa_r+0x628>)
 800559e:	2200      	movs	r2, #0
 80055a0:	f7fa fe84 	bl	80002ac <__adddf3>
 80055a4:	46d0      	mov	r8, sl
 80055a6:	46d9      	mov	r9, fp
 80055a8:	4682      	mov	sl, r0
 80055aa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80055ae:	2e00      	cmp	r6, #0
 80055b0:	d158      	bne.n	8005664 <_dtoa_r+0x4e4>
 80055b2:	4b7e      	ldr	r3, [pc, #504]	; (80057ac <_dtoa_r+0x62c>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	4640      	mov	r0, r8
 80055b8:	4649      	mov	r1, r9
 80055ba:	f7fa fe75 	bl	80002a8 <__aeabi_dsub>
 80055be:	4652      	mov	r2, sl
 80055c0:	465b      	mov	r3, fp
 80055c2:	4680      	mov	r8, r0
 80055c4:	4689      	mov	r9, r1
 80055c6:	f7fb fab7 	bl	8000b38 <__aeabi_dcmpgt>
 80055ca:	2800      	cmp	r0, #0
 80055cc:	f040 8295 	bne.w	8005afa <_dtoa_r+0x97a>
 80055d0:	4652      	mov	r2, sl
 80055d2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80055d6:	4640      	mov	r0, r8
 80055d8:	4649      	mov	r1, r9
 80055da:	f7fb fa8f 	bl	8000afc <__aeabi_dcmplt>
 80055de:	2800      	cmp	r0, #0
 80055e0:	f040 8289 	bne.w	8005af6 <_dtoa_r+0x976>
 80055e4:	ec5b ab19 	vmov	sl, fp, d9
 80055e8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	f2c0 8148 	blt.w	8005880 <_dtoa_r+0x700>
 80055f0:	9a00      	ldr	r2, [sp, #0]
 80055f2:	2a0e      	cmp	r2, #14
 80055f4:	f300 8144 	bgt.w	8005880 <_dtoa_r+0x700>
 80055f8:	4b67      	ldr	r3, [pc, #412]	; (8005798 <_dtoa_r+0x618>)
 80055fa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055fe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005604:	2b00      	cmp	r3, #0
 8005606:	f280 80d5 	bge.w	80057b4 <_dtoa_r+0x634>
 800560a:	9b03      	ldr	r3, [sp, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	f300 80d1 	bgt.w	80057b4 <_dtoa_r+0x634>
 8005612:	f040 826f 	bne.w	8005af4 <_dtoa_r+0x974>
 8005616:	4b65      	ldr	r3, [pc, #404]	; (80057ac <_dtoa_r+0x62c>)
 8005618:	2200      	movs	r2, #0
 800561a:	4640      	mov	r0, r8
 800561c:	4649      	mov	r1, r9
 800561e:	f7fa fffb 	bl	8000618 <__aeabi_dmul>
 8005622:	4652      	mov	r2, sl
 8005624:	465b      	mov	r3, fp
 8005626:	f7fb fa7d 	bl	8000b24 <__aeabi_dcmpge>
 800562a:	9e03      	ldr	r6, [sp, #12]
 800562c:	4637      	mov	r7, r6
 800562e:	2800      	cmp	r0, #0
 8005630:	f040 8245 	bne.w	8005abe <_dtoa_r+0x93e>
 8005634:	9d01      	ldr	r5, [sp, #4]
 8005636:	2331      	movs	r3, #49	; 0x31
 8005638:	f805 3b01 	strb.w	r3, [r5], #1
 800563c:	9b00      	ldr	r3, [sp, #0]
 800563e:	3301      	adds	r3, #1
 8005640:	9300      	str	r3, [sp, #0]
 8005642:	e240      	b.n	8005ac6 <_dtoa_r+0x946>
 8005644:	07f2      	lsls	r2, r6, #31
 8005646:	d505      	bpl.n	8005654 <_dtoa_r+0x4d4>
 8005648:	e9d7 2300 	ldrd	r2, r3, [r7]
 800564c:	f7fa ffe4 	bl	8000618 <__aeabi_dmul>
 8005650:	3501      	adds	r5, #1
 8005652:	2301      	movs	r3, #1
 8005654:	1076      	asrs	r6, r6, #1
 8005656:	3708      	adds	r7, #8
 8005658:	e777      	b.n	800554a <_dtoa_r+0x3ca>
 800565a:	2502      	movs	r5, #2
 800565c:	e779      	b.n	8005552 <_dtoa_r+0x3d2>
 800565e:	9f00      	ldr	r7, [sp, #0]
 8005660:	9e03      	ldr	r6, [sp, #12]
 8005662:	e794      	b.n	800558e <_dtoa_r+0x40e>
 8005664:	9901      	ldr	r1, [sp, #4]
 8005666:	4b4c      	ldr	r3, [pc, #304]	; (8005798 <_dtoa_r+0x618>)
 8005668:	4431      	add	r1, r6
 800566a:	910d      	str	r1, [sp, #52]	; 0x34
 800566c:	9908      	ldr	r1, [sp, #32]
 800566e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005672:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005676:	2900      	cmp	r1, #0
 8005678:	d043      	beq.n	8005702 <_dtoa_r+0x582>
 800567a:	494d      	ldr	r1, [pc, #308]	; (80057b0 <_dtoa_r+0x630>)
 800567c:	2000      	movs	r0, #0
 800567e:	f7fb f8f5 	bl	800086c <__aeabi_ddiv>
 8005682:	4652      	mov	r2, sl
 8005684:	465b      	mov	r3, fp
 8005686:	f7fa fe0f 	bl	80002a8 <__aeabi_dsub>
 800568a:	9d01      	ldr	r5, [sp, #4]
 800568c:	4682      	mov	sl, r0
 800568e:	468b      	mov	fp, r1
 8005690:	4649      	mov	r1, r9
 8005692:	4640      	mov	r0, r8
 8005694:	f7fb fa70 	bl	8000b78 <__aeabi_d2iz>
 8005698:	4606      	mov	r6, r0
 800569a:	f7fa ff53 	bl	8000544 <__aeabi_i2d>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4640      	mov	r0, r8
 80056a4:	4649      	mov	r1, r9
 80056a6:	f7fa fdff 	bl	80002a8 <__aeabi_dsub>
 80056aa:	3630      	adds	r6, #48	; 0x30
 80056ac:	f805 6b01 	strb.w	r6, [r5], #1
 80056b0:	4652      	mov	r2, sl
 80056b2:	465b      	mov	r3, fp
 80056b4:	4680      	mov	r8, r0
 80056b6:	4689      	mov	r9, r1
 80056b8:	f7fb fa20 	bl	8000afc <__aeabi_dcmplt>
 80056bc:	2800      	cmp	r0, #0
 80056be:	d163      	bne.n	8005788 <_dtoa_r+0x608>
 80056c0:	4642      	mov	r2, r8
 80056c2:	464b      	mov	r3, r9
 80056c4:	4936      	ldr	r1, [pc, #216]	; (80057a0 <_dtoa_r+0x620>)
 80056c6:	2000      	movs	r0, #0
 80056c8:	f7fa fdee 	bl	80002a8 <__aeabi_dsub>
 80056cc:	4652      	mov	r2, sl
 80056ce:	465b      	mov	r3, fp
 80056d0:	f7fb fa14 	bl	8000afc <__aeabi_dcmplt>
 80056d4:	2800      	cmp	r0, #0
 80056d6:	f040 80b5 	bne.w	8005844 <_dtoa_r+0x6c4>
 80056da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80056dc:	429d      	cmp	r5, r3
 80056de:	d081      	beq.n	80055e4 <_dtoa_r+0x464>
 80056e0:	4b30      	ldr	r3, [pc, #192]	; (80057a4 <_dtoa_r+0x624>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	4650      	mov	r0, sl
 80056e6:	4659      	mov	r1, fp
 80056e8:	f7fa ff96 	bl	8000618 <__aeabi_dmul>
 80056ec:	4b2d      	ldr	r3, [pc, #180]	; (80057a4 <_dtoa_r+0x624>)
 80056ee:	4682      	mov	sl, r0
 80056f0:	468b      	mov	fp, r1
 80056f2:	4640      	mov	r0, r8
 80056f4:	4649      	mov	r1, r9
 80056f6:	2200      	movs	r2, #0
 80056f8:	f7fa ff8e 	bl	8000618 <__aeabi_dmul>
 80056fc:	4680      	mov	r8, r0
 80056fe:	4689      	mov	r9, r1
 8005700:	e7c6      	b.n	8005690 <_dtoa_r+0x510>
 8005702:	4650      	mov	r0, sl
 8005704:	4659      	mov	r1, fp
 8005706:	f7fa ff87 	bl	8000618 <__aeabi_dmul>
 800570a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800570c:	9d01      	ldr	r5, [sp, #4]
 800570e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005710:	4682      	mov	sl, r0
 8005712:	468b      	mov	fp, r1
 8005714:	4649      	mov	r1, r9
 8005716:	4640      	mov	r0, r8
 8005718:	f7fb fa2e 	bl	8000b78 <__aeabi_d2iz>
 800571c:	4606      	mov	r6, r0
 800571e:	f7fa ff11 	bl	8000544 <__aeabi_i2d>
 8005722:	3630      	adds	r6, #48	; 0x30
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4640      	mov	r0, r8
 800572a:	4649      	mov	r1, r9
 800572c:	f7fa fdbc 	bl	80002a8 <__aeabi_dsub>
 8005730:	f805 6b01 	strb.w	r6, [r5], #1
 8005734:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005736:	429d      	cmp	r5, r3
 8005738:	4680      	mov	r8, r0
 800573a:	4689      	mov	r9, r1
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	d124      	bne.n	800578c <_dtoa_r+0x60c>
 8005742:	4b1b      	ldr	r3, [pc, #108]	; (80057b0 <_dtoa_r+0x630>)
 8005744:	4650      	mov	r0, sl
 8005746:	4659      	mov	r1, fp
 8005748:	f7fa fdb0 	bl	80002ac <__adddf3>
 800574c:	4602      	mov	r2, r0
 800574e:	460b      	mov	r3, r1
 8005750:	4640      	mov	r0, r8
 8005752:	4649      	mov	r1, r9
 8005754:	f7fb f9f0 	bl	8000b38 <__aeabi_dcmpgt>
 8005758:	2800      	cmp	r0, #0
 800575a:	d173      	bne.n	8005844 <_dtoa_r+0x6c4>
 800575c:	4652      	mov	r2, sl
 800575e:	465b      	mov	r3, fp
 8005760:	4913      	ldr	r1, [pc, #76]	; (80057b0 <_dtoa_r+0x630>)
 8005762:	2000      	movs	r0, #0
 8005764:	f7fa fda0 	bl	80002a8 <__aeabi_dsub>
 8005768:	4602      	mov	r2, r0
 800576a:	460b      	mov	r3, r1
 800576c:	4640      	mov	r0, r8
 800576e:	4649      	mov	r1, r9
 8005770:	f7fb f9c4 	bl	8000afc <__aeabi_dcmplt>
 8005774:	2800      	cmp	r0, #0
 8005776:	f43f af35 	beq.w	80055e4 <_dtoa_r+0x464>
 800577a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800577c:	1e6b      	subs	r3, r5, #1
 800577e:	930f      	str	r3, [sp, #60]	; 0x3c
 8005780:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005784:	2b30      	cmp	r3, #48	; 0x30
 8005786:	d0f8      	beq.n	800577a <_dtoa_r+0x5fa>
 8005788:	9700      	str	r7, [sp, #0]
 800578a:	e049      	b.n	8005820 <_dtoa_r+0x6a0>
 800578c:	4b05      	ldr	r3, [pc, #20]	; (80057a4 <_dtoa_r+0x624>)
 800578e:	f7fa ff43 	bl	8000618 <__aeabi_dmul>
 8005792:	4680      	mov	r8, r0
 8005794:	4689      	mov	r9, r1
 8005796:	e7bd      	b.n	8005714 <_dtoa_r+0x594>
 8005798:	080075f0 	.word	0x080075f0
 800579c:	080075c8 	.word	0x080075c8
 80057a0:	3ff00000 	.word	0x3ff00000
 80057a4:	40240000 	.word	0x40240000
 80057a8:	401c0000 	.word	0x401c0000
 80057ac:	40140000 	.word	0x40140000
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	9d01      	ldr	r5, [sp, #4]
 80057b6:	4656      	mov	r6, sl
 80057b8:	465f      	mov	r7, fp
 80057ba:	4642      	mov	r2, r8
 80057bc:	464b      	mov	r3, r9
 80057be:	4630      	mov	r0, r6
 80057c0:	4639      	mov	r1, r7
 80057c2:	f7fb f853 	bl	800086c <__aeabi_ddiv>
 80057c6:	f7fb f9d7 	bl	8000b78 <__aeabi_d2iz>
 80057ca:	4682      	mov	sl, r0
 80057cc:	f7fa feba 	bl	8000544 <__aeabi_i2d>
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	f7fa ff20 	bl	8000618 <__aeabi_dmul>
 80057d8:	4602      	mov	r2, r0
 80057da:	460b      	mov	r3, r1
 80057dc:	4630      	mov	r0, r6
 80057de:	4639      	mov	r1, r7
 80057e0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80057e4:	f7fa fd60 	bl	80002a8 <__aeabi_dsub>
 80057e8:	f805 6b01 	strb.w	r6, [r5], #1
 80057ec:	9e01      	ldr	r6, [sp, #4]
 80057ee:	9f03      	ldr	r7, [sp, #12]
 80057f0:	1bae      	subs	r6, r5, r6
 80057f2:	42b7      	cmp	r7, r6
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	d135      	bne.n	8005866 <_dtoa_r+0x6e6>
 80057fa:	f7fa fd57 	bl	80002ac <__adddf3>
 80057fe:	4642      	mov	r2, r8
 8005800:	464b      	mov	r3, r9
 8005802:	4606      	mov	r6, r0
 8005804:	460f      	mov	r7, r1
 8005806:	f7fb f997 	bl	8000b38 <__aeabi_dcmpgt>
 800580a:	b9d0      	cbnz	r0, 8005842 <_dtoa_r+0x6c2>
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	4630      	mov	r0, r6
 8005812:	4639      	mov	r1, r7
 8005814:	f7fb f968 	bl	8000ae8 <__aeabi_dcmpeq>
 8005818:	b110      	cbz	r0, 8005820 <_dtoa_r+0x6a0>
 800581a:	f01a 0f01 	tst.w	sl, #1
 800581e:	d110      	bne.n	8005842 <_dtoa_r+0x6c2>
 8005820:	4620      	mov	r0, r4
 8005822:	ee18 1a10 	vmov	r1, s16
 8005826:	f000 fd13 	bl	8006250 <_Bfree>
 800582a:	2300      	movs	r3, #0
 800582c:	9800      	ldr	r0, [sp, #0]
 800582e:	702b      	strb	r3, [r5, #0]
 8005830:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005832:	3001      	adds	r0, #1
 8005834:	6018      	str	r0, [r3, #0]
 8005836:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005838:	2b00      	cmp	r3, #0
 800583a:	f43f acf1 	beq.w	8005220 <_dtoa_r+0xa0>
 800583e:	601d      	str	r5, [r3, #0]
 8005840:	e4ee      	b.n	8005220 <_dtoa_r+0xa0>
 8005842:	9f00      	ldr	r7, [sp, #0]
 8005844:	462b      	mov	r3, r5
 8005846:	461d      	mov	r5, r3
 8005848:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800584c:	2a39      	cmp	r2, #57	; 0x39
 800584e:	d106      	bne.n	800585e <_dtoa_r+0x6de>
 8005850:	9a01      	ldr	r2, [sp, #4]
 8005852:	429a      	cmp	r2, r3
 8005854:	d1f7      	bne.n	8005846 <_dtoa_r+0x6c6>
 8005856:	9901      	ldr	r1, [sp, #4]
 8005858:	2230      	movs	r2, #48	; 0x30
 800585a:	3701      	adds	r7, #1
 800585c:	700a      	strb	r2, [r1, #0]
 800585e:	781a      	ldrb	r2, [r3, #0]
 8005860:	3201      	adds	r2, #1
 8005862:	701a      	strb	r2, [r3, #0]
 8005864:	e790      	b.n	8005788 <_dtoa_r+0x608>
 8005866:	4ba6      	ldr	r3, [pc, #664]	; (8005b00 <_dtoa_r+0x980>)
 8005868:	2200      	movs	r2, #0
 800586a:	f7fa fed5 	bl	8000618 <__aeabi_dmul>
 800586e:	2200      	movs	r2, #0
 8005870:	2300      	movs	r3, #0
 8005872:	4606      	mov	r6, r0
 8005874:	460f      	mov	r7, r1
 8005876:	f7fb f937 	bl	8000ae8 <__aeabi_dcmpeq>
 800587a:	2800      	cmp	r0, #0
 800587c:	d09d      	beq.n	80057ba <_dtoa_r+0x63a>
 800587e:	e7cf      	b.n	8005820 <_dtoa_r+0x6a0>
 8005880:	9a08      	ldr	r2, [sp, #32]
 8005882:	2a00      	cmp	r2, #0
 8005884:	f000 80d7 	beq.w	8005a36 <_dtoa_r+0x8b6>
 8005888:	9a06      	ldr	r2, [sp, #24]
 800588a:	2a01      	cmp	r2, #1
 800588c:	f300 80ba 	bgt.w	8005a04 <_dtoa_r+0x884>
 8005890:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005892:	2a00      	cmp	r2, #0
 8005894:	f000 80b2 	beq.w	80059fc <_dtoa_r+0x87c>
 8005898:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800589c:	9e07      	ldr	r6, [sp, #28]
 800589e:	9d04      	ldr	r5, [sp, #16]
 80058a0:	9a04      	ldr	r2, [sp, #16]
 80058a2:	441a      	add	r2, r3
 80058a4:	9204      	str	r2, [sp, #16]
 80058a6:	9a05      	ldr	r2, [sp, #20]
 80058a8:	2101      	movs	r1, #1
 80058aa:	441a      	add	r2, r3
 80058ac:	4620      	mov	r0, r4
 80058ae:	9205      	str	r2, [sp, #20]
 80058b0:	f000 fd86 	bl	80063c0 <__i2b>
 80058b4:	4607      	mov	r7, r0
 80058b6:	2d00      	cmp	r5, #0
 80058b8:	dd0c      	ble.n	80058d4 <_dtoa_r+0x754>
 80058ba:	9b05      	ldr	r3, [sp, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	dd09      	ble.n	80058d4 <_dtoa_r+0x754>
 80058c0:	42ab      	cmp	r3, r5
 80058c2:	9a04      	ldr	r2, [sp, #16]
 80058c4:	bfa8      	it	ge
 80058c6:	462b      	movge	r3, r5
 80058c8:	1ad2      	subs	r2, r2, r3
 80058ca:	9204      	str	r2, [sp, #16]
 80058cc:	9a05      	ldr	r2, [sp, #20]
 80058ce:	1aed      	subs	r5, r5, r3
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	9305      	str	r3, [sp, #20]
 80058d4:	9b07      	ldr	r3, [sp, #28]
 80058d6:	b31b      	cbz	r3, 8005920 <_dtoa_r+0x7a0>
 80058d8:	9b08      	ldr	r3, [sp, #32]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f000 80af 	beq.w	8005a3e <_dtoa_r+0x8be>
 80058e0:	2e00      	cmp	r6, #0
 80058e2:	dd13      	ble.n	800590c <_dtoa_r+0x78c>
 80058e4:	4639      	mov	r1, r7
 80058e6:	4632      	mov	r2, r6
 80058e8:	4620      	mov	r0, r4
 80058ea:	f000 fe29 	bl	8006540 <__pow5mult>
 80058ee:	ee18 2a10 	vmov	r2, s16
 80058f2:	4601      	mov	r1, r0
 80058f4:	4607      	mov	r7, r0
 80058f6:	4620      	mov	r0, r4
 80058f8:	f000 fd78 	bl	80063ec <__multiply>
 80058fc:	ee18 1a10 	vmov	r1, s16
 8005900:	4680      	mov	r8, r0
 8005902:	4620      	mov	r0, r4
 8005904:	f000 fca4 	bl	8006250 <_Bfree>
 8005908:	ee08 8a10 	vmov	s16, r8
 800590c:	9b07      	ldr	r3, [sp, #28]
 800590e:	1b9a      	subs	r2, r3, r6
 8005910:	d006      	beq.n	8005920 <_dtoa_r+0x7a0>
 8005912:	ee18 1a10 	vmov	r1, s16
 8005916:	4620      	mov	r0, r4
 8005918:	f000 fe12 	bl	8006540 <__pow5mult>
 800591c:	ee08 0a10 	vmov	s16, r0
 8005920:	2101      	movs	r1, #1
 8005922:	4620      	mov	r0, r4
 8005924:	f000 fd4c 	bl	80063c0 <__i2b>
 8005928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800592a:	2b00      	cmp	r3, #0
 800592c:	4606      	mov	r6, r0
 800592e:	f340 8088 	ble.w	8005a42 <_dtoa_r+0x8c2>
 8005932:	461a      	mov	r2, r3
 8005934:	4601      	mov	r1, r0
 8005936:	4620      	mov	r0, r4
 8005938:	f000 fe02 	bl	8006540 <__pow5mult>
 800593c:	9b06      	ldr	r3, [sp, #24]
 800593e:	2b01      	cmp	r3, #1
 8005940:	4606      	mov	r6, r0
 8005942:	f340 8081 	ble.w	8005a48 <_dtoa_r+0x8c8>
 8005946:	f04f 0800 	mov.w	r8, #0
 800594a:	6933      	ldr	r3, [r6, #16]
 800594c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005950:	6918      	ldr	r0, [r3, #16]
 8005952:	f000 fce5 	bl	8006320 <__hi0bits>
 8005956:	f1c0 0020 	rsb	r0, r0, #32
 800595a:	9b05      	ldr	r3, [sp, #20]
 800595c:	4418      	add	r0, r3
 800595e:	f010 001f 	ands.w	r0, r0, #31
 8005962:	f000 8092 	beq.w	8005a8a <_dtoa_r+0x90a>
 8005966:	f1c0 0320 	rsb	r3, r0, #32
 800596a:	2b04      	cmp	r3, #4
 800596c:	f340 808a 	ble.w	8005a84 <_dtoa_r+0x904>
 8005970:	f1c0 001c 	rsb	r0, r0, #28
 8005974:	9b04      	ldr	r3, [sp, #16]
 8005976:	4403      	add	r3, r0
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	9b05      	ldr	r3, [sp, #20]
 800597c:	4403      	add	r3, r0
 800597e:	4405      	add	r5, r0
 8005980:	9305      	str	r3, [sp, #20]
 8005982:	9b04      	ldr	r3, [sp, #16]
 8005984:	2b00      	cmp	r3, #0
 8005986:	dd07      	ble.n	8005998 <_dtoa_r+0x818>
 8005988:	ee18 1a10 	vmov	r1, s16
 800598c:	461a      	mov	r2, r3
 800598e:	4620      	mov	r0, r4
 8005990:	f000 fe30 	bl	80065f4 <__lshift>
 8005994:	ee08 0a10 	vmov	s16, r0
 8005998:	9b05      	ldr	r3, [sp, #20]
 800599a:	2b00      	cmp	r3, #0
 800599c:	dd05      	ble.n	80059aa <_dtoa_r+0x82a>
 800599e:	4631      	mov	r1, r6
 80059a0:	461a      	mov	r2, r3
 80059a2:	4620      	mov	r0, r4
 80059a4:	f000 fe26 	bl	80065f4 <__lshift>
 80059a8:	4606      	mov	r6, r0
 80059aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d06e      	beq.n	8005a8e <_dtoa_r+0x90e>
 80059b0:	ee18 0a10 	vmov	r0, s16
 80059b4:	4631      	mov	r1, r6
 80059b6:	f000 fe8d 	bl	80066d4 <__mcmp>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	da67      	bge.n	8005a8e <_dtoa_r+0x90e>
 80059be:	9b00      	ldr	r3, [sp, #0]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	ee18 1a10 	vmov	r1, s16
 80059c6:	9300      	str	r3, [sp, #0]
 80059c8:	220a      	movs	r2, #10
 80059ca:	2300      	movs	r3, #0
 80059cc:	4620      	mov	r0, r4
 80059ce:	f000 fc61 	bl	8006294 <__multadd>
 80059d2:	9b08      	ldr	r3, [sp, #32]
 80059d4:	ee08 0a10 	vmov	s16, r0
 80059d8:	2b00      	cmp	r3, #0
 80059da:	f000 81b1 	beq.w	8005d40 <_dtoa_r+0xbc0>
 80059de:	2300      	movs	r3, #0
 80059e0:	4639      	mov	r1, r7
 80059e2:	220a      	movs	r2, #10
 80059e4:	4620      	mov	r0, r4
 80059e6:	f000 fc55 	bl	8006294 <__multadd>
 80059ea:	9b02      	ldr	r3, [sp, #8]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	4607      	mov	r7, r0
 80059f0:	f300 808e 	bgt.w	8005b10 <_dtoa_r+0x990>
 80059f4:	9b06      	ldr	r3, [sp, #24]
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	dc51      	bgt.n	8005a9e <_dtoa_r+0x91e>
 80059fa:	e089      	b.n	8005b10 <_dtoa_r+0x990>
 80059fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80059fe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005a02:	e74b      	b.n	800589c <_dtoa_r+0x71c>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	1e5e      	subs	r6, r3, #1
 8005a08:	9b07      	ldr	r3, [sp, #28]
 8005a0a:	42b3      	cmp	r3, r6
 8005a0c:	bfbf      	itttt	lt
 8005a0e:	9b07      	ldrlt	r3, [sp, #28]
 8005a10:	9607      	strlt	r6, [sp, #28]
 8005a12:	1af2      	sublt	r2, r6, r3
 8005a14:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005a16:	bfb6      	itet	lt
 8005a18:	189b      	addlt	r3, r3, r2
 8005a1a:	1b9e      	subge	r6, r3, r6
 8005a1c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005a1e:	9b03      	ldr	r3, [sp, #12]
 8005a20:	bfb8      	it	lt
 8005a22:	2600      	movlt	r6, #0
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	bfb7      	itett	lt
 8005a28:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005a2c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005a30:	1a9d      	sublt	r5, r3, r2
 8005a32:	2300      	movlt	r3, #0
 8005a34:	e734      	b.n	80058a0 <_dtoa_r+0x720>
 8005a36:	9e07      	ldr	r6, [sp, #28]
 8005a38:	9d04      	ldr	r5, [sp, #16]
 8005a3a:	9f08      	ldr	r7, [sp, #32]
 8005a3c:	e73b      	b.n	80058b6 <_dtoa_r+0x736>
 8005a3e:	9a07      	ldr	r2, [sp, #28]
 8005a40:	e767      	b.n	8005912 <_dtoa_r+0x792>
 8005a42:	9b06      	ldr	r3, [sp, #24]
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	dc18      	bgt.n	8005a7a <_dtoa_r+0x8fa>
 8005a48:	f1ba 0f00 	cmp.w	sl, #0
 8005a4c:	d115      	bne.n	8005a7a <_dtoa_r+0x8fa>
 8005a4e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a52:	b993      	cbnz	r3, 8005a7a <_dtoa_r+0x8fa>
 8005a54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005a58:	0d1b      	lsrs	r3, r3, #20
 8005a5a:	051b      	lsls	r3, r3, #20
 8005a5c:	b183      	cbz	r3, 8005a80 <_dtoa_r+0x900>
 8005a5e:	9b04      	ldr	r3, [sp, #16]
 8005a60:	3301      	adds	r3, #1
 8005a62:	9304      	str	r3, [sp, #16]
 8005a64:	9b05      	ldr	r3, [sp, #20]
 8005a66:	3301      	adds	r3, #1
 8005a68:	9305      	str	r3, [sp, #20]
 8005a6a:	f04f 0801 	mov.w	r8, #1
 8005a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f47f af6a 	bne.w	800594a <_dtoa_r+0x7ca>
 8005a76:	2001      	movs	r0, #1
 8005a78:	e76f      	b.n	800595a <_dtoa_r+0x7da>
 8005a7a:	f04f 0800 	mov.w	r8, #0
 8005a7e:	e7f6      	b.n	8005a6e <_dtoa_r+0x8ee>
 8005a80:	4698      	mov	r8, r3
 8005a82:	e7f4      	b.n	8005a6e <_dtoa_r+0x8ee>
 8005a84:	f43f af7d 	beq.w	8005982 <_dtoa_r+0x802>
 8005a88:	4618      	mov	r0, r3
 8005a8a:	301c      	adds	r0, #28
 8005a8c:	e772      	b.n	8005974 <_dtoa_r+0x7f4>
 8005a8e:	9b03      	ldr	r3, [sp, #12]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	dc37      	bgt.n	8005b04 <_dtoa_r+0x984>
 8005a94:	9b06      	ldr	r3, [sp, #24]
 8005a96:	2b02      	cmp	r3, #2
 8005a98:	dd34      	ble.n	8005b04 <_dtoa_r+0x984>
 8005a9a:	9b03      	ldr	r3, [sp, #12]
 8005a9c:	9302      	str	r3, [sp, #8]
 8005a9e:	9b02      	ldr	r3, [sp, #8]
 8005aa0:	b96b      	cbnz	r3, 8005abe <_dtoa_r+0x93e>
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	2205      	movs	r2, #5
 8005aa6:	4620      	mov	r0, r4
 8005aa8:	f000 fbf4 	bl	8006294 <__multadd>
 8005aac:	4601      	mov	r1, r0
 8005aae:	4606      	mov	r6, r0
 8005ab0:	ee18 0a10 	vmov	r0, s16
 8005ab4:	f000 fe0e 	bl	80066d4 <__mcmp>
 8005ab8:	2800      	cmp	r0, #0
 8005aba:	f73f adbb 	bgt.w	8005634 <_dtoa_r+0x4b4>
 8005abe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ac0:	9d01      	ldr	r5, [sp, #4]
 8005ac2:	43db      	mvns	r3, r3
 8005ac4:	9300      	str	r3, [sp, #0]
 8005ac6:	f04f 0800 	mov.w	r8, #0
 8005aca:	4631      	mov	r1, r6
 8005acc:	4620      	mov	r0, r4
 8005ace:	f000 fbbf 	bl	8006250 <_Bfree>
 8005ad2:	2f00      	cmp	r7, #0
 8005ad4:	f43f aea4 	beq.w	8005820 <_dtoa_r+0x6a0>
 8005ad8:	f1b8 0f00 	cmp.w	r8, #0
 8005adc:	d005      	beq.n	8005aea <_dtoa_r+0x96a>
 8005ade:	45b8      	cmp	r8, r7
 8005ae0:	d003      	beq.n	8005aea <_dtoa_r+0x96a>
 8005ae2:	4641      	mov	r1, r8
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	f000 fbb3 	bl	8006250 <_Bfree>
 8005aea:	4639      	mov	r1, r7
 8005aec:	4620      	mov	r0, r4
 8005aee:	f000 fbaf 	bl	8006250 <_Bfree>
 8005af2:	e695      	b.n	8005820 <_dtoa_r+0x6a0>
 8005af4:	2600      	movs	r6, #0
 8005af6:	4637      	mov	r7, r6
 8005af8:	e7e1      	b.n	8005abe <_dtoa_r+0x93e>
 8005afa:	9700      	str	r7, [sp, #0]
 8005afc:	4637      	mov	r7, r6
 8005afe:	e599      	b.n	8005634 <_dtoa_r+0x4b4>
 8005b00:	40240000 	.word	0x40240000
 8005b04:	9b08      	ldr	r3, [sp, #32]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	f000 80ca 	beq.w	8005ca0 <_dtoa_r+0xb20>
 8005b0c:	9b03      	ldr	r3, [sp, #12]
 8005b0e:	9302      	str	r3, [sp, #8]
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	dd05      	ble.n	8005b20 <_dtoa_r+0x9a0>
 8005b14:	4639      	mov	r1, r7
 8005b16:	462a      	mov	r2, r5
 8005b18:	4620      	mov	r0, r4
 8005b1a:	f000 fd6b 	bl	80065f4 <__lshift>
 8005b1e:	4607      	mov	r7, r0
 8005b20:	f1b8 0f00 	cmp.w	r8, #0
 8005b24:	d05b      	beq.n	8005bde <_dtoa_r+0xa5e>
 8005b26:	6879      	ldr	r1, [r7, #4]
 8005b28:	4620      	mov	r0, r4
 8005b2a:	f000 fb51 	bl	80061d0 <_Balloc>
 8005b2e:	4605      	mov	r5, r0
 8005b30:	b928      	cbnz	r0, 8005b3e <_dtoa_r+0x9be>
 8005b32:	4b87      	ldr	r3, [pc, #540]	; (8005d50 <_dtoa_r+0xbd0>)
 8005b34:	4602      	mov	r2, r0
 8005b36:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005b3a:	f7ff bb3b 	b.w	80051b4 <_dtoa_r+0x34>
 8005b3e:	693a      	ldr	r2, [r7, #16]
 8005b40:	3202      	adds	r2, #2
 8005b42:	0092      	lsls	r2, r2, #2
 8005b44:	f107 010c 	add.w	r1, r7, #12
 8005b48:	300c      	adds	r0, #12
 8005b4a:	f000 fb33 	bl	80061b4 <memcpy>
 8005b4e:	2201      	movs	r2, #1
 8005b50:	4629      	mov	r1, r5
 8005b52:	4620      	mov	r0, r4
 8005b54:	f000 fd4e 	bl	80065f4 <__lshift>
 8005b58:	9b01      	ldr	r3, [sp, #4]
 8005b5a:	f103 0901 	add.w	r9, r3, #1
 8005b5e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005b62:	4413      	add	r3, r2
 8005b64:	9305      	str	r3, [sp, #20]
 8005b66:	f00a 0301 	and.w	r3, sl, #1
 8005b6a:	46b8      	mov	r8, r7
 8005b6c:	9304      	str	r3, [sp, #16]
 8005b6e:	4607      	mov	r7, r0
 8005b70:	4631      	mov	r1, r6
 8005b72:	ee18 0a10 	vmov	r0, s16
 8005b76:	f7ff fa75 	bl	8005064 <quorem>
 8005b7a:	4641      	mov	r1, r8
 8005b7c:	9002      	str	r0, [sp, #8]
 8005b7e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005b82:	ee18 0a10 	vmov	r0, s16
 8005b86:	f000 fda5 	bl	80066d4 <__mcmp>
 8005b8a:	463a      	mov	r2, r7
 8005b8c:	9003      	str	r0, [sp, #12]
 8005b8e:	4631      	mov	r1, r6
 8005b90:	4620      	mov	r0, r4
 8005b92:	f000 fdbb 	bl	800670c <__mdiff>
 8005b96:	68c2      	ldr	r2, [r0, #12]
 8005b98:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005b9c:	4605      	mov	r5, r0
 8005b9e:	bb02      	cbnz	r2, 8005be2 <_dtoa_r+0xa62>
 8005ba0:	4601      	mov	r1, r0
 8005ba2:	ee18 0a10 	vmov	r0, s16
 8005ba6:	f000 fd95 	bl	80066d4 <__mcmp>
 8005baa:	4602      	mov	r2, r0
 8005bac:	4629      	mov	r1, r5
 8005bae:	4620      	mov	r0, r4
 8005bb0:	9207      	str	r2, [sp, #28]
 8005bb2:	f000 fb4d 	bl	8006250 <_Bfree>
 8005bb6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005bba:	ea43 0102 	orr.w	r1, r3, r2
 8005bbe:	9b04      	ldr	r3, [sp, #16]
 8005bc0:	430b      	orrs	r3, r1
 8005bc2:	464d      	mov	r5, r9
 8005bc4:	d10f      	bne.n	8005be6 <_dtoa_r+0xa66>
 8005bc6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005bca:	d02a      	beq.n	8005c22 <_dtoa_r+0xaa2>
 8005bcc:	9b03      	ldr	r3, [sp, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	dd02      	ble.n	8005bd8 <_dtoa_r+0xa58>
 8005bd2:	9b02      	ldr	r3, [sp, #8]
 8005bd4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005bd8:	f88b a000 	strb.w	sl, [fp]
 8005bdc:	e775      	b.n	8005aca <_dtoa_r+0x94a>
 8005bde:	4638      	mov	r0, r7
 8005be0:	e7ba      	b.n	8005b58 <_dtoa_r+0x9d8>
 8005be2:	2201      	movs	r2, #1
 8005be4:	e7e2      	b.n	8005bac <_dtoa_r+0xa2c>
 8005be6:	9b03      	ldr	r3, [sp, #12]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	db04      	blt.n	8005bf6 <_dtoa_r+0xa76>
 8005bec:	9906      	ldr	r1, [sp, #24]
 8005bee:	430b      	orrs	r3, r1
 8005bf0:	9904      	ldr	r1, [sp, #16]
 8005bf2:	430b      	orrs	r3, r1
 8005bf4:	d122      	bne.n	8005c3c <_dtoa_r+0xabc>
 8005bf6:	2a00      	cmp	r2, #0
 8005bf8:	ddee      	ble.n	8005bd8 <_dtoa_r+0xa58>
 8005bfa:	ee18 1a10 	vmov	r1, s16
 8005bfe:	2201      	movs	r2, #1
 8005c00:	4620      	mov	r0, r4
 8005c02:	f000 fcf7 	bl	80065f4 <__lshift>
 8005c06:	4631      	mov	r1, r6
 8005c08:	ee08 0a10 	vmov	s16, r0
 8005c0c:	f000 fd62 	bl	80066d4 <__mcmp>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	dc03      	bgt.n	8005c1c <_dtoa_r+0xa9c>
 8005c14:	d1e0      	bne.n	8005bd8 <_dtoa_r+0xa58>
 8005c16:	f01a 0f01 	tst.w	sl, #1
 8005c1a:	d0dd      	beq.n	8005bd8 <_dtoa_r+0xa58>
 8005c1c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c20:	d1d7      	bne.n	8005bd2 <_dtoa_r+0xa52>
 8005c22:	2339      	movs	r3, #57	; 0x39
 8005c24:	f88b 3000 	strb.w	r3, [fp]
 8005c28:	462b      	mov	r3, r5
 8005c2a:	461d      	mov	r5, r3
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005c32:	2a39      	cmp	r2, #57	; 0x39
 8005c34:	d071      	beq.n	8005d1a <_dtoa_r+0xb9a>
 8005c36:	3201      	adds	r2, #1
 8005c38:	701a      	strb	r2, [r3, #0]
 8005c3a:	e746      	b.n	8005aca <_dtoa_r+0x94a>
 8005c3c:	2a00      	cmp	r2, #0
 8005c3e:	dd07      	ble.n	8005c50 <_dtoa_r+0xad0>
 8005c40:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005c44:	d0ed      	beq.n	8005c22 <_dtoa_r+0xaa2>
 8005c46:	f10a 0301 	add.w	r3, sl, #1
 8005c4a:	f88b 3000 	strb.w	r3, [fp]
 8005c4e:	e73c      	b.n	8005aca <_dtoa_r+0x94a>
 8005c50:	9b05      	ldr	r3, [sp, #20]
 8005c52:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005c56:	4599      	cmp	r9, r3
 8005c58:	d047      	beq.n	8005cea <_dtoa_r+0xb6a>
 8005c5a:	ee18 1a10 	vmov	r1, s16
 8005c5e:	2300      	movs	r3, #0
 8005c60:	220a      	movs	r2, #10
 8005c62:	4620      	mov	r0, r4
 8005c64:	f000 fb16 	bl	8006294 <__multadd>
 8005c68:	45b8      	cmp	r8, r7
 8005c6a:	ee08 0a10 	vmov	s16, r0
 8005c6e:	f04f 0300 	mov.w	r3, #0
 8005c72:	f04f 020a 	mov.w	r2, #10
 8005c76:	4641      	mov	r1, r8
 8005c78:	4620      	mov	r0, r4
 8005c7a:	d106      	bne.n	8005c8a <_dtoa_r+0xb0a>
 8005c7c:	f000 fb0a 	bl	8006294 <__multadd>
 8005c80:	4680      	mov	r8, r0
 8005c82:	4607      	mov	r7, r0
 8005c84:	f109 0901 	add.w	r9, r9, #1
 8005c88:	e772      	b.n	8005b70 <_dtoa_r+0x9f0>
 8005c8a:	f000 fb03 	bl	8006294 <__multadd>
 8005c8e:	4639      	mov	r1, r7
 8005c90:	4680      	mov	r8, r0
 8005c92:	2300      	movs	r3, #0
 8005c94:	220a      	movs	r2, #10
 8005c96:	4620      	mov	r0, r4
 8005c98:	f000 fafc 	bl	8006294 <__multadd>
 8005c9c:	4607      	mov	r7, r0
 8005c9e:	e7f1      	b.n	8005c84 <_dtoa_r+0xb04>
 8005ca0:	9b03      	ldr	r3, [sp, #12]
 8005ca2:	9302      	str	r3, [sp, #8]
 8005ca4:	9d01      	ldr	r5, [sp, #4]
 8005ca6:	ee18 0a10 	vmov	r0, s16
 8005caa:	4631      	mov	r1, r6
 8005cac:	f7ff f9da 	bl	8005064 <quorem>
 8005cb0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005cb4:	9b01      	ldr	r3, [sp, #4]
 8005cb6:	f805 ab01 	strb.w	sl, [r5], #1
 8005cba:	1aea      	subs	r2, r5, r3
 8005cbc:	9b02      	ldr	r3, [sp, #8]
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	dd09      	ble.n	8005cd6 <_dtoa_r+0xb56>
 8005cc2:	ee18 1a10 	vmov	r1, s16
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	220a      	movs	r2, #10
 8005cca:	4620      	mov	r0, r4
 8005ccc:	f000 fae2 	bl	8006294 <__multadd>
 8005cd0:	ee08 0a10 	vmov	s16, r0
 8005cd4:	e7e7      	b.n	8005ca6 <_dtoa_r+0xb26>
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	bfc8      	it	gt
 8005cdc:	461d      	movgt	r5, r3
 8005cde:	9b01      	ldr	r3, [sp, #4]
 8005ce0:	bfd8      	it	le
 8005ce2:	2501      	movle	r5, #1
 8005ce4:	441d      	add	r5, r3
 8005ce6:	f04f 0800 	mov.w	r8, #0
 8005cea:	ee18 1a10 	vmov	r1, s16
 8005cee:	2201      	movs	r2, #1
 8005cf0:	4620      	mov	r0, r4
 8005cf2:	f000 fc7f 	bl	80065f4 <__lshift>
 8005cf6:	4631      	mov	r1, r6
 8005cf8:	ee08 0a10 	vmov	s16, r0
 8005cfc:	f000 fcea 	bl	80066d4 <__mcmp>
 8005d00:	2800      	cmp	r0, #0
 8005d02:	dc91      	bgt.n	8005c28 <_dtoa_r+0xaa8>
 8005d04:	d102      	bne.n	8005d0c <_dtoa_r+0xb8c>
 8005d06:	f01a 0f01 	tst.w	sl, #1
 8005d0a:	d18d      	bne.n	8005c28 <_dtoa_r+0xaa8>
 8005d0c:	462b      	mov	r3, r5
 8005d0e:	461d      	mov	r5, r3
 8005d10:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d14:	2a30      	cmp	r2, #48	; 0x30
 8005d16:	d0fa      	beq.n	8005d0e <_dtoa_r+0xb8e>
 8005d18:	e6d7      	b.n	8005aca <_dtoa_r+0x94a>
 8005d1a:	9a01      	ldr	r2, [sp, #4]
 8005d1c:	429a      	cmp	r2, r3
 8005d1e:	d184      	bne.n	8005c2a <_dtoa_r+0xaaa>
 8005d20:	9b00      	ldr	r3, [sp, #0]
 8005d22:	3301      	adds	r3, #1
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	2331      	movs	r3, #49	; 0x31
 8005d28:	7013      	strb	r3, [r2, #0]
 8005d2a:	e6ce      	b.n	8005aca <_dtoa_r+0x94a>
 8005d2c:	4b09      	ldr	r3, [pc, #36]	; (8005d54 <_dtoa_r+0xbd4>)
 8005d2e:	f7ff ba95 	b.w	800525c <_dtoa_r+0xdc>
 8005d32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	f47f aa6e 	bne.w	8005216 <_dtoa_r+0x96>
 8005d3a:	4b07      	ldr	r3, [pc, #28]	; (8005d58 <_dtoa_r+0xbd8>)
 8005d3c:	f7ff ba8e 	b.w	800525c <_dtoa_r+0xdc>
 8005d40:	9b02      	ldr	r3, [sp, #8]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	dcae      	bgt.n	8005ca4 <_dtoa_r+0xb24>
 8005d46:	9b06      	ldr	r3, [sp, #24]
 8005d48:	2b02      	cmp	r3, #2
 8005d4a:	f73f aea8 	bgt.w	8005a9e <_dtoa_r+0x91e>
 8005d4e:	e7a9      	b.n	8005ca4 <_dtoa_r+0xb24>
 8005d50:	080074fb 	.word	0x080074fb
 8005d54:	08007458 	.word	0x08007458
 8005d58:	0800747c 	.word	0x0800747c

08005d5c <__sflush_r>:
 8005d5c:	898a      	ldrh	r2, [r1, #12]
 8005d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d62:	4605      	mov	r5, r0
 8005d64:	0710      	lsls	r0, r2, #28
 8005d66:	460c      	mov	r4, r1
 8005d68:	d458      	bmi.n	8005e1c <__sflush_r+0xc0>
 8005d6a:	684b      	ldr	r3, [r1, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	dc05      	bgt.n	8005d7c <__sflush_r+0x20>
 8005d70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	dc02      	bgt.n	8005d7c <__sflush_r+0x20>
 8005d76:	2000      	movs	r0, #0
 8005d78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005d7e:	2e00      	cmp	r6, #0
 8005d80:	d0f9      	beq.n	8005d76 <__sflush_r+0x1a>
 8005d82:	2300      	movs	r3, #0
 8005d84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005d88:	682f      	ldr	r7, [r5, #0]
 8005d8a:	602b      	str	r3, [r5, #0]
 8005d8c:	d032      	beq.n	8005df4 <__sflush_r+0x98>
 8005d8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005d90:	89a3      	ldrh	r3, [r4, #12]
 8005d92:	075a      	lsls	r2, r3, #29
 8005d94:	d505      	bpl.n	8005da2 <__sflush_r+0x46>
 8005d96:	6863      	ldr	r3, [r4, #4]
 8005d98:	1ac0      	subs	r0, r0, r3
 8005d9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005d9c:	b10b      	cbz	r3, 8005da2 <__sflush_r+0x46>
 8005d9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005da0:	1ac0      	subs	r0, r0, r3
 8005da2:	2300      	movs	r3, #0
 8005da4:	4602      	mov	r2, r0
 8005da6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005da8:	6a21      	ldr	r1, [r4, #32]
 8005daa:	4628      	mov	r0, r5
 8005dac:	47b0      	blx	r6
 8005dae:	1c43      	adds	r3, r0, #1
 8005db0:	89a3      	ldrh	r3, [r4, #12]
 8005db2:	d106      	bne.n	8005dc2 <__sflush_r+0x66>
 8005db4:	6829      	ldr	r1, [r5, #0]
 8005db6:	291d      	cmp	r1, #29
 8005db8:	d82c      	bhi.n	8005e14 <__sflush_r+0xb8>
 8005dba:	4a2a      	ldr	r2, [pc, #168]	; (8005e64 <__sflush_r+0x108>)
 8005dbc:	40ca      	lsrs	r2, r1
 8005dbe:	07d6      	lsls	r6, r2, #31
 8005dc0:	d528      	bpl.n	8005e14 <__sflush_r+0xb8>
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	6062      	str	r2, [r4, #4]
 8005dc6:	04d9      	lsls	r1, r3, #19
 8005dc8:	6922      	ldr	r2, [r4, #16]
 8005dca:	6022      	str	r2, [r4, #0]
 8005dcc:	d504      	bpl.n	8005dd8 <__sflush_r+0x7c>
 8005dce:	1c42      	adds	r2, r0, #1
 8005dd0:	d101      	bne.n	8005dd6 <__sflush_r+0x7a>
 8005dd2:	682b      	ldr	r3, [r5, #0]
 8005dd4:	b903      	cbnz	r3, 8005dd8 <__sflush_r+0x7c>
 8005dd6:	6560      	str	r0, [r4, #84]	; 0x54
 8005dd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005dda:	602f      	str	r7, [r5, #0]
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d0ca      	beq.n	8005d76 <__sflush_r+0x1a>
 8005de0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005de4:	4299      	cmp	r1, r3
 8005de6:	d002      	beq.n	8005dee <__sflush_r+0x92>
 8005de8:	4628      	mov	r0, r5
 8005dea:	f000 fd8b 	bl	8006904 <_free_r>
 8005dee:	2000      	movs	r0, #0
 8005df0:	6360      	str	r0, [r4, #52]	; 0x34
 8005df2:	e7c1      	b.n	8005d78 <__sflush_r+0x1c>
 8005df4:	6a21      	ldr	r1, [r4, #32]
 8005df6:	2301      	movs	r3, #1
 8005df8:	4628      	mov	r0, r5
 8005dfa:	47b0      	blx	r6
 8005dfc:	1c41      	adds	r1, r0, #1
 8005dfe:	d1c7      	bne.n	8005d90 <__sflush_r+0x34>
 8005e00:	682b      	ldr	r3, [r5, #0]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d0c4      	beq.n	8005d90 <__sflush_r+0x34>
 8005e06:	2b1d      	cmp	r3, #29
 8005e08:	d001      	beq.n	8005e0e <__sflush_r+0xb2>
 8005e0a:	2b16      	cmp	r3, #22
 8005e0c:	d101      	bne.n	8005e12 <__sflush_r+0xb6>
 8005e0e:	602f      	str	r7, [r5, #0]
 8005e10:	e7b1      	b.n	8005d76 <__sflush_r+0x1a>
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e18:	81a3      	strh	r3, [r4, #12]
 8005e1a:	e7ad      	b.n	8005d78 <__sflush_r+0x1c>
 8005e1c:	690f      	ldr	r7, [r1, #16]
 8005e1e:	2f00      	cmp	r7, #0
 8005e20:	d0a9      	beq.n	8005d76 <__sflush_r+0x1a>
 8005e22:	0793      	lsls	r3, r2, #30
 8005e24:	680e      	ldr	r6, [r1, #0]
 8005e26:	bf08      	it	eq
 8005e28:	694b      	ldreq	r3, [r1, #20]
 8005e2a:	600f      	str	r7, [r1, #0]
 8005e2c:	bf18      	it	ne
 8005e2e:	2300      	movne	r3, #0
 8005e30:	eba6 0807 	sub.w	r8, r6, r7
 8005e34:	608b      	str	r3, [r1, #8]
 8005e36:	f1b8 0f00 	cmp.w	r8, #0
 8005e3a:	dd9c      	ble.n	8005d76 <__sflush_r+0x1a>
 8005e3c:	6a21      	ldr	r1, [r4, #32]
 8005e3e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005e40:	4643      	mov	r3, r8
 8005e42:	463a      	mov	r2, r7
 8005e44:	4628      	mov	r0, r5
 8005e46:	47b0      	blx	r6
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	dc06      	bgt.n	8005e5a <__sflush_r+0xfe>
 8005e4c:	89a3      	ldrh	r3, [r4, #12]
 8005e4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e52:	81a3      	strh	r3, [r4, #12]
 8005e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e58:	e78e      	b.n	8005d78 <__sflush_r+0x1c>
 8005e5a:	4407      	add	r7, r0
 8005e5c:	eba8 0800 	sub.w	r8, r8, r0
 8005e60:	e7e9      	b.n	8005e36 <__sflush_r+0xda>
 8005e62:	bf00      	nop
 8005e64:	20400001 	.word	0x20400001

08005e68 <_fflush_r>:
 8005e68:	b538      	push	{r3, r4, r5, lr}
 8005e6a:	690b      	ldr	r3, [r1, #16]
 8005e6c:	4605      	mov	r5, r0
 8005e6e:	460c      	mov	r4, r1
 8005e70:	b913      	cbnz	r3, 8005e78 <_fflush_r+0x10>
 8005e72:	2500      	movs	r5, #0
 8005e74:	4628      	mov	r0, r5
 8005e76:	bd38      	pop	{r3, r4, r5, pc}
 8005e78:	b118      	cbz	r0, 8005e82 <_fflush_r+0x1a>
 8005e7a:	6983      	ldr	r3, [r0, #24]
 8005e7c:	b90b      	cbnz	r3, 8005e82 <_fflush_r+0x1a>
 8005e7e:	f000 f887 	bl	8005f90 <__sinit>
 8005e82:	4b14      	ldr	r3, [pc, #80]	; (8005ed4 <_fflush_r+0x6c>)
 8005e84:	429c      	cmp	r4, r3
 8005e86:	d11b      	bne.n	8005ec0 <_fflush_r+0x58>
 8005e88:	686c      	ldr	r4, [r5, #4]
 8005e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d0ef      	beq.n	8005e72 <_fflush_r+0xa>
 8005e92:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005e94:	07d0      	lsls	r0, r2, #31
 8005e96:	d404      	bmi.n	8005ea2 <_fflush_r+0x3a>
 8005e98:	0599      	lsls	r1, r3, #22
 8005e9a:	d402      	bmi.n	8005ea2 <_fflush_r+0x3a>
 8005e9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005e9e:	f000 f91a 	bl	80060d6 <__retarget_lock_acquire_recursive>
 8005ea2:	4628      	mov	r0, r5
 8005ea4:	4621      	mov	r1, r4
 8005ea6:	f7ff ff59 	bl	8005d5c <__sflush_r>
 8005eaa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005eac:	07da      	lsls	r2, r3, #31
 8005eae:	4605      	mov	r5, r0
 8005eb0:	d4e0      	bmi.n	8005e74 <_fflush_r+0xc>
 8005eb2:	89a3      	ldrh	r3, [r4, #12]
 8005eb4:	059b      	lsls	r3, r3, #22
 8005eb6:	d4dd      	bmi.n	8005e74 <_fflush_r+0xc>
 8005eb8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005eba:	f000 f90d 	bl	80060d8 <__retarget_lock_release_recursive>
 8005ebe:	e7d9      	b.n	8005e74 <_fflush_r+0xc>
 8005ec0:	4b05      	ldr	r3, [pc, #20]	; (8005ed8 <_fflush_r+0x70>)
 8005ec2:	429c      	cmp	r4, r3
 8005ec4:	d101      	bne.n	8005eca <_fflush_r+0x62>
 8005ec6:	68ac      	ldr	r4, [r5, #8]
 8005ec8:	e7df      	b.n	8005e8a <_fflush_r+0x22>
 8005eca:	4b04      	ldr	r3, [pc, #16]	; (8005edc <_fflush_r+0x74>)
 8005ecc:	429c      	cmp	r4, r3
 8005ece:	bf08      	it	eq
 8005ed0:	68ec      	ldreq	r4, [r5, #12]
 8005ed2:	e7da      	b.n	8005e8a <_fflush_r+0x22>
 8005ed4:	0800752c 	.word	0x0800752c
 8005ed8:	0800754c 	.word	0x0800754c
 8005edc:	0800750c 	.word	0x0800750c

08005ee0 <std>:
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	4604      	mov	r4, r0
 8005ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8005eea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005eee:	6083      	str	r3, [r0, #8]
 8005ef0:	8181      	strh	r1, [r0, #12]
 8005ef2:	6643      	str	r3, [r0, #100]	; 0x64
 8005ef4:	81c2      	strh	r2, [r0, #14]
 8005ef6:	6183      	str	r3, [r0, #24]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	2208      	movs	r2, #8
 8005efc:	305c      	adds	r0, #92	; 0x5c
 8005efe:	f7fe fad1 	bl	80044a4 <memset>
 8005f02:	4b05      	ldr	r3, [pc, #20]	; (8005f18 <std+0x38>)
 8005f04:	6263      	str	r3, [r4, #36]	; 0x24
 8005f06:	4b05      	ldr	r3, [pc, #20]	; (8005f1c <std+0x3c>)
 8005f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8005f0a:	4b05      	ldr	r3, [pc, #20]	; (8005f20 <std+0x40>)
 8005f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005f0e:	4b05      	ldr	r3, [pc, #20]	; (8005f24 <std+0x44>)
 8005f10:	6224      	str	r4, [r4, #32]
 8005f12:	6323      	str	r3, [r4, #48]	; 0x30
 8005f14:	bd10      	pop	{r4, pc}
 8005f16:	bf00      	nop
 8005f18:	08007051 	.word	0x08007051
 8005f1c:	08007073 	.word	0x08007073
 8005f20:	080070ab 	.word	0x080070ab
 8005f24:	080070cf 	.word	0x080070cf

08005f28 <_cleanup_r>:
 8005f28:	4901      	ldr	r1, [pc, #4]	; (8005f30 <_cleanup_r+0x8>)
 8005f2a:	f000 b8af 	b.w	800608c <_fwalk_reent>
 8005f2e:	bf00      	nop
 8005f30:	08005e69 	.word	0x08005e69

08005f34 <__sfmoreglue>:
 8005f34:	b570      	push	{r4, r5, r6, lr}
 8005f36:	2268      	movs	r2, #104	; 0x68
 8005f38:	1e4d      	subs	r5, r1, #1
 8005f3a:	4355      	muls	r5, r2
 8005f3c:	460e      	mov	r6, r1
 8005f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005f42:	f000 fd4b 	bl	80069dc <_malloc_r>
 8005f46:	4604      	mov	r4, r0
 8005f48:	b140      	cbz	r0, 8005f5c <__sfmoreglue+0x28>
 8005f4a:	2100      	movs	r1, #0
 8005f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8005f50:	300c      	adds	r0, #12
 8005f52:	60a0      	str	r0, [r4, #8]
 8005f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005f58:	f7fe faa4 	bl	80044a4 <memset>
 8005f5c:	4620      	mov	r0, r4
 8005f5e:	bd70      	pop	{r4, r5, r6, pc}

08005f60 <__sfp_lock_acquire>:
 8005f60:	4801      	ldr	r0, [pc, #4]	; (8005f68 <__sfp_lock_acquire+0x8>)
 8005f62:	f000 b8b8 	b.w	80060d6 <__retarget_lock_acquire_recursive>
 8005f66:	bf00      	nop
 8005f68:	20000309 	.word	0x20000309

08005f6c <__sfp_lock_release>:
 8005f6c:	4801      	ldr	r0, [pc, #4]	; (8005f74 <__sfp_lock_release+0x8>)
 8005f6e:	f000 b8b3 	b.w	80060d8 <__retarget_lock_release_recursive>
 8005f72:	bf00      	nop
 8005f74:	20000309 	.word	0x20000309

08005f78 <__sinit_lock_acquire>:
 8005f78:	4801      	ldr	r0, [pc, #4]	; (8005f80 <__sinit_lock_acquire+0x8>)
 8005f7a:	f000 b8ac 	b.w	80060d6 <__retarget_lock_acquire_recursive>
 8005f7e:	bf00      	nop
 8005f80:	2000030a 	.word	0x2000030a

08005f84 <__sinit_lock_release>:
 8005f84:	4801      	ldr	r0, [pc, #4]	; (8005f8c <__sinit_lock_release+0x8>)
 8005f86:	f000 b8a7 	b.w	80060d8 <__retarget_lock_release_recursive>
 8005f8a:	bf00      	nop
 8005f8c:	2000030a 	.word	0x2000030a

08005f90 <__sinit>:
 8005f90:	b510      	push	{r4, lr}
 8005f92:	4604      	mov	r4, r0
 8005f94:	f7ff fff0 	bl	8005f78 <__sinit_lock_acquire>
 8005f98:	69a3      	ldr	r3, [r4, #24]
 8005f9a:	b11b      	cbz	r3, 8005fa4 <__sinit+0x14>
 8005f9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fa0:	f7ff bff0 	b.w	8005f84 <__sinit_lock_release>
 8005fa4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8005fa8:	6523      	str	r3, [r4, #80]	; 0x50
 8005faa:	4b13      	ldr	r3, [pc, #76]	; (8005ff8 <__sinit+0x68>)
 8005fac:	4a13      	ldr	r2, [pc, #76]	; (8005ffc <__sinit+0x6c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	62a2      	str	r2, [r4, #40]	; 0x28
 8005fb2:	42a3      	cmp	r3, r4
 8005fb4:	bf04      	itt	eq
 8005fb6:	2301      	moveq	r3, #1
 8005fb8:	61a3      	streq	r3, [r4, #24]
 8005fba:	4620      	mov	r0, r4
 8005fbc:	f000 f820 	bl	8006000 <__sfp>
 8005fc0:	6060      	str	r0, [r4, #4]
 8005fc2:	4620      	mov	r0, r4
 8005fc4:	f000 f81c 	bl	8006000 <__sfp>
 8005fc8:	60a0      	str	r0, [r4, #8]
 8005fca:	4620      	mov	r0, r4
 8005fcc:	f000 f818 	bl	8006000 <__sfp>
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	60e0      	str	r0, [r4, #12]
 8005fd4:	2104      	movs	r1, #4
 8005fd6:	6860      	ldr	r0, [r4, #4]
 8005fd8:	f7ff ff82 	bl	8005ee0 <std>
 8005fdc:	68a0      	ldr	r0, [r4, #8]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	2109      	movs	r1, #9
 8005fe2:	f7ff ff7d 	bl	8005ee0 <std>
 8005fe6:	68e0      	ldr	r0, [r4, #12]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	2112      	movs	r1, #18
 8005fec:	f7ff ff78 	bl	8005ee0 <std>
 8005ff0:	2301      	movs	r3, #1
 8005ff2:	61a3      	str	r3, [r4, #24]
 8005ff4:	e7d2      	b.n	8005f9c <__sinit+0xc>
 8005ff6:	bf00      	nop
 8005ff8:	08007444 	.word	0x08007444
 8005ffc:	08005f29 	.word	0x08005f29

08006000 <__sfp>:
 8006000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006002:	4607      	mov	r7, r0
 8006004:	f7ff ffac 	bl	8005f60 <__sfp_lock_acquire>
 8006008:	4b1e      	ldr	r3, [pc, #120]	; (8006084 <__sfp+0x84>)
 800600a:	681e      	ldr	r6, [r3, #0]
 800600c:	69b3      	ldr	r3, [r6, #24]
 800600e:	b913      	cbnz	r3, 8006016 <__sfp+0x16>
 8006010:	4630      	mov	r0, r6
 8006012:	f7ff ffbd 	bl	8005f90 <__sinit>
 8006016:	3648      	adds	r6, #72	; 0x48
 8006018:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800601c:	3b01      	subs	r3, #1
 800601e:	d503      	bpl.n	8006028 <__sfp+0x28>
 8006020:	6833      	ldr	r3, [r6, #0]
 8006022:	b30b      	cbz	r3, 8006068 <__sfp+0x68>
 8006024:	6836      	ldr	r6, [r6, #0]
 8006026:	e7f7      	b.n	8006018 <__sfp+0x18>
 8006028:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800602c:	b9d5      	cbnz	r5, 8006064 <__sfp+0x64>
 800602e:	4b16      	ldr	r3, [pc, #88]	; (8006088 <__sfp+0x88>)
 8006030:	60e3      	str	r3, [r4, #12]
 8006032:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006036:	6665      	str	r5, [r4, #100]	; 0x64
 8006038:	f000 f84c 	bl	80060d4 <__retarget_lock_init_recursive>
 800603c:	f7ff ff96 	bl	8005f6c <__sfp_lock_release>
 8006040:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006044:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006048:	6025      	str	r5, [r4, #0]
 800604a:	61a5      	str	r5, [r4, #24]
 800604c:	2208      	movs	r2, #8
 800604e:	4629      	mov	r1, r5
 8006050:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006054:	f7fe fa26 	bl	80044a4 <memset>
 8006058:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800605c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006060:	4620      	mov	r0, r4
 8006062:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006064:	3468      	adds	r4, #104	; 0x68
 8006066:	e7d9      	b.n	800601c <__sfp+0x1c>
 8006068:	2104      	movs	r1, #4
 800606a:	4638      	mov	r0, r7
 800606c:	f7ff ff62 	bl	8005f34 <__sfmoreglue>
 8006070:	4604      	mov	r4, r0
 8006072:	6030      	str	r0, [r6, #0]
 8006074:	2800      	cmp	r0, #0
 8006076:	d1d5      	bne.n	8006024 <__sfp+0x24>
 8006078:	f7ff ff78 	bl	8005f6c <__sfp_lock_release>
 800607c:	230c      	movs	r3, #12
 800607e:	603b      	str	r3, [r7, #0]
 8006080:	e7ee      	b.n	8006060 <__sfp+0x60>
 8006082:	bf00      	nop
 8006084:	08007444 	.word	0x08007444
 8006088:	ffff0001 	.word	0xffff0001

0800608c <_fwalk_reent>:
 800608c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006090:	4606      	mov	r6, r0
 8006092:	4688      	mov	r8, r1
 8006094:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006098:	2700      	movs	r7, #0
 800609a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800609e:	f1b9 0901 	subs.w	r9, r9, #1
 80060a2:	d505      	bpl.n	80060b0 <_fwalk_reent+0x24>
 80060a4:	6824      	ldr	r4, [r4, #0]
 80060a6:	2c00      	cmp	r4, #0
 80060a8:	d1f7      	bne.n	800609a <_fwalk_reent+0xe>
 80060aa:	4638      	mov	r0, r7
 80060ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80060b0:	89ab      	ldrh	r3, [r5, #12]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d907      	bls.n	80060c6 <_fwalk_reent+0x3a>
 80060b6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80060ba:	3301      	adds	r3, #1
 80060bc:	d003      	beq.n	80060c6 <_fwalk_reent+0x3a>
 80060be:	4629      	mov	r1, r5
 80060c0:	4630      	mov	r0, r6
 80060c2:	47c0      	blx	r8
 80060c4:	4307      	orrs	r7, r0
 80060c6:	3568      	adds	r5, #104	; 0x68
 80060c8:	e7e9      	b.n	800609e <_fwalk_reent+0x12>
	...

080060cc <_localeconv_r>:
 80060cc:	4800      	ldr	r0, [pc, #0]	; (80060d0 <_localeconv_r+0x4>)
 80060ce:	4770      	bx	lr
 80060d0:	20000164 	.word	0x20000164

080060d4 <__retarget_lock_init_recursive>:
 80060d4:	4770      	bx	lr

080060d6 <__retarget_lock_acquire_recursive>:
 80060d6:	4770      	bx	lr

080060d8 <__retarget_lock_release_recursive>:
 80060d8:	4770      	bx	lr

080060da <__swhatbuf_r>:
 80060da:	b570      	push	{r4, r5, r6, lr}
 80060dc:	460e      	mov	r6, r1
 80060de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060e2:	2900      	cmp	r1, #0
 80060e4:	b096      	sub	sp, #88	; 0x58
 80060e6:	4614      	mov	r4, r2
 80060e8:	461d      	mov	r5, r3
 80060ea:	da08      	bge.n	80060fe <__swhatbuf_r+0x24>
 80060ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80060f0:	2200      	movs	r2, #0
 80060f2:	602a      	str	r2, [r5, #0]
 80060f4:	061a      	lsls	r2, r3, #24
 80060f6:	d410      	bmi.n	800611a <__swhatbuf_r+0x40>
 80060f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80060fc:	e00e      	b.n	800611c <__swhatbuf_r+0x42>
 80060fe:	466a      	mov	r2, sp
 8006100:	f001 f83c 	bl	800717c <_fstat_r>
 8006104:	2800      	cmp	r0, #0
 8006106:	dbf1      	blt.n	80060ec <__swhatbuf_r+0x12>
 8006108:	9a01      	ldr	r2, [sp, #4]
 800610a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800610e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006112:	425a      	negs	r2, r3
 8006114:	415a      	adcs	r2, r3
 8006116:	602a      	str	r2, [r5, #0]
 8006118:	e7ee      	b.n	80060f8 <__swhatbuf_r+0x1e>
 800611a:	2340      	movs	r3, #64	; 0x40
 800611c:	2000      	movs	r0, #0
 800611e:	6023      	str	r3, [r4, #0]
 8006120:	b016      	add	sp, #88	; 0x58
 8006122:	bd70      	pop	{r4, r5, r6, pc}

08006124 <__smakebuf_r>:
 8006124:	898b      	ldrh	r3, [r1, #12]
 8006126:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006128:	079d      	lsls	r5, r3, #30
 800612a:	4606      	mov	r6, r0
 800612c:	460c      	mov	r4, r1
 800612e:	d507      	bpl.n	8006140 <__smakebuf_r+0x1c>
 8006130:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006134:	6023      	str	r3, [r4, #0]
 8006136:	6123      	str	r3, [r4, #16]
 8006138:	2301      	movs	r3, #1
 800613a:	6163      	str	r3, [r4, #20]
 800613c:	b002      	add	sp, #8
 800613e:	bd70      	pop	{r4, r5, r6, pc}
 8006140:	ab01      	add	r3, sp, #4
 8006142:	466a      	mov	r2, sp
 8006144:	f7ff ffc9 	bl	80060da <__swhatbuf_r>
 8006148:	9900      	ldr	r1, [sp, #0]
 800614a:	4605      	mov	r5, r0
 800614c:	4630      	mov	r0, r6
 800614e:	f000 fc45 	bl	80069dc <_malloc_r>
 8006152:	b948      	cbnz	r0, 8006168 <__smakebuf_r+0x44>
 8006154:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006158:	059a      	lsls	r2, r3, #22
 800615a:	d4ef      	bmi.n	800613c <__smakebuf_r+0x18>
 800615c:	f023 0303 	bic.w	r3, r3, #3
 8006160:	f043 0302 	orr.w	r3, r3, #2
 8006164:	81a3      	strh	r3, [r4, #12]
 8006166:	e7e3      	b.n	8006130 <__smakebuf_r+0xc>
 8006168:	4b0d      	ldr	r3, [pc, #52]	; (80061a0 <__smakebuf_r+0x7c>)
 800616a:	62b3      	str	r3, [r6, #40]	; 0x28
 800616c:	89a3      	ldrh	r3, [r4, #12]
 800616e:	6020      	str	r0, [r4, #0]
 8006170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006174:	81a3      	strh	r3, [r4, #12]
 8006176:	9b00      	ldr	r3, [sp, #0]
 8006178:	6163      	str	r3, [r4, #20]
 800617a:	9b01      	ldr	r3, [sp, #4]
 800617c:	6120      	str	r0, [r4, #16]
 800617e:	b15b      	cbz	r3, 8006198 <__smakebuf_r+0x74>
 8006180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006184:	4630      	mov	r0, r6
 8006186:	f001 f80b 	bl	80071a0 <_isatty_r>
 800618a:	b128      	cbz	r0, 8006198 <__smakebuf_r+0x74>
 800618c:	89a3      	ldrh	r3, [r4, #12]
 800618e:	f023 0303 	bic.w	r3, r3, #3
 8006192:	f043 0301 	orr.w	r3, r3, #1
 8006196:	81a3      	strh	r3, [r4, #12]
 8006198:	89a0      	ldrh	r0, [r4, #12]
 800619a:	4305      	orrs	r5, r0
 800619c:	81a5      	strh	r5, [r4, #12]
 800619e:	e7cd      	b.n	800613c <__smakebuf_r+0x18>
 80061a0:	08005f29 	.word	0x08005f29

080061a4 <malloc>:
 80061a4:	4b02      	ldr	r3, [pc, #8]	; (80061b0 <malloc+0xc>)
 80061a6:	4601      	mov	r1, r0
 80061a8:	6818      	ldr	r0, [r3, #0]
 80061aa:	f000 bc17 	b.w	80069dc <_malloc_r>
 80061ae:	bf00      	nop
 80061b0:	20000010 	.word	0x20000010

080061b4 <memcpy>:
 80061b4:	440a      	add	r2, r1
 80061b6:	4291      	cmp	r1, r2
 80061b8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80061bc:	d100      	bne.n	80061c0 <memcpy+0xc>
 80061be:	4770      	bx	lr
 80061c0:	b510      	push	{r4, lr}
 80061c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80061c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80061ca:	4291      	cmp	r1, r2
 80061cc:	d1f9      	bne.n	80061c2 <memcpy+0xe>
 80061ce:	bd10      	pop	{r4, pc}

080061d0 <_Balloc>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80061d4:	4604      	mov	r4, r0
 80061d6:	460d      	mov	r5, r1
 80061d8:	b976      	cbnz	r6, 80061f8 <_Balloc+0x28>
 80061da:	2010      	movs	r0, #16
 80061dc:	f7ff ffe2 	bl	80061a4 <malloc>
 80061e0:	4602      	mov	r2, r0
 80061e2:	6260      	str	r0, [r4, #36]	; 0x24
 80061e4:	b920      	cbnz	r0, 80061f0 <_Balloc+0x20>
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <_Balloc+0x78>)
 80061e8:	4818      	ldr	r0, [pc, #96]	; (800624c <_Balloc+0x7c>)
 80061ea:	2166      	movs	r1, #102	; 0x66
 80061ec:	f000 ff86 	bl	80070fc <__assert_func>
 80061f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80061f4:	6006      	str	r6, [r0, #0]
 80061f6:	60c6      	str	r6, [r0, #12]
 80061f8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80061fa:	68f3      	ldr	r3, [r6, #12]
 80061fc:	b183      	cbz	r3, 8006220 <_Balloc+0x50>
 80061fe:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006200:	68db      	ldr	r3, [r3, #12]
 8006202:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006206:	b9b8      	cbnz	r0, 8006238 <_Balloc+0x68>
 8006208:	2101      	movs	r1, #1
 800620a:	fa01 f605 	lsl.w	r6, r1, r5
 800620e:	1d72      	adds	r2, r6, #5
 8006210:	0092      	lsls	r2, r2, #2
 8006212:	4620      	mov	r0, r4
 8006214:	f000 fb60 	bl	80068d8 <_calloc_r>
 8006218:	b160      	cbz	r0, 8006234 <_Balloc+0x64>
 800621a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800621e:	e00e      	b.n	800623e <_Balloc+0x6e>
 8006220:	2221      	movs	r2, #33	; 0x21
 8006222:	2104      	movs	r1, #4
 8006224:	4620      	mov	r0, r4
 8006226:	f000 fb57 	bl	80068d8 <_calloc_r>
 800622a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800622c:	60f0      	str	r0, [r6, #12]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d1e4      	bne.n	80061fe <_Balloc+0x2e>
 8006234:	2000      	movs	r0, #0
 8006236:	bd70      	pop	{r4, r5, r6, pc}
 8006238:	6802      	ldr	r2, [r0, #0]
 800623a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800623e:	2300      	movs	r3, #0
 8006240:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006244:	e7f7      	b.n	8006236 <_Balloc+0x66>
 8006246:	bf00      	nop
 8006248:	08007489 	.word	0x08007489
 800624c:	0800756c 	.word	0x0800756c

08006250 <_Bfree>:
 8006250:	b570      	push	{r4, r5, r6, lr}
 8006252:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006254:	4605      	mov	r5, r0
 8006256:	460c      	mov	r4, r1
 8006258:	b976      	cbnz	r6, 8006278 <_Bfree+0x28>
 800625a:	2010      	movs	r0, #16
 800625c:	f7ff ffa2 	bl	80061a4 <malloc>
 8006260:	4602      	mov	r2, r0
 8006262:	6268      	str	r0, [r5, #36]	; 0x24
 8006264:	b920      	cbnz	r0, 8006270 <_Bfree+0x20>
 8006266:	4b09      	ldr	r3, [pc, #36]	; (800628c <_Bfree+0x3c>)
 8006268:	4809      	ldr	r0, [pc, #36]	; (8006290 <_Bfree+0x40>)
 800626a:	218a      	movs	r1, #138	; 0x8a
 800626c:	f000 ff46 	bl	80070fc <__assert_func>
 8006270:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006274:	6006      	str	r6, [r0, #0]
 8006276:	60c6      	str	r6, [r0, #12]
 8006278:	b13c      	cbz	r4, 800628a <_Bfree+0x3a>
 800627a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800627c:	6862      	ldr	r2, [r4, #4]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006284:	6021      	str	r1, [r4, #0]
 8006286:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800628a:	bd70      	pop	{r4, r5, r6, pc}
 800628c:	08007489 	.word	0x08007489
 8006290:	0800756c 	.word	0x0800756c

08006294 <__multadd>:
 8006294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006298:	690d      	ldr	r5, [r1, #16]
 800629a:	4607      	mov	r7, r0
 800629c:	460c      	mov	r4, r1
 800629e:	461e      	mov	r6, r3
 80062a0:	f101 0c14 	add.w	ip, r1, #20
 80062a4:	2000      	movs	r0, #0
 80062a6:	f8dc 3000 	ldr.w	r3, [ip]
 80062aa:	b299      	uxth	r1, r3
 80062ac:	fb02 6101 	mla	r1, r2, r1, r6
 80062b0:	0c1e      	lsrs	r6, r3, #16
 80062b2:	0c0b      	lsrs	r3, r1, #16
 80062b4:	fb02 3306 	mla	r3, r2, r6, r3
 80062b8:	b289      	uxth	r1, r1
 80062ba:	3001      	adds	r0, #1
 80062bc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80062c0:	4285      	cmp	r5, r0
 80062c2:	f84c 1b04 	str.w	r1, [ip], #4
 80062c6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80062ca:	dcec      	bgt.n	80062a6 <__multadd+0x12>
 80062cc:	b30e      	cbz	r6, 8006312 <__multadd+0x7e>
 80062ce:	68a3      	ldr	r3, [r4, #8]
 80062d0:	42ab      	cmp	r3, r5
 80062d2:	dc19      	bgt.n	8006308 <__multadd+0x74>
 80062d4:	6861      	ldr	r1, [r4, #4]
 80062d6:	4638      	mov	r0, r7
 80062d8:	3101      	adds	r1, #1
 80062da:	f7ff ff79 	bl	80061d0 <_Balloc>
 80062de:	4680      	mov	r8, r0
 80062e0:	b928      	cbnz	r0, 80062ee <__multadd+0x5a>
 80062e2:	4602      	mov	r2, r0
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <__multadd+0x84>)
 80062e6:	480d      	ldr	r0, [pc, #52]	; (800631c <__multadd+0x88>)
 80062e8:	21b5      	movs	r1, #181	; 0xb5
 80062ea:	f000 ff07 	bl	80070fc <__assert_func>
 80062ee:	6922      	ldr	r2, [r4, #16]
 80062f0:	3202      	adds	r2, #2
 80062f2:	f104 010c 	add.w	r1, r4, #12
 80062f6:	0092      	lsls	r2, r2, #2
 80062f8:	300c      	adds	r0, #12
 80062fa:	f7ff ff5b 	bl	80061b4 <memcpy>
 80062fe:	4621      	mov	r1, r4
 8006300:	4638      	mov	r0, r7
 8006302:	f7ff ffa5 	bl	8006250 <_Bfree>
 8006306:	4644      	mov	r4, r8
 8006308:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800630c:	3501      	adds	r5, #1
 800630e:	615e      	str	r6, [r3, #20]
 8006310:	6125      	str	r5, [r4, #16]
 8006312:	4620      	mov	r0, r4
 8006314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006318:	080074fb 	.word	0x080074fb
 800631c:	0800756c 	.word	0x0800756c

08006320 <__hi0bits>:
 8006320:	0c03      	lsrs	r3, r0, #16
 8006322:	041b      	lsls	r3, r3, #16
 8006324:	b9d3      	cbnz	r3, 800635c <__hi0bits+0x3c>
 8006326:	0400      	lsls	r0, r0, #16
 8006328:	2310      	movs	r3, #16
 800632a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800632e:	bf04      	itt	eq
 8006330:	0200      	lsleq	r0, r0, #8
 8006332:	3308      	addeq	r3, #8
 8006334:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006338:	bf04      	itt	eq
 800633a:	0100      	lsleq	r0, r0, #4
 800633c:	3304      	addeq	r3, #4
 800633e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8006342:	bf04      	itt	eq
 8006344:	0080      	lsleq	r0, r0, #2
 8006346:	3302      	addeq	r3, #2
 8006348:	2800      	cmp	r0, #0
 800634a:	db05      	blt.n	8006358 <__hi0bits+0x38>
 800634c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8006350:	f103 0301 	add.w	r3, r3, #1
 8006354:	bf08      	it	eq
 8006356:	2320      	moveq	r3, #32
 8006358:	4618      	mov	r0, r3
 800635a:	4770      	bx	lr
 800635c:	2300      	movs	r3, #0
 800635e:	e7e4      	b.n	800632a <__hi0bits+0xa>

08006360 <__lo0bits>:
 8006360:	6803      	ldr	r3, [r0, #0]
 8006362:	f013 0207 	ands.w	r2, r3, #7
 8006366:	4601      	mov	r1, r0
 8006368:	d00b      	beq.n	8006382 <__lo0bits+0x22>
 800636a:	07da      	lsls	r2, r3, #31
 800636c:	d423      	bmi.n	80063b6 <__lo0bits+0x56>
 800636e:	0798      	lsls	r0, r3, #30
 8006370:	bf49      	itett	mi
 8006372:	085b      	lsrmi	r3, r3, #1
 8006374:	089b      	lsrpl	r3, r3, #2
 8006376:	2001      	movmi	r0, #1
 8006378:	600b      	strmi	r3, [r1, #0]
 800637a:	bf5c      	itt	pl
 800637c:	600b      	strpl	r3, [r1, #0]
 800637e:	2002      	movpl	r0, #2
 8006380:	4770      	bx	lr
 8006382:	b298      	uxth	r0, r3
 8006384:	b9a8      	cbnz	r0, 80063b2 <__lo0bits+0x52>
 8006386:	0c1b      	lsrs	r3, r3, #16
 8006388:	2010      	movs	r0, #16
 800638a:	b2da      	uxtb	r2, r3
 800638c:	b90a      	cbnz	r2, 8006392 <__lo0bits+0x32>
 800638e:	3008      	adds	r0, #8
 8006390:	0a1b      	lsrs	r3, r3, #8
 8006392:	071a      	lsls	r2, r3, #28
 8006394:	bf04      	itt	eq
 8006396:	091b      	lsreq	r3, r3, #4
 8006398:	3004      	addeq	r0, #4
 800639a:	079a      	lsls	r2, r3, #30
 800639c:	bf04      	itt	eq
 800639e:	089b      	lsreq	r3, r3, #2
 80063a0:	3002      	addeq	r0, #2
 80063a2:	07da      	lsls	r2, r3, #31
 80063a4:	d403      	bmi.n	80063ae <__lo0bits+0x4e>
 80063a6:	085b      	lsrs	r3, r3, #1
 80063a8:	f100 0001 	add.w	r0, r0, #1
 80063ac:	d005      	beq.n	80063ba <__lo0bits+0x5a>
 80063ae:	600b      	str	r3, [r1, #0]
 80063b0:	4770      	bx	lr
 80063b2:	4610      	mov	r0, r2
 80063b4:	e7e9      	b.n	800638a <__lo0bits+0x2a>
 80063b6:	2000      	movs	r0, #0
 80063b8:	4770      	bx	lr
 80063ba:	2020      	movs	r0, #32
 80063bc:	4770      	bx	lr
	...

080063c0 <__i2b>:
 80063c0:	b510      	push	{r4, lr}
 80063c2:	460c      	mov	r4, r1
 80063c4:	2101      	movs	r1, #1
 80063c6:	f7ff ff03 	bl	80061d0 <_Balloc>
 80063ca:	4602      	mov	r2, r0
 80063cc:	b928      	cbnz	r0, 80063da <__i2b+0x1a>
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <__i2b+0x24>)
 80063d0:	4805      	ldr	r0, [pc, #20]	; (80063e8 <__i2b+0x28>)
 80063d2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80063d6:	f000 fe91 	bl	80070fc <__assert_func>
 80063da:	2301      	movs	r3, #1
 80063dc:	6144      	str	r4, [r0, #20]
 80063de:	6103      	str	r3, [r0, #16]
 80063e0:	bd10      	pop	{r4, pc}
 80063e2:	bf00      	nop
 80063e4:	080074fb 	.word	0x080074fb
 80063e8:	0800756c 	.word	0x0800756c

080063ec <__multiply>:
 80063ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f0:	4691      	mov	r9, r2
 80063f2:	690a      	ldr	r2, [r1, #16]
 80063f4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	bfb8      	it	lt
 80063fc:	460b      	movlt	r3, r1
 80063fe:	460c      	mov	r4, r1
 8006400:	bfbc      	itt	lt
 8006402:	464c      	movlt	r4, r9
 8006404:	4699      	movlt	r9, r3
 8006406:	6927      	ldr	r7, [r4, #16]
 8006408:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800640c:	68a3      	ldr	r3, [r4, #8]
 800640e:	6861      	ldr	r1, [r4, #4]
 8006410:	eb07 060a 	add.w	r6, r7, sl
 8006414:	42b3      	cmp	r3, r6
 8006416:	b085      	sub	sp, #20
 8006418:	bfb8      	it	lt
 800641a:	3101      	addlt	r1, #1
 800641c:	f7ff fed8 	bl	80061d0 <_Balloc>
 8006420:	b930      	cbnz	r0, 8006430 <__multiply+0x44>
 8006422:	4602      	mov	r2, r0
 8006424:	4b44      	ldr	r3, [pc, #272]	; (8006538 <__multiply+0x14c>)
 8006426:	4845      	ldr	r0, [pc, #276]	; (800653c <__multiply+0x150>)
 8006428:	f240 115d 	movw	r1, #349	; 0x15d
 800642c:	f000 fe66 	bl	80070fc <__assert_func>
 8006430:	f100 0514 	add.w	r5, r0, #20
 8006434:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006438:	462b      	mov	r3, r5
 800643a:	2200      	movs	r2, #0
 800643c:	4543      	cmp	r3, r8
 800643e:	d321      	bcc.n	8006484 <__multiply+0x98>
 8006440:	f104 0314 	add.w	r3, r4, #20
 8006444:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006448:	f109 0314 	add.w	r3, r9, #20
 800644c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006450:	9202      	str	r2, [sp, #8]
 8006452:	1b3a      	subs	r2, r7, r4
 8006454:	3a15      	subs	r2, #21
 8006456:	f022 0203 	bic.w	r2, r2, #3
 800645a:	3204      	adds	r2, #4
 800645c:	f104 0115 	add.w	r1, r4, #21
 8006460:	428f      	cmp	r7, r1
 8006462:	bf38      	it	cc
 8006464:	2204      	movcc	r2, #4
 8006466:	9201      	str	r2, [sp, #4]
 8006468:	9a02      	ldr	r2, [sp, #8]
 800646a:	9303      	str	r3, [sp, #12]
 800646c:	429a      	cmp	r2, r3
 800646e:	d80c      	bhi.n	800648a <__multiply+0x9e>
 8006470:	2e00      	cmp	r6, #0
 8006472:	dd03      	ble.n	800647c <__multiply+0x90>
 8006474:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006478:	2b00      	cmp	r3, #0
 800647a:	d05a      	beq.n	8006532 <__multiply+0x146>
 800647c:	6106      	str	r6, [r0, #16]
 800647e:	b005      	add	sp, #20
 8006480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006484:	f843 2b04 	str.w	r2, [r3], #4
 8006488:	e7d8      	b.n	800643c <__multiply+0x50>
 800648a:	f8b3 a000 	ldrh.w	sl, [r3]
 800648e:	f1ba 0f00 	cmp.w	sl, #0
 8006492:	d024      	beq.n	80064de <__multiply+0xf2>
 8006494:	f104 0e14 	add.w	lr, r4, #20
 8006498:	46a9      	mov	r9, r5
 800649a:	f04f 0c00 	mov.w	ip, #0
 800649e:	f85e 2b04 	ldr.w	r2, [lr], #4
 80064a2:	f8d9 1000 	ldr.w	r1, [r9]
 80064a6:	fa1f fb82 	uxth.w	fp, r2
 80064aa:	b289      	uxth	r1, r1
 80064ac:	fb0a 110b 	mla	r1, sl, fp, r1
 80064b0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80064b4:	f8d9 2000 	ldr.w	r2, [r9]
 80064b8:	4461      	add	r1, ip
 80064ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064be:	fb0a c20b 	mla	r2, sl, fp, ip
 80064c2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80064c6:	b289      	uxth	r1, r1
 80064c8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80064cc:	4577      	cmp	r7, lr
 80064ce:	f849 1b04 	str.w	r1, [r9], #4
 80064d2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80064d6:	d8e2      	bhi.n	800649e <__multiply+0xb2>
 80064d8:	9a01      	ldr	r2, [sp, #4]
 80064da:	f845 c002 	str.w	ip, [r5, r2]
 80064de:	9a03      	ldr	r2, [sp, #12]
 80064e0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80064e4:	3304      	adds	r3, #4
 80064e6:	f1b9 0f00 	cmp.w	r9, #0
 80064ea:	d020      	beq.n	800652e <__multiply+0x142>
 80064ec:	6829      	ldr	r1, [r5, #0]
 80064ee:	f104 0c14 	add.w	ip, r4, #20
 80064f2:	46ae      	mov	lr, r5
 80064f4:	f04f 0a00 	mov.w	sl, #0
 80064f8:	f8bc b000 	ldrh.w	fp, [ip]
 80064fc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006500:	fb09 220b 	mla	r2, r9, fp, r2
 8006504:	4492      	add	sl, r2
 8006506:	b289      	uxth	r1, r1
 8006508:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800650c:	f84e 1b04 	str.w	r1, [lr], #4
 8006510:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006514:	f8be 1000 	ldrh.w	r1, [lr]
 8006518:	0c12      	lsrs	r2, r2, #16
 800651a:	fb09 1102 	mla	r1, r9, r2, r1
 800651e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006522:	4567      	cmp	r7, ip
 8006524:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006528:	d8e6      	bhi.n	80064f8 <__multiply+0x10c>
 800652a:	9a01      	ldr	r2, [sp, #4]
 800652c:	50a9      	str	r1, [r5, r2]
 800652e:	3504      	adds	r5, #4
 8006530:	e79a      	b.n	8006468 <__multiply+0x7c>
 8006532:	3e01      	subs	r6, #1
 8006534:	e79c      	b.n	8006470 <__multiply+0x84>
 8006536:	bf00      	nop
 8006538:	080074fb 	.word	0x080074fb
 800653c:	0800756c 	.word	0x0800756c

08006540 <__pow5mult>:
 8006540:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006544:	4615      	mov	r5, r2
 8006546:	f012 0203 	ands.w	r2, r2, #3
 800654a:	4606      	mov	r6, r0
 800654c:	460f      	mov	r7, r1
 800654e:	d007      	beq.n	8006560 <__pow5mult+0x20>
 8006550:	4c25      	ldr	r4, [pc, #148]	; (80065e8 <__pow5mult+0xa8>)
 8006552:	3a01      	subs	r2, #1
 8006554:	2300      	movs	r3, #0
 8006556:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800655a:	f7ff fe9b 	bl	8006294 <__multadd>
 800655e:	4607      	mov	r7, r0
 8006560:	10ad      	asrs	r5, r5, #2
 8006562:	d03d      	beq.n	80065e0 <__pow5mult+0xa0>
 8006564:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006566:	b97c      	cbnz	r4, 8006588 <__pow5mult+0x48>
 8006568:	2010      	movs	r0, #16
 800656a:	f7ff fe1b 	bl	80061a4 <malloc>
 800656e:	4602      	mov	r2, r0
 8006570:	6270      	str	r0, [r6, #36]	; 0x24
 8006572:	b928      	cbnz	r0, 8006580 <__pow5mult+0x40>
 8006574:	4b1d      	ldr	r3, [pc, #116]	; (80065ec <__pow5mult+0xac>)
 8006576:	481e      	ldr	r0, [pc, #120]	; (80065f0 <__pow5mult+0xb0>)
 8006578:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800657c:	f000 fdbe 	bl	80070fc <__assert_func>
 8006580:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006584:	6004      	str	r4, [r0, #0]
 8006586:	60c4      	str	r4, [r0, #12]
 8006588:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800658c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006590:	b94c      	cbnz	r4, 80065a6 <__pow5mult+0x66>
 8006592:	f240 2171 	movw	r1, #625	; 0x271
 8006596:	4630      	mov	r0, r6
 8006598:	f7ff ff12 	bl	80063c0 <__i2b>
 800659c:	2300      	movs	r3, #0
 800659e:	f8c8 0008 	str.w	r0, [r8, #8]
 80065a2:	4604      	mov	r4, r0
 80065a4:	6003      	str	r3, [r0, #0]
 80065a6:	f04f 0900 	mov.w	r9, #0
 80065aa:	07eb      	lsls	r3, r5, #31
 80065ac:	d50a      	bpl.n	80065c4 <__pow5mult+0x84>
 80065ae:	4639      	mov	r1, r7
 80065b0:	4622      	mov	r2, r4
 80065b2:	4630      	mov	r0, r6
 80065b4:	f7ff ff1a 	bl	80063ec <__multiply>
 80065b8:	4639      	mov	r1, r7
 80065ba:	4680      	mov	r8, r0
 80065bc:	4630      	mov	r0, r6
 80065be:	f7ff fe47 	bl	8006250 <_Bfree>
 80065c2:	4647      	mov	r7, r8
 80065c4:	106d      	asrs	r5, r5, #1
 80065c6:	d00b      	beq.n	80065e0 <__pow5mult+0xa0>
 80065c8:	6820      	ldr	r0, [r4, #0]
 80065ca:	b938      	cbnz	r0, 80065dc <__pow5mult+0x9c>
 80065cc:	4622      	mov	r2, r4
 80065ce:	4621      	mov	r1, r4
 80065d0:	4630      	mov	r0, r6
 80065d2:	f7ff ff0b 	bl	80063ec <__multiply>
 80065d6:	6020      	str	r0, [r4, #0]
 80065d8:	f8c0 9000 	str.w	r9, [r0]
 80065dc:	4604      	mov	r4, r0
 80065de:	e7e4      	b.n	80065aa <__pow5mult+0x6a>
 80065e0:	4638      	mov	r0, r7
 80065e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80065e6:	bf00      	nop
 80065e8:	080076b8 	.word	0x080076b8
 80065ec:	08007489 	.word	0x08007489
 80065f0:	0800756c 	.word	0x0800756c

080065f4 <__lshift>:
 80065f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065f8:	460c      	mov	r4, r1
 80065fa:	6849      	ldr	r1, [r1, #4]
 80065fc:	6923      	ldr	r3, [r4, #16]
 80065fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006602:	68a3      	ldr	r3, [r4, #8]
 8006604:	4607      	mov	r7, r0
 8006606:	4691      	mov	r9, r2
 8006608:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800660c:	f108 0601 	add.w	r6, r8, #1
 8006610:	42b3      	cmp	r3, r6
 8006612:	db0b      	blt.n	800662c <__lshift+0x38>
 8006614:	4638      	mov	r0, r7
 8006616:	f7ff fddb 	bl	80061d0 <_Balloc>
 800661a:	4605      	mov	r5, r0
 800661c:	b948      	cbnz	r0, 8006632 <__lshift+0x3e>
 800661e:	4602      	mov	r2, r0
 8006620:	4b2a      	ldr	r3, [pc, #168]	; (80066cc <__lshift+0xd8>)
 8006622:	482b      	ldr	r0, [pc, #172]	; (80066d0 <__lshift+0xdc>)
 8006624:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006628:	f000 fd68 	bl	80070fc <__assert_func>
 800662c:	3101      	adds	r1, #1
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	e7ee      	b.n	8006610 <__lshift+0x1c>
 8006632:	2300      	movs	r3, #0
 8006634:	f100 0114 	add.w	r1, r0, #20
 8006638:	f100 0210 	add.w	r2, r0, #16
 800663c:	4618      	mov	r0, r3
 800663e:	4553      	cmp	r3, sl
 8006640:	db37      	blt.n	80066b2 <__lshift+0xbe>
 8006642:	6920      	ldr	r0, [r4, #16]
 8006644:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006648:	f104 0314 	add.w	r3, r4, #20
 800664c:	f019 091f 	ands.w	r9, r9, #31
 8006650:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006654:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006658:	d02f      	beq.n	80066ba <__lshift+0xc6>
 800665a:	f1c9 0e20 	rsb	lr, r9, #32
 800665e:	468a      	mov	sl, r1
 8006660:	f04f 0c00 	mov.w	ip, #0
 8006664:	681a      	ldr	r2, [r3, #0]
 8006666:	fa02 f209 	lsl.w	r2, r2, r9
 800666a:	ea42 020c 	orr.w	r2, r2, ip
 800666e:	f84a 2b04 	str.w	r2, [sl], #4
 8006672:	f853 2b04 	ldr.w	r2, [r3], #4
 8006676:	4298      	cmp	r0, r3
 8006678:	fa22 fc0e 	lsr.w	ip, r2, lr
 800667c:	d8f2      	bhi.n	8006664 <__lshift+0x70>
 800667e:	1b03      	subs	r3, r0, r4
 8006680:	3b15      	subs	r3, #21
 8006682:	f023 0303 	bic.w	r3, r3, #3
 8006686:	3304      	adds	r3, #4
 8006688:	f104 0215 	add.w	r2, r4, #21
 800668c:	4290      	cmp	r0, r2
 800668e:	bf38      	it	cc
 8006690:	2304      	movcc	r3, #4
 8006692:	f841 c003 	str.w	ip, [r1, r3]
 8006696:	f1bc 0f00 	cmp.w	ip, #0
 800669a:	d001      	beq.n	80066a0 <__lshift+0xac>
 800669c:	f108 0602 	add.w	r6, r8, #2
 80066a0:	3e01      	subs	r6, #1
 80066a2:	4638      	mov	r0, r7
 80066a4:	612e      	str	r6, [r5, #16]
 80066a6:	4621      	mov	r1, r4
 80066a8:	f7ff fdd2 	bl	8006250 <_Bfree>
 80066ac:	4628      	mov	r0, r5
 80066ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066b2:	f842 0f04 	str.w	r0, [r2, #4]!
 80066b6:	3301      	adds	r3, #1
 80066b8:	e7c1      	b.n	800663e <__lshift+0x4a>
 80066ba:	3904      	subs	r1, #4
 80066bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80066c0:	f841 2f04 	str.w	r2, [r1, #4]!
 80066c4:	4298      	cmp	r0, r3
 80066c6:	d8f9      	bhi.n	80066bc <__lshift+0xc8>
 80066c8:	e7ea      	b.n	80066a0 <__lshift+0xac>
 80066ca:	bf00      	nop
 80066cc:	080074fb 	.word	0x080074fb
 80066d0:	0800756c 	.word	0x0800756c

080066d4 <__mcmp>:
 80066d4:	b530      	push	{r4, r5, lr}
 80066d6:	6902      	ldr	r2, [r0, #16]
 80066d8:	690c      	ldr	r4, [r1, #16]
 80066da:	1b12      	subs	r2, r2, r4
 80066dc:	d10e      	bne.n	80066fc <__mcmp+0x28>
 80066de:	f100 0314 	add.w	r3, r0, #20
 80066e2:	3114      	adds	r1, #20
 80066e4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80066e8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80066ec:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80066f0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80066f4:	42a5      	cmp	r5, r4
 80066f6:	d003      	beq.n	8006700 <__mcmp+0x2c>
 80066f8:	d305      	bcc.n	8006706 <__mcmp+0x32>
 80066fa:	2201      	movs	r2, #1
 80066fc:	4610      	mov	r0, r2
 80066fe:	bd30      	pop	{r4, r5, pc}
 8006700:	4283      	cmp	r3, r0
 8006702:	d3f3      	bcc.n	80066ec <__mcmp+0x18>
 8006704:	e7fa      	b.n	80066fc <__mcmp+0x28>
 8006706:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800670a:	e7f7      	b.n	80066fc <__mcmp+0x28>

0800670c <__mdiff>:
 800670c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006710:	460c      	mov	r4, r1
 8006712:	4606      	mov	r6, r0
 8006714:	4611      	mov	r1, r2
 8006716:	4620      	mov	r0, r4
 8006718:	4690      	mov	r8, r2
 800671a:	f7ff ffdb 	bl	80066d4 <__mcmp>
 800671e:	1e05      	subs	r5, r0, #0
 8006720:	d110      	bne.n	8006744 <__mdiff+0x38>
 8006722:	4629      	mov	r1, r5
 8006724:	4630      	mov	r0, r6
 8006726:	f7ff fd53 	bl	80061d0 <_Balloc>
 800672a:	b930      	cbnz	r0, 800673a <__mdiff+0x2e>
 800672c:	4b3a      	ldr	r3, [pc, #232]	; (8006818 <__mdiff+0x10c>)
 800672e:	4602      	mov	r2, r0
 8006730:	f240 2132 	movw	r1, #562	; 0x232
 8006734:	4839      	ldr	r0, [pc, #228]	; (800681c <__mdiff+0x110>)
 8006736:	f000 fce1 	bl	80070fc <__assert_func>
 800673a:	2301      	movs	r3, #1
 800673c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006740:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006744:	bfa4      	itt	ge
 8006746:	4643      	movge	r3, r8
 8006748:	46a0      	movge	r8, r4
 800674a:	4630      	mov	r0, r6
 800674c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006750:	bfa6      	itte	ge
 8006752:	461c      	movge	r4, r3
 8006754:	2500      	movge	r5, #0
 8006756:	2501      	movlt	r5, #1
 8006758:	f7ff fd3a 	bl	80061d0 <_Balloc>
 800675c:	b920      	cbnz	r0, 8006768 <__mdiff+0x5c>
 800675e:	4b2e      	ldr	r3, [pc, #184]	; (8006818 <__mdiff+0x10c>)
 8006760:	4602      	mov	r2, r0
 8006762:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006766:	e7e5      	b.n	8006734 <__mdiff+0x28>
 8006768:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800676c:	6926      	ldr	r6, [r4, #16]
 800676e:	60c5      	str	r5, [r0, #12]
 8006770:	f104 0914 	add.w	r9, r4, #20
 8006774:	f108 0514 	add.w	r5, r8, #20
 8006778:	f100 0e14 	add.w	lr, r0, #20
 800677c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006780:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006784:	f108 0210 	add.w	r2, r8, #16
 8006788:	46f2      	mov	sl, lr
 800678a:	2100      	movs	r1, #0
 800678c:	f859 3b04 	ldr.w	r3, [r9], #4
 8006790:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006794:	fa1f f883 	uxth.w	r8, r3
 8006798:	fa11 f18b 	uxtah	r1, r1, fp
 800679c:	0c1b      	lsrs	r3, r3, #16
 800679e:	eba1 0808 	sub.w	r8, r1, r8
 80067a2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80067a6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80067aa:	fa1f f888 	uxth.w	r8, r8
 80067ae:	1419      	asrs	r1, r3, #16
 80067b0:	454e      	cmp	r6, r9
 80067b2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80067b6:	f84a 3b04 	str.w	r3, [sl], #4
 80067ba:	d8e7      	bhi.n	800678c <__mdiff+0x80>
 80067bc:	1b33      	subs	r3, r6, r4
 80067be:	3b15      	subs	r3, #21
 80067c0:	f023 0303 	bic.w	r3, r3, #3
 80067c4:	3304      	adds	r3, #4
 80067c6:	3415      	adds	r4, #21
 80067c8:	42a6      	cmp	r6, r4
 80067ca:	bf38      	it	cc
 80067cc:	2304      	movcc	r3, #4
 80067ce:	441d      	add	r5, r3
 80067d0:	4473      	add	r3, lr
 80067d2:	469e      	mov	lr, r3
 80067d4:	462e      	mov	r6, r5
 80067d6:	4566      	cmp	r6, ip
 80067d8:	d30e      	bcc.n	80067f8 <__mdiff+0xec>
 80067da:	f10c 0203 	add.w	r2, ip, #3
 80067de:	1b52      	subs	r2, r2, r5
 80067e0:	f022 0203 	bic.w	r2, r2, #3
 80067e4:	3d03      	subs	r5, #3
 80067e6:	45ac      	cmp	ip, r5
 80067e8:	bf38      	it	cc
 80067ea:	2200      	movcc	r2, #0
 80067ec:	441a      	add	r2, r3
 80067ee:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80067f2:	b17b      	cbz	r3, 8006814 <__mdiff+0x108>
 80067f4:	6107      	str	r7, [r0, #16]
 80067f6:	e7a3      	b.n	8006740 <__mdiff+0x34>
 80067f8:	f856 8b04 	ldr.w	r8, [r6], #4
 80067fc:	fa11 f288 	uxtah	r2, r1, r8
 8006800:	1414      	asrs	r4, r2, #16
 8006802:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006806:	b292      	uxth	r2, r2
 8006808:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800680c:	f84e 2b04 	str.w	r2, [lr], #4
 8006810:	1421      	asrs	r1, r4, #16
 8006812:	e7e0      	b.n	80067d6 <__mdiff+0xca>
 8006814:	3f01      	subs	r7, #1
 8006816:	e7ea      	b.n	80067ee <__mdiff+0xe2>
 8006818:	080074fb 	.word	0x080074fb
 800681c:	0800756c 	.word	0x0800756c

08006820 <__d2b>:
 8006820:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006824:	4689      	mov	r9, r1
 8006826:	2101      	movs	r1, #1
 8006828:	ec57 6b10 	vmov	r6, r7, d0
 800682c:	4690      	mov	r8, r2
 800682e:	f7ff fccf 	bl	80061d0 <_Balloc>
 8006832:	4604      	mov	r4, r0
 8006834:	b930      	cbnz	r0, 8006844 <__d2b+0x24>
 8006836:	4602      	mov	r2, r0
 8006838:	4b25      	ldr	r3, [pc, #148]	; (80068d0 <__d2b+0xb0>)
 800683a:	4826      	ldr	r0, [pc, #152]	; (80068d4 <__d2b+0xb4>)
 800683c:	f240 310a 	movw	r1, #778	; 0x30a
 8006840:	f000 fc5c 	bl	80070fc <__assert_func>
 8006844:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006848:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800684c:	bb35      	cbnz	r5, 800689c <__d2b+0x7c>
 800684e:	2e00      	cmp	r6, #0
 8006850:	9301      	str	r3, [sp, #4]
 8006852:	d028      	beq.n	80068a6 <__d2b+0x86>
 8006854:	4668      	mov	r0, sp
 8006856:	9600      	str	r6, [sp, #0]
 8006858:	f7ff fd82 	bl	8006360 <__lo0bits>
 800685c:	9900      	ldr	r1, [sp, #0]
 800685e:	b300      	cbz	r0, 80068a2 <__d2b+0x82>
 8006860:	9a01      	ldr	r2, [sp, #4]
 8006862:	f1c0 0320 	rsb	r3, r0, #32
 8006866:	fa02 f303 	lsl.w	r3, r2, r3
 800686a:	430b      	orrs	r3, r1
 800686c:	40c2      	lsrs	r2, r0
 800686e:	6163      	str	r3, [r4, #20]
 8006870:	9201      	str	r2, [sp, #4]
 8006872:	9b01      	ldr	r3, [sp, #4]
 8006874:	61a3      	str	r3, [r4, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	bf14      	ite	ne
 800687a:	2202      	movne	r2, #2
 800687c:	2201      	moveq	r2, #1
 800687e:	6122      	str	r2, [r4, #16]
 8006880:	b1d5      	cbz	r5, 80068b8 <__d2b+0x98>
 8006882:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006886:	4405      	add	r5, r0
 8006888:	f8c9 5000 	str.w	r5, [r9]
 800688c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006890:	f8c8 0000 	str.w	r0, [r8]
 8006894:	4620      	mov	r0, r4
 8006896:	b003      	add	sp, #12
 8006898:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800689c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068a0:	e7d5      	b.n	800684e <__d2b+0x2e>
 80068a2:	6161      	str	r1, [r4, #20]
 80068a4:	e7e5      	b.n	8006872 <__d2b+0x52>
 80068a6:	a801      	add	r0, sp, #4
 80068a8:	f7ff fd5a 	bl	8006360 <__lo0bits>
 80068ac:	9b01      	ldr	r3, [sp, #4]
 80068ae:	6163      	str	r3, [r4, #20]
 80068b0:	2201      	movs	r2, #1
 80068b2:	6122      	str	r2, [r4, #16]
 80068b4:	3020      	adds	r0, #32
 80068b6:	e7e3      	b.n	8006880 <__d2b+0x60>
 80068b8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80068bc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80068c0:	f8c9 0000 	str.w	r0, [r9]
 80068c4:	6918      	ldr	r0, [r3, #16]
 80068c6:	f7ff fd2b 	bl	8006320 <__hi0bits>
 80068ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80068ce:	e7df      	b.n	8006890 <__d2b+0x70>
 80068d0:	080074fb 	.word	0x080074fb
 80068d4:	0800756c 	.word	0x0800756c

080068d8 <_calloc_r>:
 80068d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068da:	fba1 2402 	umull	r2, r4, r1, r2
 80068de:	b94c      	cbnz	r4, 80068f4 <_calloc_r+0x1c>
 80068e0:	4611      	mov	r1, r2
 80068e2:	9201      	str	r2, [sp, #4]
 80068e4:	f000 f87a 	bl	80069dc <_malloc_r>
 80068e8:	9a01      	ldr	r2, [sp, #4]
 80068ea:	4605      	mov	r5, r0
 80068ec:	b930      	cbnz	r0, 80068fc <_calloc_r+0x24>
 80068ee:	4628      	mov	r0, r5
 80068f0:	b003      	add	sp, #12
 80068f2:	bd30      	pop	{r4, r5, pc}
 80068f4:	220c      	movs	r2, #12
 80068f6:	6002      	str	r2, [r0, #0]
 80068f8:	2500      	movs	r5, #0
 80068fa:	e7f8      	b.n	80068ee <_calloc_r+0x16>
 80068fc:	4621      	mov	r1, r4
 80068fe:	f7fd fdd1 	bl	80044a4 <memset>
 8006902:	e7f4      	b.n	80068ee <_calloc_r+0x16>

08006904 <_free_r>:
 8006904:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006906:	2900      	cmp	r1, #0
 8006908:	d044      	beq.n	8006994 <_free_r+0x90>
 800690a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800690e:	9001      	str	r0, [sp, #4]
 8006910:	2b00      	cmp	r3, #0
 8006912:	f1a1 0404 	sub.w	r4, r1, #4
 8006916:	bfb8      	it	lt
 8006918:	18e4      	addlt	r4, r4, r3
 800691a:	f000 fc8f 	bl	800723c <__malloc_lock>
 800691e:	4a1e      	ldr	r2, [pc, #120]	; (8006998 <_free_r+0x94>)
 8006920:	9801      	ldr	r0, [sp, #4]
 8006922:	6813      	ldr	r3, [r2, #0]
 8006924:	b933      	cbnz	r3, 8006934 <_free_r+0x30>
 8006926:	6063      	str	r3, [r4, #4]
 8006928:	6014      	str	r4, [r2, #0]
 800692a:	b003      	add	sp, #12
 800692c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006930:	f000 bc8a 	b.w	8007248 <__malloc_unlock>
 8006934:	42a3      	cmp	r3, r4
 8006936:	d908      	bls.n	800694a <_free_r+0x46>
 8006938:	6825      	ldr	r5, [r4, #0]
 800693a:	1961      	adds	r1, r4, r5
 800693c:	428b      	cmp	r3, r1
 800693e:	bf01      	itttt	eq
 8006940:	6819      	ldreq	r1, [r3, #0]
 8006942:	685b      	ldreq	r3, [r3, #4]
 8006944:	1949      	addeq	r1, r1, r5
 8006946:	6021      	streq	r1, [r4, #0]
 8006948:	e7ed      	b.n	8006926 <_free_r+0x22>
 800694a:	461a      	mov	r2, r3
 800694c:	685b      	ldr	r3, [r3, #4]
 800694e:	b10b      	cbz	r3, 8006954 <_free_r+0x50>
 8006950:	42a3      	cmp	r3, r4
 8006952:	d9fa      	bls.n	800694a <_free_r+0x46>
 8006954:	6811      	ldr	r1, [r2, #0]
 8006956:	1855      	adds	r5, r2, r1
 8006958:	42a5      	cmp	r5, r4
 800695a:	d10b      	bne.n	8006974 <_free_r+0x70>
 800695c:	6824      	ldr	r4, [r4, #0]
 800695e:	4421      	add	r1, r4
 8006960:	1854      	adds	r4, r2, r1
 8006962:	42a3      	cmp	r3, r4
 8006964:	6011      	str	r1, [r2, #0]
 8006966:	d1e0      	bne.n	800692a <_free_r+0x26>
 8006968:	681c      	ldr	r4, [r3, #0]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	6053      	str	r3, [r2, #4]
 800696e:	4421      	add	r1, r4
 8006970:	6011      	str	r1, [r2, #0]
 8006972:	e7da      	b.n	800692a <_free_r+0x26>
 8006974:	d902      	bls.n	800697c <_free_r+0x78>
 8006976:	230c      	movs	r3, #12
 8006978:	6003      	str	r3, [r0, #0]
 800697a:	e7d6      	b.n	800692a <_free_r+0x26>
 800697c:	6825      	ldr	r5, [r4, #0]
 800697e:	1961      	adds	r1, r4, r5
 8006980:	428b      	cmp	r3, r1
 8006982:	bf04      	itt	eq
 8006984:	6819      	ldreq	r1, [r3, #0]
 8006986:	685b      	ldreq	r3, [r3, #4]
 8006988:	6063      	str	r3, [r4, #4]
 800698a:	bf04      	itt	eq
 800698c:	1949      	addeq	r1, r1, r5
 800698e:	6021      	streq	r1, [r4, #0]
 8006990:	6054      	str	r4, [r2, #4]
 8006992:	e7ca      	b.n	800692a <_free_r+0x26>
 8006994:	b003      	add	sp, #12
 8006996:	bd30      	pop	{r4, r5, pc}
 8006998:	2000030c 	.word	0x2000030c

0800699c <sbrk_aligned>:
 800699c:	b570      	push	{r4, r5, r6, lr}
 800699e:	4e0e      	ldr	r6, [pc, #56]	; (80069d8 <sbrk_aligned+0x3c>)
 80069a0:	460c      	mov	r4, r1
 80069a2:	6831      	ldr	r1, [r6, #0]
 80069a4:	4605      	mov	r5, r0
 80069a6:	b911      	cbnz	r1, 80069ae <sbrk_aligned+0x12>
 80069a8:	f000 fb42 	bl	8007030 <_sbrk_r>
 80069ac:	6030      	str	r0, [r6, #0]
 80069ae:	4621      	mov	r1, r4
 80069b0:	4628      	mov	r0, r5
 80069b2:	f000 fb3d 	bl	8007030 <_sbrk_r>
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	d00a      	beq.n	80069d0 <sbrk_aligned+0x34>
 80069ba:	1cc4      	adds	r4, r0, #3
 80069bc:	f024 0403 	bic.w	r4, r4, #3
 80069c0:	42a0      	cmp	r0, r4
 80069c2:	d007      	beq.n	80069d4 <sbrk_aligned+0x38>
 80069c4:	1a21      	subs	r1, r4, r0
 80069c6:	4628      	mov	r0, r5
 80069c8:	f000 fb32 	bl	8007030 <_sbrk_r>
 80069cc:	3001      	adds	r0, #1
 80069ce:	d101      	bne.n	80069d4 <sbrk_aligned+0x38>
 80069d0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80069d4:	4620      	mov	r0, r4
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	20000310 	.word	0x20000310

080069dc <_malloc_r>:
 80069dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069e0:	1ccd      	adds	r5, r1, #3
 80069e2:	f025 0503 	bic.w	r5, r5, #3
 80069e6:	3508      	adds	r5, #8
 80069e8:	2d0c      	cmp	r5, #12
 80069ea:	bf38      	it	cc
 80069ec:	250c      	movcc	r5, #12
 80069ee:	2d00      	cmp	r5, #0
 80069f0:	4607      	mov	r7, r0
 80069f2:	db01      	blt.n	80069f8 <_malloc_r+0x1c>
 80069f4:	42a9      	cmp	r1, r5
 80069f6:	d905      	bls.n	8006a04 <_malloc_r+0x28>
 80069f8:	230c      	movs	r3, #12
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	2600      	movs	r6, #0
 80069fe:	4630      	mov	r0, r6
 8006a00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a04:	4e2e      	ldr	r6, [pc, #184]	; (8006ac0 <_malloc_r+0xe4>)
 8006a06:	f000 fc19 	bl	800723c <__malloc_lock>
 8006a0a:	6833      	ldr	r3, [r6, #0]
 8006a0c:	461c      	mov	r4, r3
 8006a0e:	bb34      	cbnz	r4, 8006a5e <_malloc_r+0x82>
 8006a10:	4629      	mov	r1, r5
 8006a12:	4638      	mov	r0, r7
 8006a14:	f7ff ffc2 	bl	800699c <sbrk_aligned>
 8006a18:	1c43      	adds	r3, r0, #1
 8006a1a:	4604      	mov	r4, r0
 8006a1c:	d14d      	bne.n	8006aba <_malloc_r+0xde>
 8006a1e:	6834      	ldr	r4, [r6, #0]
 8006a20:	4626      	mov	r6, r4
 8006a22:	2e00      	cmp	r6, #0
 8006a24:	d140      	bne.n	8006aa8 <_malloc_r+0xcc>
 8006a26:	6823      	ldr	r3, [r4, #0]
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4638      	mov	r0, r7
 8006a2c:	eb04 0803 	add.w	r8, r4, r3
 8006a30:	f000 fafe 	bl	8007030 <_sbrk_r>
 8006a34:	4580      	cmp	r8, r0
 8006a36:	d13a      	bne.n	8006aae <_malloc_r+0xd2>
 8006a38:	6821      	ldr	r1, [r4, #0]
 8006a3a:	3503      	adds	r5, #3
 8006a3c:	1a6d      	subs	r5, r5, r1
 8006a3e:	f025 0503 	bic.w	r5, r5, #3
 8006a42:	3508      	adds	r5, #8
 8006a44:	2d0c      	cmp	r5, #12
 8006a46:	bf38      	it	cc
 8006a48:	250c      	movcc	r5, #12
 8006a4a:	4629      	mov	r1, r5
 8006a4c:	4638      	mov	r0, r7
 8006a4e:	f7ff ffa5 	bl	800699c <sbrk_aligned>
 8006a52:	3001      	adds	r0, #1
 8006a54:	d02b      	beq.n	8006aae <_malloc_r+0xd2>
 8006a56:	6823      	ldr	r3, [r4, #0]
 8006a58:	442b      	add	r3, r5
 8006a5a:	6023      	str	r3, [r4, #0]
 8006a5c:	e00e      	b.n	8006a7c <_malloc_r+0xa0>
 8006a5e:	6822      	ldr	r2, [r4, #0]
 8006a60:	1b52      	subs	r2, r2, r5
 8006a62:	d41e      	bmi.n	8006aa2 <_malloc_r+0xc6>
 8006a64:	2a0b      	cmp	r2, #11
 8006a66:	d916      	bls.n	8006a96 <_malloc_r+0xba>
 8006a68:	1961      	adds	r1, r4, r5
 8006a6a:	42a3      	cmp	r3, r4
 8006a6c:	6025      	str	r5, [r4, #0]
 8006a6e:	bf18      	it	ne
 8006a70:	6059      	strne	r1, [r3, #4]
 8006a72:	6863      	ldr	r3, [r4, #4]
 8006a74:	bf08      	it	eq
 8006a76:	6031      	streq	r1, [r6, #0]
 8006a78:	5162      	str	r2, [r4, r5]
 8006a7a:	604b      	str	r3, [r1, #4]
 8006a7c:	4638      	mov	r0, r7
 8006a7e:	f104 060b 	add.w	r6, r4, #11
 8006a82:	f000 fbe1 	bl	8007248 <__malloc_unlock>
 8006a86:	f026 0607 	bic.w	r6, r6, #7
 8006a8a:	1d23      	adds	r3, r4, #4
 8006a8c:	1af2      	subs	r2, r6, r3
 8006a8e:	d0b6      	beq.n	80069fe <_malloc_r+0x22>
 8006a90:	1b9b      	subs	r3, r3, r6
 8006a92:	50a3      	str	r3, [r4, r2]
 8006a94:	e7b3      	b.n	80069fe <_malloc_r+0x22>
 8006a96:	6862      	ldr	r2, [r4, #4]
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	bf0c      	ite	eq
 8006a9c:	6032      	streq	r2, [r6, #0]
 8006a9e:	605a      	strne	r2, [r3, #4]
 8006aa0:	e7ec      	b.n	8006a7c <_malloc_r+0xa0>
 8006aa2:	4623      	mov	r3, r4
 8006aa4:	6864      	ldr	r4, [r4, #4]
 8006aa6:	e7b2      	b.n	8006a0e <_malloc_r+0x32>
 8006aa8:	4634      	mov	r4, r6
 8006aaa:	6876      	ldr	r6, [r6, #4]
 8006aac:	e7b9      	b.n	8006a22 <_malloc_r+0x46>
 8006aae:	230c      	movs	r3, #12
 8006ab0:	603b      	str	r3, [r7, #0]
 8006ab2:	4638      	mov	r0, r7
 8006ab4:	f000 fbc8 	bl	8007248 <__malloc_unlock>
 8006ab8:	e7a1      	b.n	80069fe <_malloc_r+0x22>
 8006aba:	6025      	str	r5, [r4, #0]
 8006abc:	e7de      	b.n	8006a7c <_malloc_r+0xa0>
 8006abe:	bf00      	nop
 8006ac0:	2000030c 	.word	0x2000030c

08006ac4 <__ssputs_r>:
 8006ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ac8:	688e      	ldr	r6, [r1, #8]
 8006aca:	429e      	cmp	r6, r3
 8006acc:	4682      	mov	sl, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	4690      	mov	r8, r2
 8006ad2:	461f      	mov	r7, r3
 8006ad4:	d838      	bhi.n	8006b48 <__ssputs_r+0x84>
 8006ad6:	898a      	ldrh	r2, [r1, #12]
 8006ad8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006adc:	d032      	beq.n	8006b44 <__ssputs_r+0x80>
 8006ade:	6825      	ldr	r5, [r4, #0]
 8006ae0:	6909      	ldr	r1, [r1, #16]
 8006ae2:	eba5 0901 	sub.w	r9, r5, r1
 8006ae6:	6965      	ldr	r5, [r4, #20]
 8006ae8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006aec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006af0:	3301      	adds	r3, #1
 8006af2:	444b      	add	r3, r9
 8006af4:	106d      	asrs	r5, r5, #1
 8006af6:	429d      	cmp	r5, r3
 8006af8:	bf38      	it	cc
 8006afa:	461d      	movcc	r5, r3
 8006afc:	0553      	lsls	r3, r2, #21
 8006afe:	d531      	bpl.n	8006b64 <__ssputs_r+0xa0>
 8006b00:	4629      	mov	r1, r5
 8006b02:	f7ff ff6b 	bl	80069dc <_malloc_r>
 8006b06:	4606      	mov	r6, r0
 8006b08:	b950      	cbnz	r0, 8006b20 <__ssputs_r+0x5c>
 8006b0a:	230c      	movs	r3, #12
 8006b0c:	f8ca 3000 	str.w	r3, [sl]
 8006b10:	89a3      	ldrh	r3, [r4, #12]
 8006b12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b16:	81a3      	strh	r3, [r4, #12]
 8006b18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b20:	6921      	ldr	r1, [r4, #16]
 8006b22:	464a      	mov	r2, r9
 8006b24:	f7ff fb46 	bl	80061b4 <memcpy>
 8006b28:	89a3      	ldrh	r3, [r4, #12]
 8006b2a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b32:	81a3      	strh	r3, [r4, #12]
 8006b34:	6126      	str	r6, [r4, #16]
 8006b36:	6165      	str	r5, [r4, #20]
 8006b38:	444e      	add	r6, r9
 8006b3a:	eba5 0509 	sub.w	r5, r5, r9
 8006b3e:	6026      	str	r6, [r4, #0]
 8006b40:	60a5      	str	r5, [r4, #8]
 8006b42:	463e      	mov	r6, r7
 8006b44:	42be      	cmp	r6, r7
 8006b46:	d900      	bls.n	8006b4a <__ssputs_r+0x86>
 8006b48:	463e      	mov	r6, r7
 8006b4a:	6820      	ldr	r0, [r4, #0]
 8006b4c:	4632      	mov	r2, r6
 8006b4e:	4641      	mov	r1, r8
 8006b50:	f000 fb5a 	bl	8007208 <memmove>
 8006b54:	68a3      	ldr	r3, [r4, #8]
 8006b56:	1b9b      	subs	r3, r3, r6
 8006b58:	60a3      	str	r3, [r4, #8]
 8006b5a:	6823      	ldr	r3, [r4, #0]
 8006b5c:	4433      	add	r3, r6
 8006b5e:	6023      	str	r3, [r4, #0]
 8006b60:	2000      	movs	r0, #0
 8006b62:	e7db      	b.n	8006b1c <__ssputs_r+0x58>
 8006b64:	462a      	mov	r2, r5
 8006b66:	f000 fb75 	bl	8007254 <_realloc_r>
 8006b6a:	4606      	mov	r6, r0
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	d1e1      	bne.n	8006b34 <__ssputs_r+0x70>
 8006b70:	6921      	ldr	r1, [r4, #16]
 8006b72:	4650      	mov	r0, sl
 8006b74:	f7ff fec6 	bl	8006904 <_free_r>
 8006b78:	e7c7      	b.n	8006b0a <__ssputs_r+0x46>
	...

08006b7c <_svfiprintf_r>:
 8006b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b80:	4698      	mov	r8, r3
 8006b82:	898b      	ldrh	r3, [r1, #12]
 8006b84:	061b      	lsls	r3, r3, #24
 8006b86:	b09d      	sub	sp, #116	; 0x74
 8006b88:	4607      	mov	r7, r0
 8006b8a:	460d      	mov	r5, r1
 8006b8c:	4614      	mov	r4, r2
 8006b8e:	d50e      	bpl.n	8006bae <_svfiprintf_r+0x32>
 8006b90:	690b      	ldr	r3, [r1, #16]
 8006b92:	b963      	cbnz	r3, 8006bae <_svfiprintf_r+0x32>
 8006b94:	2140      	movs	r1, #64	; 0x40
 8006b96:	f7ff ff21 	bl	80069dc <_malloc_r>
 8006b9a:	6028      	str	r0, [r5, #0]
 8006b9c:	6128      	str	r0, [r5, #16]
 8006b9e:	b920      	cbnz	r0, 8006baa <_svfiprintf_r+0x2e>
 8006ba0:	230c      	movs	r3, #12
 8006ba2:	603b      	str	r3, [r7, #0]
 8006ba4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006ba8:	e0d1      	b.n	8006d4e <_svfiprintf_r+0x1d2>
 8006baa:	2340      	movs	r3, #64	; 0x40
 8006bac:	616b      	str	r3, [r5, #20]
 8006bae:	2300      	movs	r3, #0
 8006bb0:	9309      	str	r3, [sp, #36]	; 0x24
 8006bb2:	2320      	movs	r3, #32
 8006bb4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006bb8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006bbc:	2330      	movs	r3, #48	; 0x30
 8006bbe:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006d68 <_svfiprintf_r+0x1ec>
 8006bc2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bc6:	f04f 0901 	mov.w	r9, #1
 8006bca:	4623      	mov	r3, r4
 8006bcc:	469a      	mov	sl, r3
 8006bce:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bd2:	b10a      	cbz	r2, 8006bd8 <_svfiprintf_r+0x5c>
 8006bd4:	2a25      	cmp	r2, #37	; 0x25
 8006bd6:	d1f9      	bne.n	8006bcc <_svfiprintf_r+0x50>
 8006bd8:	ebba 0b04 	subs.w	fp, sl, r4
 8006bdc:	d00b      	beq.n	8006bf6 <_svfiprintf_r+0x7a>
 8006bde:	465b      	mov	r3, fp
 8006be0:	4622      	mov	r2, r4
 8006be2:	4629      	mov	r1, r5
 8006be4:	4638      	mov	r0, r7
 8006be6:	f7ff ff6d 	bl	8006ac4 <__ssputs_r>
 8006bea:	3001      	adds	r0, #1
 8006bec:	f000 80aa 	beq.w	8006d44 <_svfiprintf_r+0x1c8>
 8006bf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bf2:	445a      	add	r2, fp
 8006bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8006bf6:	f89a 3000 	ldrb.w	r3, [sl]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	f000 80a2 	beq.w	8006d44 <_svfiprintf_r+0x1c8>
 8006c00:	2300      	movs	r3, #0
 8006c02:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006c06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006c0a:	f10a 0a01 	add.w	sl, sl, #1
 8006c0e:	9304      	str	r3, [sp, #16]
 8006c10:	9307      	str	r3, [sp, #28]
 8006c12:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c16:	931a      	str	r3, [sp, #104]	; 0x68
 8006c18:	4654      	mov	r4, sl
 8006c1a:	2205      	movs	r2, #5
 8006c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c20:	4851      	ldr	r0, [pc, #324]	; (8006d68 <_svfiprintf_r+0x1ec>)
 8006c22:	f7f9 faed 	bl	8000200 <memchr>
 8006c26:	9a04      	ldr	r2, [sp, #16]
 8006c28:	b9d8      	cbnz	r0, 8006c62 <_svfiprintf_r+0xe6>
 8006c2a:	06d0      	lsls	r0, r2, #27
 8006c2c:	bf44      	itt	mi
 8006c2e:	2320      	movmi	r3, #32
 8006c30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c34:	0711      	lsls	r1, r2, #28
 8006c36:	bf44      	itt	mi
 8006c38:	232b      	movmi	r3, #43	; 0x2b
 8006c3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c3e:	f89a 3000 	ldrb.w	r3, [sl]
 8006c42:	2b2a      	cmp	r3, #42	; 0x2a
 8006c44:	d015      	beq.n	8006c72 <_svfiprintf_r+0xf6>
 8006c46:	9a07      	ldr	r2, [sp, #28]
 8006c48:	4654      	mov	r4, sl
 8006c4a:	2000      	movs	r0, #0
 8006c4c:	f04f 0c0a 	mov.w	ip, #10
 8006c50:	4621      	mov	r1, r4
 8006c52:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c56:	3b30      	subs	r3, #48	; 0x30
 8006c58:	2b09      	cmp	r3, #9
 8006c5a:	d94e      	bls.n	8006cfa <_svfiprintf_r+0x17e>
 8006c5c:	b1b0      	cbz	r0, 8006c8c <_svfiprintf_r+0x110>
 8006c5e:	9207      	str	r2, [sp, #28]
 8006c60:	e014      	b.n	8006c8c <_svfiprintf_r+0x110>
 8006c62:	eba0 0308 	sub.w	r3, r0, r8
 8006c66:	fa09 f303 	lsl.w	r3, r9, r3
 8006c6a:	4313      	orrs	r3, r2
 8006c6c:	9304      	str	r3, [sp, #16]
 8006c6e:	46a2      	mov	sl, r4
 8006c70:	e7d2      	b.n	8006c18 <_svfiprintf_r+0x9c>
 8006c72:	9b03      	ldr	r3, [sp, #12]
 8006c74:	1d19      	adds	r1, r3, #4
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	9103      	str	r1, [sp, #12]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	bfbb      	ittet	lt
 8006c7e:	425b      	neglt	r3, r3
 8006c80:	f042 0202 	orrlt.w	r2, r2, #2
 8006c84:	9307      	strge	r3, [sp, #28]
 8006c86:	9307      	strlt	r3, [sp, #28]
 8006c88:	bfb8      	it	lt
 8006c8a:	9204      	strlt	r2, [sp, #16]
 8006c8c:	7823      	ldrb	r3, [r4, #0]
 8006c8e:	2b2e      	cmp	r3, #46	; 0x2e
 8006c90:	d10c      	bne.n	8006cac <_svfiprintf_r+0x130>
 8006c92:	7863      	ldrb	r3, [r4, #1]
 8006c94:	2b2a      	cmp	r3, #42	; 0x2a
 8006c96:	d135      	bne.n	8006d04 <_svfiprintf_r+0x188>
 8006c98:	9b03      	ldr	r3, [sp, #12]
 8006c9a:	1d1a      	adds	r2, r3, #4
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	9203      	str	r2, [sp, #12]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	bfb8      	it	lt
 8006ca4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ca8:	3402      	adds	r4, #2
 8006caa:	9305      	str	r3, [sp, #20]
 8006cac:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006d78 <_svfiprintf_r+0x1fc>
 8006cb0:	7821      	ldrb	r1, [r4, #0]
 8006cb2:	2203      	movs	r2, #3
 8006cb4:	4650      	mov	r0, sl
 8006cb6:	f7f9 faa3 	bl	8000200 <memchr>
 8006cba:	b140      	cbz	r0, 8006cce <_svfiprintf_r+0x152>
 8006cbc:	2340      	movs	r3, #64	; 0x40
 8006cbe:	eba0 000a 	sub.w	r0, r0, sl
 8006cc2:	fa03 f000 	lsl.w	r0, r3, r0
 8006cc6:	9b04      	ldr	r3, [sp, #16]
 8006cc8:	4303      	orrs	r3, r0
 8006cca:	3401      	adds	r4, #1
 8006ccc:	9304      	str	r3, [sp, #16]
 8006cce:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cd2:	4826      	ldr	r0, [pc, #152]	; (8006d6c <_svfiprintf_r+0x1f0>)
 8006cd4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cd8:	2206      	movs	r2, #6
 8006cda:	f7f9 fa91 	bl	8000200 <memchr>
 8006cde:	2800      	cmp	r0, #0
 8006ce0:	d038      	beq.n	8006d54 <_svfiprintf_r+0x1d8>
 8006ce2:	4b23      	ldr	r3, [pc, #140]	; (8006d70 <_svfiprintf_r+0x1f4>)
 8006ce4:	bb1b      	cbnz	r3, 8006d2e <_svfiprintf_r+0x1b2>
 8006ce6:	9b03      	ldr	r3, [sp, #12]
 8006ce8:	3307      	adds	r3, #7
 8006cea:	f023 0307 	bic.w	r3, r3, #7
 8006cee:	3308      	adds	r3, #8
 8006cf0:	9303      	str	r3, [sp, #12]
 8006cf2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cf4:	4433      	add	r3, r6
 8006cf6:	9309      	str	r3, [sp, #36]	; 0x24
 8006cf8:	e767      	b.n	8006bca <_svfiprintf_r+0x4e>
 8006cfa:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cfe:	460c      	mov	r4, r1
 8006d00:	2001      	movs	r0, #1
 8006d02:	e7a5      	b.n	8006c50 <_svfiprintf_r+0xd4>
 8006d04:	2300      	movs	r3, #0
 8006d06:	3401      	adds	r4, #1
 8006d08:	9305      	str	r3, [sp, #20]
 8006d0a:	4619      	mov	r1, r3
 8006d0c:	f04f 0c0a 	mov.w	ip, #10
 8006d10:	4620      	mov	r0, r4
 8006d12:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d16:	3a30      	subs	r2, #48	; 0x30
 8006d18:	2a09      	cmp	r2, #9
 8006d1a:	d903      	bls.n	8006d24 <_svfiprintf_r+0x1a8>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d0c5      	beq.n	8006cac <_svfiprintf_r+0x130>
 8006d20:	9105      	str	r1, [sp, #20]
 8006d22:	e7c3      	b.n	8006cac <_svfiprintf_r+0x130>
 8006d24:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d28:	4604      	mov	r4, r0
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e7f0      	b.n	8006d10 <_svfiprintf_r+0x194>
 8006d2e:	ab03      	add	r3, sp, #12
 8006d30:	9300      	str	r3, [sp, #0]
 8006d32:	462a      	mov	r2, r5
 8006d34:	4b0f      	ldr	r3, [pc, #60]	; (8006d74 <_svfiprintf_r+0x1f8>)
 8006d36:	a904      	add	r1, sp, #16
 8006d38:	4638      	mov	r0, r7
 8006d3a:	f7fd fc5b 	bl	80045f4 <_printf_float>
 8006d3e:	1c42      	adds	r2, r0, #1
 8006d40:	4606      	mov	r6, r0
 8006d42:	d1d6      	bne.n	8006cf2 <_svfiprintf_r+0x176>
 8006d44:	89ab      	ldrh	r3, [r5, #12]
 8006d46:	065b      	lsls	r3, r3, #25
 8006d48:	f53f af2c 	bmi.w	8006ba4 <_svfiprintf_r+0x28>
 8006d4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d4e:	b01d      	add	sp, #116	; 0x74
 8006d50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d54:	ab03      	add	r3, sp, #12
 8006d56:	9300      	str	r3, [sp, #0]
 8006d58:	462a      	mov	r2, r5
 8006d5a:	4b06      	ldr	r3, [pc, #24]	; (8006d74 <_svfiprintf_r+0x1f8>)
 8006d5c:	a904      	add	r1, sp, #16
 8006d5e:	4638      	mov	r0, r7
 8006d60:	f7fd feec 	bl	8004b3c <_printf_i>
 8006d64:	e7eb      	b.n	8006d3e <_svfiprintf_r+0x1c2>
 8006d66:	bf00      	nop
 8006d68:	080076c4 	.word	0x080076c4
 8006d6c:	080076ce 	.word	0x080076ce
 8006d70:	080045f5 	.word	0x080045f5
 8006d74:	08006ac5 	.word	0x08006ac5
 8006d78:	080076ca 	.word	0x080076ca

08006d7c <__sfputc_r>:
 8006d7c:	6893      	ldr	r3, [r2, #8]
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	b410      	push	{r4}
 8006d84:	6093      	str	r3, [r2, #8]
 8006d86:	da08      	bge.n	8006d9a <__sfputc_r+0x1e>
 8006d88:	6994      	ldr	r4, [r2, #24]
 8006d8a:	42a3      	cmp	r3, r4
 8006d8c:	db01      	blt.n	8006d92 <__sfputc_r+0x16>
 8006d8e:	290a      	cmp	r1, #10
 8006d90:	d103      	bne.n	8006d9a <__sfputc_r+0x1e>
 8006d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d96:	f7fe b8a5 	b.w	8004ee4 <__swbuf_r>
 8006d9a:	6813      	ldr	r3, [r2, #0]
 8006d9c:	1c58      	adds	r0, r3, #1
 8006d9e:	6010      	str	r0, [r2, #0]
 8006da0:	7019      	strb	r1, [r3, #0]
 8006da2:	4608      	mov	r0, r1
 8006da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006da8:	4770      	bx	lr

08006daa <__sfputs_r>:
 8006daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dac:	4606      	mov	r6, r0
 8006dae:	460f      	mov	r7, r1
 8006db0:	4614      	mov	r4, r2
 8006db2:	18d5      	adds	r5, r2, r3
 8006db4:	42ac      	cmp	r4, r5
 8006db6:	d101      	bne.n	8006dbc <__sfputs_r+0x12>
 8006db8:	2000      	movs	r0, #0
 8006dba:	e007      	b.n	8006dcc <__sfputs_r+0x22>
 8006dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc0:	463a      	mov	r2, r7
 8006dc2:	4630      	mov	r0, r6
 8006dc4:	f7ff ffda 	bl	8006d7c <__sfputc_r>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	d1f3      	bne.n	8006db4 <__sfputs_r+0xa>
 8006dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006dd0 <_vfiprintf_r>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	460d      	mov	r5, r1
 8006dd6:	b09d      	sub	sp, #116	; 0x74
 8006dd8:	4614      	mov	r4, r2
 8006dda:	4698      	mov	r8, r3
 8006ddc:	4606      	mov	r6, r0
 8006dde:	b118      	cbz	r0, 8006de8 <_vfiprintf_r+0x18>
 8006de0:	6983      	ldr	r3, [r0, #24]
 8006de2:	b90b      	cbnz	r3, 8006de8 <_vfiprintf_r+0x18>
 8006de4:	f7ff f8d4 	bl	8005f90 <__sinit>
 8006de8:	4b89      	ldr	r3, [pc, #548]	; (8007010 <_vfiprintf_r+0x240>)
 8006dea:	429d      	cmp	r5, r3
 8006dec:	d11b      	bne.n	8006e26 <_vfiprintf_r+0x56>
 8006dee:	6875      	ldr	r5, [r6, #4]
 8006df0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006df2:	07d9      	lsls	r1, r3, #31
 8006df4:	d405      	bmi.n	8006e02 <_vfiprintf_r+0x32>
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	059a      	lsls	r2, r3, #22
 8006dfa:	d402      	bmi.n	8006e02 <_vfiprintf_r+0x32>
 8006dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dfe:	f7ff f96a 	bl	80060d6 <__retarget_lock_acquire_recursive>
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	071b      	lsls	r3, r3, #28
 8006e06:	d501      	bpl.n	8006e0c <_vfiprintf_r+0x3c>
 8006e08:	692b      	ldr	r3, [r5, #16]
 8006e0a:	b9eb      	cbnz	r3, 8006e48 <_vfiprintf_r+0x78>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4630      	mov	r0, r6
 8006e10:	f7fe f8ba 	bl	8004f88 <__swsetup_r>
 8006e14:	b1c0      	cbz	r0, 8006e48 <_vfiprintf_r+0x78>
 8006e16:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006e18:	07dc      	lsls	r4, r3, #31
 8006e1a:	d50e      	bpl.n	8006e3a <_vfiprintf_r+0x6a>
 8006e1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e20:	b01d      	add	sp, #116	; 0x74
 8006e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e26:	4b7b      	ldr	r3, [pc, #492]	; (8007014 <_vfiprintf_r+0x244>)
 8006e28:	429d      	cmp	r5, r3
 8006e2a:	d101      	bne.n	8006e30 <_vfiprintf_r+0x60>
 8006e2c:	68b5      	ldr	r5, [r6, #8]
 8006e2e:	e7df      	b.n	8006df0 <_vfiprintf_r+0x20>
 8006e30:	4b79      	ldr	r3, [pc, #484]	; (8007018 <_vfiprintf_r+0x248>)
 8006e32:	429d      	cmp	r5, r3
 8006e34:	bf08      	it	eq
 8006e36:	68f5      	ldreq	r5, [r6, #12]
 8006e38:	e7da      	b.n	8006df0 <_vfiprintf_r+0x20>
 8006e3a:	89ab      	ldrh	r3, [r5, #12]
 8006e3c:	0598      	lsls	r0, r3, #22
 8006e3e:	d4ed      	bmi.n	8006e1c <_vfiprintf_r+0x4c>
 8006e40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006e42:	f7ff f949 	bl	80060d8 <__retarget_lock_release_recursive>
 8006e46:	e7e9      	b.n	8006e1c <_vfiprintf_r+0x4c>
 8006e48:	2300      	movs	r3, #0
 8006e4a:	9309      	str	r3, [sp, #36]	; 0x24
 8006e4c:	2320      	movs	r3, #32
 8006e4e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e52:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e56:	2330      	movs	r3, #48	; 0x30
 8006e58:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800701c <_vfiprintf_r+0x24c>
 8006e5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e60:	f04f 0901 	mov.w	r9, #1
 8006e64:	4623      	mov	r3, r4
 8006e66:	469a      	mov	sl, r3
 8006e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e6c:	b10a      	cbz	r2, 8006e72 <_vfiprintf_r+0xa2>
 8006e6e:	2a25      	cmp	r2, #37	; 0x25
 8006e70:	d1f9      	bne.n	8006e66 <_vfiprintf_r+0x96>
 8006e72:	ebba 0b04 	subs.w	fp, sl, r4
 8006e76:	d00b      	beq.n	8006e90 <_vfiprintf_r+0xc0>
 8006e78:	465b      	mov	r3, fp
 8006e7a:	4622      	mov	r2, r4
 8006e7c:	4629      	mov	r1, r5
 8006e7e:	4630      	mov	r0, r6
 8006e80:	f7ff ff93 	bl	8006daa <__sfputs_r>
 8006e84:	3001      	adds	r0, #1
 8006e86:	f000 80aa 	beq.w	8006fde <_vfiprintf_r+0x20e>
 8006e8a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e8c:	445a      	add	r2, fp
 8006e8e:	9209      	str	r2, [sp, #36]	; 0x24
 8006e90:	f89a 3000 	ldrb.w	r3, [sl]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	f000 80a2 	beq.w	8006fde <_vfiprintf_r+0x20e>
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ea4:	f10a 0a01 	add.w	sl, sl, #1
 8006ea8:	9304      	str	r3, [sp, #16]
 8006eaa:	9307      	str	r3, [sp, #28]
 8006eac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eb0:	931a      	str	r3, [sp, #104]	; 0x68
 8006eb2:	4654      	mov	r4, sl
 8006eb4:	2205      	movs	r2, #5
 8006eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eba:	4858      	ldr	r0, [pc, #352]	; (800701c <_vfiprintf_r+0x24c>)
 8006ebc:	f7f9 f9a0 	bl	8000200 <memchr>
 8006ec0:	9a04      	ldr	r2, [sp, #16]
 8006ec2:	b9d8      	cbnz	r0, 8006efc <_vfiprintf_r+0x12c>
 8006ec4:	06d1      	lsls	r1, r2, #27
 8006ec6:	bf44      	itt	mi
 8006ec8:	2320      	movmi	r3, #32
 8006eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ece:	0713      	lsls	r3, r2, #28
 8006ed0:	bf44      	itt	mi
 8006ed2:	232b      	movmi	r3, #43	; 0x2b
 8006ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8006edc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ede:	d015      	beq.n	8006f0c <_vfiprintf_r+0x13c>
 8006ee0:	9a07      	ldr	r2, [sp, #28]
 8006ee2:	4654      	mov	r4, sl
 8006ee4:	2000      	movs	r0, #0
 8006ee6:	f04f 0c0a 	mov.w	ip, #10
 8006eea:	4621      	mov	r1, r4
 8006eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006ef0:	3b30      	subs	r3, #48	; 0x30
 8006ef2:	2b09      	cmp	r3, #9
 8006ef4:	d94e      	bls.n	8006f94 <_vfiprintf_r+0x1c4>
 8006ef6:	b1b0      	cbz	r0, 8006f26 <_vfiprintf_r+0x156>
 8006ef8:	9207      	str	r2, [sp, #28]
 8006efa:	e014      	b.n	8006f26 <_vfiprintf_r+0x156>
 8006efc:	eba0 0308 	sub.w	r3, r0, r8
 8006f00:	fa09 f303 	lsl.w	r3, r9, r3
 8006f04:	4313      	orrs	r3, r2
 8006f06:	9304      	str	r3, [sp, #16]
 8006f08:	46a2      	mov	sl, r4
 8006f0a:	e7d2      	b.n	8006eb2 <_vfiprintf_r+0xe2>
 8006f0c:	9b03      	ldr	r3, [sp, #12]
 8006f0e:	1d19      	adds	r1, r3, #4
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	9103      	str	r1, [sp, #12]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bfbb      	ittet	lt
 8006f18:	425b      	neglt	r3, r3
 8006f1a:	f042 0202 	orrlt.w	r2, r2, #2
 8006f1e:	9307      	strge	r3, [sp, #28]
 8006f20:	9307      	strlt	r3, [sp, #28]
 8006f22:	bfb8      	it	lt
 8006f24:	9204      	strlt	r2, [sp, #16]
 8006f26:	7823      	ldrb	r3, [r4, #0]
 8006f28:	2b2e      	cmp	r3, #46	; 0x2e
 8006f2a:	d10c      	bne.n	8006f46 <_vfiprintf_r+0x176>
 8006f2c:	7863      	ldrb	r3, [r4, #1]
 8006f2e:	2b2a      	cmp	r3, #42	; 0x2a
 8006f30:	d135      	bne.n	8006f9e <_vfiprintf_r+0x1ce>
 8006f32:	9b03      	ldr	r3, [sp, #12]
 8006f34:	1d1a      	adds	r2, r3, #4
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	9203      	str	r2, [sp, #12]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	bfb8      	it	lt
 8006f3e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006f42:	3402      	adds	r4, #2
 8006f44:	9305      	str	r3, [sp, #20]
 8006f46:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800702c <_vfiprintf_r+0x25c>
 8006f4a:	7821      	ldrb	r1, [r4, #0]
 8006f4c:	2203      	movs	r2, #3
 8006f4e:	4650      	mov	r0, sl
 8006f50:	f7f9 f956 	bl	8000200 <memchr>
 8006f54:	b140      	cbz	r0, 8006f68 <_vfiprintf_r+0x198>
 8006f56:	2340      	movs	r3, #64	; 0x40
 8006f58:	eba0 000a 	sub.w	r0, r0, sl
 8006f5c:	fa03 f000 	lsl.w	r0, r3, r0
 8006f60:	9b04      	ldr	r3, [sp, #16]
 8006f62:	4303      	orrs	r3, r0
 8006f64:	3401      	adds	r4, #1
 8006f66:	9304      	str	r3, [sp, #16]
 8006f68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f6c:	482c      	ldr	r0, [pc, #176]	; (8007020 <_vfiprintf_r+0x250>)
 8006f6e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f72:	2206      	movs	r2, #6
 8006f74:	f7f9 f944 	bl	8000200 <memchr>
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	d03f      	beq.n	8006ffc <_vfiprintf_r+0x22c>
 8006f7c:	4b29      	ldr	r3, [pc, #164]	; (8007024 <_vfiprintf_r+0x254>)
 8006f7e:	bb1b      	cbnz	r3, 8006fc8 <_vfiprintf_r+0x1f8>
 8006f80:	9b03      	ldr	r3, [sp, #12]
 8006f82:	3307      	adds	r3, #7
 8006f84:	f023 0307 	bic.w	r3, r3, #7
 8006f88:	3308      	adds	r3, #8
 8006f8a:	9303      	str	r3, [sp, #12]
 8006f8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f8e:	443b      	add	r3, r7
 8006f90:	9309      	str	r3, [sp, #36]	; 0x24
 8006f92:	e767      	b.n	8006e64 <_vfiprintf_r+0x94>
 8006f94:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f98:	460c      	mov	r4, r1
 8006f9a:	2001      	movs	r0, #1
 8006f9c:	e7a5      	b.n	8006eea <_vfiprintf_r+0x11a>
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	3401      	adds	r4, #1
 8006fa2:	9305      	str	r3, [sp, #20]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	f04f 0c0a 	mov.w	ip, #10
 8006faa:	4620      	mov	r0, r4
 8006fac:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fb0:	3a30      	subs	r2, #48	; 0x30
 8006fb2:	2a09      	cmp	r2, #9
 8006fb4:	d903      	bls.n	8006fbe <_vfiprintf_r+0x1ee>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d0c5      	beq.n	8006f46 <_vfiprintf_r+0x176>
 8006fba:	9105      	str	r1, [sp, #20]
 8006fbc:	e7c3      	b.n	8006f46 <_vfiprintf_r+0x176>
 8006fbe:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	2301      	movs	r3, #1
 8006fc6:	e7f0      	b.n	8006faa <_vfiprintf_r+0x1da>
 8006fc8:	ab03      	add	r3, sp, #12
 8006fca:	9300      	str	r3, [sp, #0]
 8006fcc:	462a      	mov	r2, r5
 8006fce:	4b16      	ldr	r3, [pc, #88]	; (8007028 <_vfiprintf_r+0x258>)
 8006fd0:	a904      	add	r1, sp, #16
 8006fd2:	4630      	mov	r0, r6
 8006fd4:	f7fd fb0e 	bl	80045f4 <_printf_float>
 8006fd8:	4607      	mov	r7, r0
 8006fda:	1c78      	adds	r0, r7, #1
 8006fdc:	d1d6      	bne.n	8006f8c <_vfiprintf_r+0x1bc>
 8006fde:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006fe0:	07d9      	lsls	r1, r3, #31
 8006fe2:	d405      	bmi.n	8006ff0 <_vfiprintf_r+0x220>
 8006fe4:	89ab      	ldrh	r3, [r5, #12]
 8006fe6:	059a      	lsls	r2, r3, #22
 8006fe8:	d402      	bmi.n	8006ff0 <_vfiprintf_r+0x220>
 8006fea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006fec:	f7ff f874 	bl	80060d8 <__retarget_lock_release_recursive>
 8006ff0:	89ab      	ldrh	r3, [r5, #12]
 8006ff2:	065b      	lsls	r3, r3, #25
 8006ff4:	f53f af12 	bmi.w	8006e1c <_vfiprintf_r+0x4c>
 8006ff8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006ffa:	e711      	b.n	8006e20 <_vfiprintf_r+0x50>
 8006ffc:	ab03      	add	r3, sp, #12
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	462a      	mov	r2, r5
 8007002:	4b09      	ldr	r3, [pc, #36]	; (8007028 <_vfiprintf_r+0x258>)
 8007004:	a904      	add	r1, sp, #16
 8007006:	4630      	mov	r0, r6
 8007008:	f7fd fd98 	bl	8004b3c <_printf_i>
 800700c:	e7e4      	b.n	8006fd8 <_vfiprintf_r+0x208>
 800700e:	bf00      	nop
 8007010:	0800752c 	.word	0x0800752c
 8007014:	0800754c 	.word	0x0800754c
 8007018:	0800750c 	.word	0x0800750c
 800701c:	080076c4 	.word	0x080076c4
 8007020:	080076ce 	.word	0x080076ce
 8007024:	080045f5 	.word	0x080045f5
 8007028:	08006dab 	.word	0x08006dab
 800702c:	080076ca 	.word	0x080076ca

08007030 <_sbrk_r>:
 8007030:	b538      	push	{r3, r4, r5, lr}
 8007032:	4d06      	ldr	r5, [pc, #24]	; (800704c <_sbrk_r+0x1c>)
 8007034:	2300      	movs	r3, #0
 8007036:	4604      	mov	r4, r0
 8007038:	4608      	mov	r0, r1
 800703a:	602b      	str	r3, [r5, #0]
 800703c:	f7fa fe7e 	bl	8001d3c <_sbrk>
 8007040:	1c43      	adds	r3, r0, #1
 8007042:	d102      	bne.n	800704a <_sbrk_r+0x1a>
 8007044:	682b      	ldr	r3, [r5, #0]
 8007046:	b103      	cbz	r3, 800704a <_sbrk_r+0x1a>
 8007048:	6023      	str	r3, [r4, #0]
 800704a:	bd38      	pop	{r3, r4, r5, pc}
 800704c:	20000314 	.word	0x20000314

08007050 <__sread>:
 8007050:	b510      	push	{r4, lr}
 8007052:	460c      	mov	r4, r1
 8007054:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007058:	f000 f92c 	bl	80072b4 <_read_r>
 800705c:	2800      	cmp	r0, #0
 800705e:	bfab      	itete	ge
 8007060:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007062:	89a3      	ldrhlt	r3, [r4, #12]
 8007064:	181b      	addge	r3, r3, r0
 8007066:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800706a:	bfac      	ite	ge
 800706c:	6563      	strge	r3, [r4, #84]	; 0x54
 800706e:	81a3      	strhlt	r3, [r4, #12]
 8007070:	bd10      	pop	{r4, pc}

08007072 <__swrite>:
 8007072:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007076:	461f      	mov	r7, r3
 8007078:	898b      	ldrh	r3, [r1, #12]
 800707a:	05db      	lsls	r3, r3, #23
 800707c:	4605      	mov	r5, r0
 800707e:	460c      	mov	r4, r1
 8007080:	4616      	mov	r6, r2
 8007082:	d505      	bpl.n	8007090 <__swrite+0x1e>
 8007084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007088:	2302      	movs	r3, #2
 800708a:	2200      	movs	r2, #0
 800708c:	f000 f898 	bl	80071c0 <_lseek_r>
 8007090:	89a3      	ldrh	r3, [r4, #12]
 8007092:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007096:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800709a:	81a3      	strh	r3, [r4, #12]
 800709c:	4632      	mov	r2, r6
 800709e:	463b      	mov	r3, r7
 80070a0:	4628      	mov	r0, r5
 80070a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070a6:	f000 b817 	b.w	80070d8 <_write_r>

080070aa <__sseek>:
 80070aa:	b510      	push	{r4, lr}
 80070ac:	460c      	mov	r4, r1
 80070ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070b2:	f000 f885 	bl	80071c0 <_lseek_r>
 80070b6:	1c43      	adds	r3, r0, #1
 80070b8:	89a3      	ldrh	r3, [r4, #12]
 80070ba:	bf15      	itete	ne
 80070bc:	6560      	strne	r0, [r4, #84]	; 0x54
 80070be:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070c2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070c6:	81a3      	strheq	r3, [r4, #12]
 80070c8:	bf18      	it	ne
 80070ca:	81a3      	strhne	r3, [r4, #12]
 80070cc:	bd10      	pop	{r4, pc}

080070ce <__sclose>:
 80070ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d2:	f000 b831 	b.w	8007138 <_close_r>
	...

080070d8 <_write_r>:
 80070d8:	b538      	push	{r3, r4, r5, lr}
 80070da:	4d07      	ldr	r5, [pc, #28]	; (80070f8 <_write_r+0x20>)
 80070dc:	4604      	mov	r4, r0
 80070de:	4608      	mov	r0, r1
 80070e0:	4611      	mov	r1, r2
 80070e2:	2200      	movs	r2, #0
 80070e4:	602a      	str	r2, [r5, #0]
 80070e6:	461a      	mov	r2, r3
 80070e8:	f7fa fdd7 	bl	8001c9a <_write>
 80070ec:	1c43      	adds	r3, r0, #1
 80070ee:	d102      	bne.n	80070f6 <_write_r+0x1e>
 80070f0:	682b      	ldr	r3, [r5, #0]
 80070f2:	b103      	cbz	r3, 80070f6 <_write_r+0x1e>
 80070f4:	6023      	str	r3, [r4, #0]
 80070f6:	bd38      	pop	{r3, r4, r5, pc}
 80070f8:	20000314 	.word	0x20000314

080070fc <__assert_func>:
 80070fc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070fe:	4614      	mov	r4, r2
 8007100:	461a      	mov	r2, r3
 8007102:	4b09      	ldr	r3, [pc, #36]	; (8007128 <__assert_func+0x2c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	4605      	mov	r5, r0
 8007108:	68d8      	ldr	r0, [r3, #12]
 800710a:	b14c      	cbz	r4, 8007120 <__assert_func+0x24>
 800710c:	4b07      	ldr	r3, [pc, #28]	; (800712c <__assert_func+0x30>)
 800710e:	9100      	str	r1, [sp, #0]
 8007110:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007114:	4906      	ldr	r1, [pc, #24]	; (8007130 <__assert_func+0x34>)
 8007116:	462b      	mov	r3, r5
 8007118:	f000 f81e 	bl	8007158 <fiprintf>
 800711c:	f000 f8e9 	bl	80072f2 <abort>
 8007120:	4b04      	ldr	r3, [pc, #16]	; (8007134 <__assert_func+0x38>)
 8007122:	461c      	mov	r4, r3
 8007124:	e7f3      	b.n	800710e <__assert_func+0x12>
 8007126:	bf00      	nop
 8007128:	20000010 	.word	0x20000010
 800712c:	080076d5 	.word	0x080076d5
 8007130:	080076e2 	.word	0x080076e2
 8007134:	08007710 	.word	0x08007710

08007138 <_close_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	4d06      	ldr	r5, [pc, #24]	; (8007154 <_close_r+0x1c>)
 800713c:	2300      	movs	r3, #0
 800713e:	4604      	mov	r4, r0
 8007140:	4608      	mov	r0, r1
 8007142:	602b      	str	r3, [r5, #0]
 8007144:	f7fa fdc5 	bl	8001cd2 <_close>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_close_r+0x1a>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_close_r+0x1a>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	20000314 	.word	0x20000314

08007158 <fiprintf>:
 8007158:	b40e      	push	{r1, r2, r3}
 800715a:	b503      	push	{r0, r1, lr}
 800715c:	4601      	mov	r1, r0
 800715e:	ab03      	add	r3, sp, #12
 8007160:	4805      	ldr	r0, [pc, #20]	; (8007178 <fiprintf+0x20>)
 8007162:	f853 2b04 	ldr.w	r2, [r3], #4
 8007166:	6800      	ldr	r0, [r0, #0]
 8007168:	9301      	str	r3, [sp, #4]
 800716a:	f7ff fe31 	bl	8006dd0 <_vfiprintf_r>
 800716e:	b002      	add	sp, #8
 8007170:	f85d eb04 	ldr.w	lr, [sp], #4
 8007174:	b003      	add	sp, #12
 8007176:	4770      	bx	lr
 8007178:	20000010 	.word	0x20000010

0800717c <_fstat_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4d07      	ldr	r5, [pc, #28]	; (800719c <_fstat_r+0x20>)
 8007180:	2300      	movs	r3, #0
 8007182:	4604      	mov	r4, r0
 8007184:	4608      	mov	r0, r1
 8007186:	4611      	mov	r1, r2
 8007188:	602b      	str	r3, [r5, #0]
 800718a:	f7fa fdae 	bl	8001cea <_fstat>
 800718e:	1c43      	adds	r3, r0, #1
 8007190:	d102      	bne.n	8007198 <_fstat_r+0x1c>
 8007192:	682b      	ldr	r3, [r5, #0]
 8007194:	b103      	cbz	r3, 8007198 <_fstat_r+0x1c>
 8007196:	6023      	str	r3, [r4, #0]
 8007198:	bd38      	pop	{r3, r4, r5, pc}
 800719a:	bf00      	nop
 800719c:	20000314 	.word	0x20000314

080071a0 <_isatty_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4d06      	ldr	r5, [pc, #24]	; (80071bc <_isatty_r+0x1c>)
 80071a4:	2300      	movs	r3, #0
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	602b      	str	r3, [r5, #0]
 80071ac:	f7fa fdad 	bl	8001d0a <_isatty>
 80071b0:	1c43      	adds	r3, r0, #1
 80071b2:	d102      	bne.n	80071ba <_isatty_r+0x1a>
 80071b4:	682b      	ldr	r3, [r5, #0]
 80071b6:	b103      	cbz	r3, 80071ba <_isatty_r+0x1a>
 80071b8:	6023      	str	r3, [r4, #0]
 80071ba:	bd38      	pop	{r3, r4, r5, pc}
 80071bc:	20000314 	.word	0x20000314

080071c0 <_lseek_r>:
 80071c0:	b538      	push	{r3, r4, r5, lr}
 80071c2:	4d07      	ldr	r5, [pc, #28]	; (80071e0 <_lseek_r+0x20>)
 80071c4:	4604      	mov	r4, r0
 80071c6:	4608      	mov	r0, r1
 80071c8:	4611      	mov	r1, r2
 80071ca:	2200      	movs	r2, #0
 80071cc:	602a      	str	r2, [r5, #0]
 80071ce:	461a      	mov	r2, r3
 80071d0:	f7fa fda6 	bl	8001d20 <_lseek>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_lseek_r+0x1e>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_lseek_r+0x1e>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	20000314 	.word	0x20000314

080071e4 <__ascii_mbtowc>:
 80071e4:	b082      	sub	sp, #8
 80071e6:	b901      	cbnz	r1, 80071ea <__ascii_mbtowc+0x6>
 80071e8:	a901      	add	r1, sp, #4
 80071ea:	b142      	cbz	r2, 80071fe <__ascii_mbtowc+0x1a>
 80071ec:	b14b      	cbz	r3, 8007202 <__ascii_mbtowc+0x1e>
 80071ee:	7813      	ldrb	r3, [r2, #0]
 80071f0:	600b      	str	r3, [r1, #0]
 80071f2:	7812      	ldrb	r2, [r2, #0]
 80071f4:	1e10      	subs	r0, r2, #0
 80071f6:	bf18      	it	ne
 80071f8:	2001      	movne	r0, #1
 80071fa:	b002      	add	sp, #8
 80071fc:	4770      	bx	lr
 80071fe:	4610      	mov	r0, r2
 8007200:	e7fb      	b.n	80071fa <__ascii_mbtowc+0x16>
 8007202:	f06f 0001 	mvn.w	r0, #1
 8007206:	e7f8      	b.n	80071fa <__ascii_mbtowc+0x16>

08007208 <memmove>:
 8007208:	4288      	cmp	r0, r1
 800720a:	b510      	push	{r4, lr}
 800720c:	eb01 0402 	add.w	r4, r1, r2
 8007210:	d902      	bls.n	8007218 <memmove+0x10>
 8007212:	4284      	cmp	r4, r0
 8007214:	4623      	mov	r3, r4
 8007216:	d807      	bhi.n	8007228 <memmove+0x20>
 8007218:	1e43      	subs	r3, r0, #1
 800721a:	42a1      	cmp	r1, r4
 800721c:	d008      	beq.n	8007230 <memmove+0x28>
 800721e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007222:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007226:	e7f8      	b.n	800721a <memmove+0x12>
 8007228:	4402      	add	r2, r0
 800722a:	4601      	mov	r1, r0
 800722c:	428a      	cmp	r2, r1
 800722e:	d100      	bne.n	8007232 <memmove+0x2a>
 8007230:	bd10      	pop	{r4, pc}
 8007232:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007236:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800723a:	e7f7      	b.n	800722c <memmove+0x24>

0800723c <__malloc_lock>:
 800723c:	4801      	ldr	r0, [pc, #4]	; (8007244 <__malloc_lock+0x8>)
 800723e:	f7fe bf4a 	b.w	80060d6 <__retarget_lock_acquire_recursive>
 8007242:	bf00      	nop
 8007244:	20000308 	.word	0x20000308

08007248 <__malloc_unlock>:
 8007248:	4801      	ldr	r0, [pc, #4]	; (8007250 <__malloc_unlock+0x8>)
 800724a:	f7fe bf45 	b.w	80060d8 <__retarget_lock_release_recursive>
 800724e:	bf00      	nop
 8007250:	20000308 	.word	0x20000308

08007254 <_realloc_r>:
 8007254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007258:	4680      	mov	r8, r0
 800725a:	4614      	mov	r4, r2
 800725c:	460e      	mov	r6, r1
 800725e:	b921      	cbnz	r1, 800726a <_realloc_r+0x16>
 8007260:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007264:	4611      	mov	r1, r2
 8007266:	f7ff bbb9 	b.w	80069dc <_malloc_r>
 800726a:	b92a      	cbnz	r2, 8007278 <_realloc_r+0x24>
 800726c:	f7ff fb4a 	bl	8006904 <_free_r>
 8007270:	4625      	mov	r5, r4
 8007272:	4628      	mov	r0, r5
 8007274:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007278:	f000 f842 	bl	8007300 <_malloc_usable_size_r>
 800727c:	4284      	cmp	r4, r0
 800727e:	4607      	mov	r7, r0
 8007280:	d802      	bhi.n	8007288 <_realloc_r+0x34>
 8007282:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007286:	d812      	bhi.n	80072ae <_realloc_r+0x5a>
 8007288:	4621      	mov	r1, r4
 800728a:	4640      	mov	r0, r8
 800728c:	f7ff fba6 	bl	80069dc <_malloc_r>
 8007290:	4605      	mov	r5, r0
 8007292:	2800      	cmp	r0, #0
 8007294:	d0ed      	beq.n	8007272 <_realloc_r+0x1e>
 8007296:	42bc      	cmp	r4, r7
 8007298:	4622      	mov	r2, r4
 800729a:	4631      	mov	r1, r6
 800729c:	bf28      	it	cs
 800729e:	463a      	movcs	r2, r7
 80072a0:	f7fe ff88 	bl	80061b4 <memcpy>
 80072a4:	4631      	mov	r1, r6
 80072a6:	4640      	mov	r0, r8
 80072a8:	f7ff fb2c 	bl	8006904 <_free_r>
 80072ac:	e7e1      	b.n	8007272 <_realloc_r+0x1e>
 80072ae:	4635      	mov	r5, r6
 80072b0:	e7df      	b.n	8007272 <_realloc_r+0x1e>
	...

080072b4 <_read_r>:
 80072b4:	b538      	push	{r3, r4, r5, lr}
 80072b6:	4d07      	ldr	r5, [pc, #28]	; (80072d4 <_read_r+0x20>)
 80072b8:	4604      	mov	r4, r0
 80072ba:	4608      	mov	r0, r1
 80072bc:	4611      	mov	r1, r2
 80072be:	2200      	movs	r2, #0
 80072c0:	602a      	str	r2, [r5, #0]
 80072c2:	461a      	mov	r2, r3
 80072c4:	f7fa fccc 	bl	8001c60 <_read>
 80072c8:	1c43      	adds	r3, r0, #1
 80072ca:	d102      	bne.n	80072d2 <_read_r+0x1e>
 80072cc:	682b      	ldr	r3, [r5, #0]
 80072ce:	b103      	cbz	r3, 80072d2 <_read_r+0x1e>
 80072d0:	6023      	str	r3, [r4, #0]
 80072d2:	bd38      	pop	{r3, r4, r5, pc}
 80072d4:	20000314 	.word	0x20000314

080072d8 <__ascii_wctomb>:
 80072d8:	b149      	cbz	r1, 80072ee <__ascii_wctomb+0x16>
 80072da:	2aff      	cmp	r2, #255	; 0xff
 80072dc:	bf85      	ittet	hi
 80072de:	238a      	movhi	r3, #138	; 0x8a
 80072e0:	6003      	strhi	r3, [r0, #0]
 80072e2:	700a      	strbls	r2, [r1, #0]
 80072e4:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 80072e8:	bf98      	it	ls
 80072ea:	2001      	movls	r0, #1
 80072ec:	4770      	bx	lr
 80072ee:	4608      	mov	r0, r1
 80072f0:	4770      	bx	lr

080072f2 <abort>:
 80072f2:	b508      	push	{r3, lr}
 80072f4:	2006      	movs	r0, #6
 80072f6:	f000 f833 	bl	8007360 <raise>
 80072fa:	2001      	movs	r0, #1
 80072fc:	f7fa fca6 	bl	8001c4c <_exit>

08007300 <_malloc_usable_size_r>:
 8007300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007304:	1f18      	subs	r0, r3, #4
 8007306:	2b00      	cmp	r3, #0
 8007308:	bfbc      	itt	lt
 800730a:	580b      	ldrlt	r3, [r1, r0]
 800730c:	18c0      	addlt	r0, r0, r3
 800730e:	4770      	bx	lr

08007310 <_raise_r>:
 8007310:	291f      	cmp	r1, #31
 8007312:	b538      	push	{r3, r4, r5, lr}
 8007314:	4604      	mov	r4, r0
 8007316:	460d      	mov	r5, r1
 8007318:	d904      	bls.n	8007324 <_raise_r+0x14>
 800731a:	2316      	movs	r3, #22
 800731c:	6003      	str	r3, [r0, #0]
 800731e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007322:	bd38      	pop	{r3, r4, r5, pc}
 8007324:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007326:	b112      	cbz	r2, 800732e <_raise_r+0x1e>
 8007328:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800732c:	b94b      	cbnz	r3, 8007342 <_raise_r+0x32>
 800732e:	4620      	mov	r0, r4
 8007330:	f000 f830 	bl	8007394 <_getpid_r>
 8007334:	462a      	mov	r2, r5
 8007336:	4601      	mov	r1, r0
 8007338:	4620      	mov	r0, r4
 800733a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800733e:	f000 b817 	b.w	8007370 <_kill_r>
 8007342:	2b01      	cmp	r3, #1
 8007344:	d00a      	beq.n	800735c <_raise_r+0x4c>
 8007346:	1c59      	adds	r1, r3, #1
 8007348:	d103      	bne.n	8007352 <_raise_r+0x42>
 800734a:	2316      	movs	r3, #22
 800734c:	6003      	str	r3, [r0, #0]
 800734e:	2001      	movs	r0, #1
 8007350:	e7e7      	b.n	8007322 <_raise_r+0x12>
 8007352:	2400      	movs	r4, #0
 8007354:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007358:	4628      	mov	r0, r5
 800735a:	4798      	blx	r3
 800735c:	2000      	movs	r0, #0
 800735e:	e7e0      	b.n	8007322 <_raise_r+0x12>

08007360 <raise>:
 8007360:	4b02      	ldr	r3, [pc, #8]	; (800736c <raise+0xc>)
 8007362:	4601      	mov	r1, r0
 8007364:	6818      	ldr	r0, [r3, #0]
 8007366:	f7ff bfd3 	b.w	8007310 <_raise_r>
 800736a:	bf00      	nop
 800736c:	20000010 	.word	0x20000010

08007370 <_kill_r>:
 8007370:	b538      	push	{r3, r4, r5, lr}
 8007372:	4d07      	ldr	r5, [pc, #28]	; (8007390 <_kill_r+0x20>)
 8007374:	2300      	movs	r3, #0
 8007376:	4604      	mov	r4, r0
 8007378:	4608      	mov	r0, r1
 800737a:	4611      	mov	r1, r2
 800737c:	602b      	str	r3, [r5, #0]
 800737e:	f7fa fc55 	bl	8001c2c <_kill>
 8007382:	1c43      	adds	r3, r0, #1
 8007384:	d102      	bne.n	800738c <_kill_r+0x1c>
 8007386:	682b      	ldr	r3, [r5, #0]
 8007388:	b103      	cbz	r3, 800738c <_kill_r+0x1c>
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	bd38      	pop	{r3, r4, r5, pc}
 800738e:	bf00      	nop
 8007390:	20000314 	.word	0x20000314

08007394 <_getpid_r>:
 8007394:	f7fa bc42 	b.w	8001c1c <_getpid>

08007398 <_init>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	bf00      	nop
 800739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739e:	bc08      	pop	{r3}
 80073a0:	469e      	mov	lr, r3
 80073a2:	4770      	bx	lr

080073a4 <_fini>:
 80073a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073a6:	bf00      	nop
 80073a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073aa:	bc08      	pop	{r3}
 80073ac:	469e      	mov	lr, r3
 80073ae:	4770      	bx	lr
