
TF_Termometro2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000741c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004ac  080075d0  080075d0  000175d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a7c  08007a7c  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  08007a7c  08007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a84  08007a84  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a88  08007a88  00017a88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08007a8c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201e0  2**0
                  CONTENTS
 10 .bss          00000238  200001e0  200001e0  000201e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000418  20000418  000201e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010609  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023a0  00000000  00000000  00030819  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00032bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c58  00000000  00000000  00033908  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002501a  00000000  00000000  00034560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011062  00000000  00000000  0005957a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d811a  00000000  00000000  0006a5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001426f6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004868  00000000  00000000  00142748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080075b4 	.word	0x080075b4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001e4 	.word	0x200001e4
 80001ec:	080075b4 	.word	0x080075b4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bdc:	f000 b974 	b.w	8000ec8 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	4604      	mov	r4, r0
 8000c00:	468e      	mov	lr, r1
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d14d      	bne.n	8000ca2 <__udivmoddi4+0xaa>
 8000c06:	428a      	cmp	r2, r1
 8000c08:	4694      	mov	ip, r2
 8000c0a:	d969      	bls.n	8000ce0 <__udivmoddi4+0xe8>
 8000c0c:	fab2 f282 	clz	r2, r2
 8000c10:	b152      	cbz	r2, 8000c28 <__udivmoddi4+0x30>
 8000c12:	fa01 f302 	lsl.w	r3, r1, r2
 8000c16:	f1c2 0120 	rsb	r1, r2, #32
 8000c1a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c1e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c22:	ea41 0e03 	orr.w	lr, r1, r3
 8000c26:	4094      	lsls	r4, r2
 8000c28:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c2c:	0c21      	lsrs	r1, r4, #16
 8000c2e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c32:	fa1f f78c 	uxth.w	r7, ip
 8000c36:	fb08 e316 	mls	r3, r8, r6, lr
 8000c3a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c3e:	fb06 f107 	mul.w	r1, r6, r7
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d90a      	bls.n	8000c5c <__udivmoddi4+0x64>
 8000c46:	eb1c 0303 	adds.w	r3, ip, r3
 8000c4a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c4e:	f080 811f 	bcs.w	8000e90 <__udivmoddi4+0x298>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 811c 	bls.w	8000e90 <__udivmoddi4+0x298>
 8000c58:	3e02      	subs	r6, #2
 8000c5a:	4463      	add	r3, ip
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c64:	fb08 3310 	mls	r3, r8, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 f707 	mul.w	r7, r0, r7
 8000c70:	42a7      	cmp	r7, r4
 8000c72:	d90a      	bls.n	8000c8a <__udivmoddi4+0x92>
 8000c74:	eb1c 0404 	adds.w	r4, ip, r4
 8000c78:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7c:	f080 810a 	bcs.w	8000e94 <__udivmoddi4+0x29c>
 8000c80:	42a7      	cmp	r7, r4
 8000c82:	f240 8107 	bls.w	8000e94 <__udivmoddi4+0x29c>
 8000c86:	4464      	add	r4, ip
 8000c88:	3802      	subs	r0, #2
 8000c8a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c8e:	1be4      	subs	r4, r4, r7
 8000c90:	2600      	movs	r6, #0
 8000c92:	b11d      	cbz	r5, 8000c9c <__udivmoddi4+0xa4>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c5 4300 	strd	r4, r3, [r5]
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xc2>
 8000ca6:	2d00      	cmp	r5, #0
 8000ca8:	f000 80ef 	beq.w	8000e8a <__udivmoddi4+0x292>
 8000cac:	2600      	movs	r6, #0
 8000cae:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb2:	4630      	mov	r0, r6
 8000cb4:	4631      	mov	r1, r6
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f683 	clz	r6, r3
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	d14a      	bne.n	8000d58 <__udivmoddi4+0x160>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd4>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80f9 	bhi.w	8000ebe <__udivmoddi4+0x2c6>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	469e      	mov	lr, r3
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa4>
 8000cda:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xec>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 8092 	bne.w	8000e12 <__udivmoddi4+0x21a>
 8000cee:	eba1 010c 	sub.w	r1, r1, ip
 8000cf2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf6:	fa1f fe8c 	uxth.w	lr, ip
 8000cfa:	2601      	movs	r6, #1
 8000cfc:	0c20      	lsrs	r0, r4, #16
 8000cfe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d02:	fb07 1113 	mls	r1, r7, r3, r1
 8000d06:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d0a:	fb0e f003 	mul.w	r0, lr, r3
 8000d0e:	4288      	cmp	r0, r1
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x12c>
 8000d12:	eb1c 0101 	adds.w	r1, ip, r1
 8000d16:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d1a:	d202      	bcs.n	8000d22 <__udivmoddi4+0x12a>
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	f200 80cb 	bhi.w	8000eb8 <__udivmoddi4+0x2c0>
 8000d22:	4643      	mov	r3, r8
 8000d24:	1a09      	subs	r1, r1, r0
 8000d26:	b2a4      	uxth	r4, r4
 8000d28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d2c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d30:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d34:	fb0e fe00 	mul.w	lr, lr, r0
 8000d38:	45a6      	cmp	lr, r4
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x156>
 8000d3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d40:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d44:	d202      	bcs.n	8000d4c <__udivmoddi4+0x154>
 8000d46:	45a6      	cmp	lr, r4
 8000d48:	f200 80bb 	bhi.w	8000ec2 <__udivmoddi4+0x2ca>
 8000d4c:	4608      	mov	r0, r1
 8000d4e:	eba4 040e 	sub.w	r4, r4, lr
 8000d52:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d56:	e79c      	b.n	8000c92 <__udivmoddi4+0x9a>
 8000d58:	f1c6 0720 	rsb	r7, r6, #32
 8000d5c:	40b3      	lsls	r3, r6
 8000d5e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d62:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d66:	fa20 f407 	lsr.w	r4, r0, r7
 8000d6a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d6e:	431c      	orrs	r4, r3
 8000d70:	40f9      	lsrs	r1, r7
 8000d72:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d76:	fa00 f306 	lsl.w	r3, r0, r6
 8000d7a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d7e:	0c20      	lsrs	r0, r4, #16
 8000d80:	fa1f fe8c 	uxth.w	lr, ip
 8000d84:	fb09 1118 	mls	r1, r9, r8, r1
 8000d88:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d90:	4288      	cmp	r0, r1
 8000d92:	fa02 f206 	lsl.w	r2, r2, r6
 8000d96:	d90b      	bls.n	8000db0 <__udivmoddi4+0x1b8>
 8000d98:	eb1c 0101 	adds.w	r1, ip, r1
 8000d9c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000da0:	f080 8088 	bcs.w	8000eb4 <__udivmoddi4+0x2bc>
 8000da4:	4288      	cmp	r0, r1
 8000da6:	f240 8085 	bls.w	8000eb4 <__udivmoddi4+0x2bc>
 8000daa:	f1a8 0802 	sub.w	r8, r8, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	1a09      	subs	r1, r1, r0
 8000db2:	b2a4      	uxth	r4, r4
 8000db4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000db8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dbc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000dc0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dc4:	458e      	cmp	lr, r1
 8000dc6:	d908      	bls.n	8000dda <__udivmoddi4+0x1e2>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000dd0:	d26c      	bcs.n	8000eac <__udivmoddi4+0x2b4>
 8000dd2:	458e      	cmp	lr, r1
 8000dd4:	d96a      	bls.n	8000eac <__udivmoddi4+0x2b4>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	4461      	add	r1, ip
 8000dda:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dde:	fba0 9402 	umull	r9, r4, r0, r2
 8000de2:	eba1 010e 	sub.w	r1, r1, lr
 8000de6:	42a1      	cmp	r1, r4
 8000de8:	46c8      	mov	r8, r9
 8000dea:	46a6      	mov	lr, r4
 8000dec:	d356      	bcc.n	8000e9c <__udivmoddi4+0x2a4>
 8000dee:	d053      	beq.n	8000e98 <__udivmoddi4+0x2a0>
 8000df0:	b15d      	cbz	r5, 8000e0a <__udivmoddi4+0x212>
 8000df2:	ebb3 0208 	subs.w	r2, r3, r8
 8000df6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dfa:	fa01 f707 	lsl.w	r7, r1, r7
 8000dfe:	fa22 f306 	lsr.w	r3, r2, r6
 8000e02:	40f1      	lsrs	r1, r6
 8000e04:	431f      	orrs	r7, r3
 8000e06:	e9c5 7100 	strd	r7, r1, [r5]
 8000e0a:	2600      	movs	r6, #0
 8000e0c:	4631      	mov	r1, r6
 8000e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e12:	f1c2 0320 	rsb	r3, r2, #32
 8000e16:	40d8      	lsrs	r0, r3
 8000e18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e1c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e20:	4091      	lsls	r1, r2
 8000e22:	4301      	orrs	r1, r0
 8000e24:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e30:	fb07 3610 	mls	r6, r7, r0, r3
 8000e34:	0c0b      	lsrs	r3, r1, #16
 8000e36:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e3a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	fa04 f402 	lsl.w	r4, r4, r2
 8000e44:	d908      	bls.n	8000e58 <__udivmoddi4+0x260>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e4e:	d22f      	bcs.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e50:	429e      	cmp	r6, r3
 8000e52:	d92d      	bls.n	8000eb0 <__udivmoddi4+0x2b8>
 8000e54:	3802      	subs	r0, #2
 8000e56:	4463      	add	r3, ip
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	b289      	uxth	r1, r1
 8000e5c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e60:	fb07 3316 	mls	r3, r7, r6, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb06 f30e 	mul.w	r3, r6, lr
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d908      	bls.n	8000e82 <__udivmoddi4+0x28a>
 8000e70:	eb1c 0101 	adds.w	r1, ip, r1
 8000e74:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e78:	d216      	bcs.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d914      	bls.n	8000ea8 <__udivmoddi4+0x2b0>
 8000e7e:	3e02      	subs	r6, #2
 8000e80:	4461      	add	r1, ip
 8000e82:	1ac9      	subs	r1, r1, r3
 8000e84:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e88:	e738      	b.n	8000cfc <__udivmoddi4+0x104>
 8000e8a:	462e      	mov	r6, r5
 8000e8c:	4628      	mov	r0, r5
 8000e8e:	e705      	b.n	8000c9c <__udivmoddi4+0xa4>
 8000e90:	4606      	mov	r6, r0
 8000e92:	e6e3      	b.n	8000c5c <__udivmoddi4+0x64>
 8000e94:	4618      	mov	r0, r3
 8000e96:	e6f8      	b.n	8000c8a <__udivmoddi4+0x92>
 8000e98:	454b      	cmp	r3, r9
 8000e9a:	d2a9      	bcs.n	8000df0 <__udivmoddi4+0x1f8>
 8000e9c:	ebb9 0802 	subs.w	r8, r9, r2
 8000ea0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	e7a3      	b.n	8000df0 <__udivmoddi4+0x1f8>
 8000ea8:	4646      	mov	r6, r8
 8000eaa:	e7ea      	b.n	8000e82 <__udivmoddi4+0x28a>
 8000eac:	4620      	mov	r0, r4
 8000eae:	e794      	b.n	8000dda <__udivmoddi4+0x1e2>
 8000eb0:	4640      	mov	r0, r8
 8000eb2:	e7d1      	b.n	8000e58 <__udivmoddi4+0x260>
 8000eb4:	46d0      	mov	r8, sl
 8000eb6:	e77b      	b.n	8000db0 <__udivmoddi4+0x1b8>
 8000eb8:	3b02      	subs	r3, #2
 8000eba:	4461      	add	r1, ip
 8000ebc:	e732      	b.n	8000d24 <__udivmoddi4+0x12c>
 8000ebe:	4630      	mov	r0, r6
 8000ec0:	e709      	b.n	8000cd6 <__udivmoddi4+0xde>
 8000ec2:	4464      	add	r4, ip
 8000ec4:	3802      	subs	r0, #2
 8000ec6:	e742      	b.n	8000d4e <__udivmoddi4+0x156>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <delayInit>:
 *      Author: rome
 */
#include "API_delay.h"

void delayInit( delay_t * delay, tick_t duration )
  {
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
 8000ed4:	6039      	str	r1, [r7, #0]
	  delay->duration=duration;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	683a      	ldr	r2, [r7, #0]
 8000eda:	605a      	str	r2, [r3, #4]
	  delay->running=false;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	2200      	movs	r2, #0
 8000ee0:	721a      	strb	r2, [r3, #8]
  }
 8000ee2:	bf00      	nop
 8000ee4:	370c      	adds	r7, #12
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr

08000eee <delayRead>:

bool_t delayRead( delay_t * delay )
  {
 8000eee:	b580      	push	{r7, lr}
 8000ef0:	b084      	sub	sp, #16
 8000ef2:	af00      	add	r7, sp, #0
 8000ef4:	6078      	str	r0, [r7, #4]
	  bool_t ret=false;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	73fb      	strb	r3, [r7, #15]

	  //if(delay==NULL)
		//  Error_Handler();

	  if(delay->running==false){
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	7a1b      	ldrb	r3, [r3, #8]
 8000efe:	f083 0301 	eor.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d008      	beq.n	8000f1a <delayRead+0x2c>
		  delay->startTime=HAL_GetTick();
 8000f08:	f001 f900 	bl	800210c <HAL_GetTick>
 8000f0c:	4602      	mov	r2, r0
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	601a      	str	r2, [r3, #0]
		  delay->running=true;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	721a      	strb	r2, [r3, #8]
 8000f18:	e00e      	b.n	8000f38 <delayRead+0x4a>
	  }
	  else
	  if(HAL_GetTick()-delay->startTime>= delay->duration){
 8000f1a:	f001 f8f7 	bl	800210c <HAL_GetTick>
 8000f1e:	4602      	mov	r2, r0
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1ad2      	subs	r2, r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d304      	bcc.n	8000f38 <delayRead+0x4a>
		  delay->running=false;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	2200      	movs	r2, #0
 8000f32:	721a      	strb	r2, [r3, #8]
		  ret=true;
 8000f34:	2301      	movs	r3, #1
 8000f36:	73fb      	strb	r3, [r7, #15]
	  }
	  return ret;
 8000f38:	7bfb      	ldrb	r3, [r7, #15]
  }
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3710      	adds	r7, #16
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}

08000f42 <BMP280_Read8>:
//Privadas
/*************************************************************************************/
// Los datos contenidos en los registros tienen diferentes tamaños
// por este motivo es necesario diferentes funciones que tengan en cuenta cada tamaño
static uint8_t BMP280_Read8(uint8_t addr)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b084      	sub	sp, #16
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	4603      	mov	r3, r0
 8000f4a:	71fb      	strb	r3, [r7, #7]
    uint8_t tmp[2];
	tmp[0] = addr;
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<BMP280_MODE_BIT_RW); // READ 0
 8000f50:	7b3b      	ldrb	r3, [r7, #12]
 8000f52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_8,BMP280_TIMEOUT);
 8000f5a:	f107 030c 	add.w	r3, r7, #12
 8000f5e:	220a      	movs	r2, #10
 8000f60:	2102      	movs	r1, #2
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fccc 	bl	8001900 <BMP280_SPI_TransmitReceive>
	return tmp[1];
 8000f68:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <BMP280_Read16>:

static uint16_t BMP280_Read16(uint8_t addr)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b084      	sub	sp, #16
 8000f76:	af00      	add	r7, sp, #0
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[3];
	tmp[0] = addr;
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<BMP280_MODE_BIT_RW); // READ 0
 8000f80:	7b3b      	ldrb	r3, [r7, #12]
 8000f82:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f86:	b2db      	uxtb	r3, r3
 8000f88:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_16,BMP280_TIMEOUT);
 8000f8a:	f107 030c 	add.w	r3, r7, #12
 8000f8e:	220a      	movs	r2, #10
 8000f90:	2103      	movs	r1, #3
 8000f92:	4618      	mov	r0, r3
 8000f94:	f000 fcb4 	bl	8001900 <BMP280_SPI_TransmitReceive>
	return ((tmp[1] << 8) | tmp[2]);
 8000f98:	7b7b      	ldrb	r3, [r7, #13]
 8000f9a:	021b      	lsls	r3, r3, #8
 8000f9c:	b21a      	sxth	r2, r3
 8000f9e:	7bbb      	ldrb	r3, [r7, #14]
 8000fa0:	b21b      	sxth	r3, r3
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	b21b      	sxth	r3, r3
 8000fa6:	b29b      	uxth	r3, r3
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3710      	adds	r7, #16
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}

08000fb0 <BMP280_Read16LE>:

static uint16_t BMP280_Read16LE(uint8_t addr)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	71fb      	strb	r3, [r7, #7]
	uint16_t tmp;
	tmp = BMP280_Read16(addr);
 8000fba:	79fb      	ldrb	r3, [r7, #7]
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f7ff ffd8 	bl	8000f72 <BMP280_Read16>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	81fb      	strh	r3, [r7, #14]
	return (tmp >> 8) | (tmp << 8);
 8000fc6:	89fb      	ldrh	r3, [r7, #14]
 8000fc8:	0a1b      	lsrs	r3, r3, #8
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	b21a      	sxth	r2, r3
 8000fce:	89fb      	ldrh	r3, [r7, #14]
 8000fd0:	021b      	lsls	r3, r3, #8
 8000fd2:	b21b      	sxth	r3, r3
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	b21b      	sxth	r3, r3
 8000fd8:	b29b      	uxth	r3, r3
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <BMP280_Write8>:

static void BMP280_Write8(uint8_t address, uint8_t data)
{
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b084      	sub	sp, #16
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	4603      	mov	r3, r0
 8000fea:	460a      	mov	r2, r1
 8000fec:	71fb      	strb	r3, [r7, #7]
 8000fee:	4613      	mov	r3, r2
 8000ff0:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp[2];
	tmp[0] = address;
 8000ff2:	79fb      	ldrb	r3, [r7, #7]
 8000ff4:	733b      	strb	r3, [r7, #12]
	tmp[0] &=~(1<<BMP280_MODE_BIT_RW); // WRITE 1
 8000ff6:	7b3b      	ldrb	r3, [r7, #12]
 8000ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	733b      	strb	r3, [r7, #12]
	tmp[1] = data;
 8001000:	79bb      	ldrb	r3, [r7, #6]
 8001002:	737b      	strb	r3, [r7, #13]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_8,BMP280_TIMEOUT);
 8001004:	f107 030c 	add.w	r3, r7, #12
 8001008:	220a      	movs	r2, #10
 800100a:	2102      	movs	r1, #2
 800100c:	4618      	mov	r0, r3
 800100e:	f000 fc77 	bl	8001900 <BMP280_SPI_TransmitReceive>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}

0800101a <BMP280_Read24>:

static uint32_t BMP280_Read24(uint8_t addr)
{
 800101a:	b580      	push	{r7, lr}
 800101c:	b084      	sub	sp, #16
 800101e:	af00      	add	r7, sp, #0
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
	uint8_t tmp[4];
	tmp[0] = addr;
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	733b      	strb	r3, [r7, #12]
	tmp[0] |= (1<<BMP280_MODE_BIT_RW); // READ 0
 8001028:	7b3b      	ldrb	r3, [r7, #12]
 800102a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800102e:	b2db      	uxtb	r3, r3
 8001030:	733b      	strb	r3, [r7, #12]
	BMP280_SPI_TransmitReceive(tmp,BMP280_SIZE_24,BMP280_TIMEOUT);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	220a      	movs	r2, #10
 8001038:	2103      	movs	r1, #3
 800103a:	4618      	mov	r0, r3
 800103c:	f000 fc60 	bl	8001900 <BMP280_SPI_TransmitReceive>
	return ((tmp[1] << 16) | tmp[2] << 8 | tmp[3]);
 8001040:	7b7b      	ldrb	r3, [r7, #13]
 8001042:	041a      	lsls	r2, r3, #16
 8001044:	7bbb      	ldrb	r3, [r7, #14]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	4313      	orrs	r3, r2
 800104a:	7bfa      	ldrb	r2, [r7, #15]
 800104c:	4313      	orrs	r3, r2
}
 800104e:	4618      	mov	r0, r3
 8001050:	3710      	adds	r7, #16
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
	...

08001058 <BMP280_Init>:
/*************************************************************************************/
//Públicas
uint8_t BMP280_Init(SPI_HandleTypeDef *spi_handler, uint8_t temperature_resolution, uint8_t mode)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
 8001060:	460b      	mov	r3, r1
 8001062:	70fb      	strb	r3, [r7, #3]
 8001064:	4613      	mov	r3, r2
 8001066:	70bb      	strb	r3, [r7, #2]
	spi_h = spi_handler;
 8001068:	4a29      	ldr	r2, [pc, #164]	; (8001110 <BMP280_Init+0xb8>)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6013      	str	r3, [r2, #0]
	uint8_t ret;
	uint8_t id;

	if (mode > BMP280_NORMALMODE)
 800106e:	78bb      	ldrb	r3, [r7, #2]
 8001070:	2b03      	cmp	r3, #3
 8001072:	d901      	bls.n	8001078 <BMP280_Init+0x20>
	    mode = BMP280_NORMALMODE;
 8001074:	2303      	movs	r3, #3
 8001076:	70bb      	strb	r3, [r7, #2]
	_mode = mode;
 8001078:	4a26      	ldr	r2, [pc, #152]	; (8001114 <BMP280_Init+0xbc>)
 800107a:	78bb      	ldrb	r3, [r7, #2]
 800107c:	7013      	strb	r3, [r2, #0]
	if(mode == BMP280_FORCEDMODE)
 800107e:	78bb      	ldrb	r3, [r7, #2]
 8001080:	2b01      	cmp	r3, #1
 8001082:	d101      	bne.n	8001088 <BMP280_Init+0x30>
		mode = BMP280_SLEEPMODE;
 8001084:	2300      	movs	r3, #0
 8001086:	70bb      	strb	r3, [r7, #2]

	if (temperature_resolution > BMP280_TEMPERATURE_20BIT)
 8001088:	78fb      	ldrb	r3, [r7, #3]
 800108a:	2b05      	cmp	r3, #5
 800108c:	d901      	bls.n	8001092 <BMP280_Init+0x3a>
		temperature_resolution = BMP280_TEMPERATURE_20BIT;
 800108e:	2305      	movs	r3, #5
 8001090:	70fb      	strb	r3, [r7, #3]
	_temperature_res = temperature_resolution;
 8001092:	4a21      	ldr	r2, [pc, #132]	; (8001118 <BMP280_Init+0xc0>)
 8001094:	78fb      	ldrb	r3, [r7, #3]
 8001096:	7013      	strb	r3, [r2, #0]

	for(uint8_t i=0;i<COUNT_MAX_CONNECT;i++)
 8001098:	2300      	movs	r3, #0
 800109a:	73bb      	strb	r3, [r7, #14]
 800109c:	e00f      	b.n	80010be <BMP280_Init+0x66>
	{
		id=BMP280_Read8(BMP280_CHIPID);
 800109e:	20d0      	movs	r0, #208	; 0xd0
 80010a0:	f7ff ff4f 	bl	8000f42 <BMP280_Read8>
 80010a4:	4603      	mov	r3, r0
 80010a6:	737b      	strb	r3, [r7, #13]
		if (id==BMP280_DEVICE_ID){
 80010a8:	7b7b      	ldrb	r3, [r7, #13]
 80010aa:	2b58      	cmp	r3, #88	; 0x58
 80010ac:	d102      	bne.n	80010b4 <BMP280_Init+0x5c>
			ret=0;// sensor detectado
 80010ae:	2300      	movs	r3, #0
 80010b0:	73fb      	strb	r3, [r7, #15]
			break;
 80010b2:	e007      	b.n	80010c4 <BMP280_Init+0x6c>
		}else
		{
			ret=-1;
 80010b4:	23ff      	movs	r3, #255	; 0xff
 80010b6:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i=0;i<COUNT_MAX_CONNECT;i++)
 80010b8:	7bbb      	ldrb	r3, [r7, #14]
 80010ba:	3301      	adds	r3, #1
 80010bc:	73bb      	strb	r3, [r7, #14]
 80010be:	7bbb      	ldrb	r3, [r7, #14]
 80010c0:	2b09      	cmp	r3, #9
 80010c2:	d9ec      	bls.n	800109e <BMP280_Init+0x46>
		}
	}
	//Calibración
	t1 = BMP280_Read16LE(BMP280_DIG_T1);
 80010c4:	2088      	movs	r0, #136	; 0x88
 80010c6:	f7ff ff73 	bl	8000fb0 <BMP280_Read16LE>
 80010ca:	4603      	mov	r3, r0
 80010cc:	461a      	mov	r2, r3
 80010ce:	4b13      	ldr	r3, [pc, #76]	; (800111c <BMP280_Init+0xc4>)
 80010d0:	801a      	strh	r2, [r3, #0]
	t2 = BMP280_Read16LE(BMP280_DIG_T2);
 80010d2:	208a      	movs	r0, #138	; 0x8a
 80010d4:	f7ff ff6c 	bl	8000fb0 <BMP280_Read16LE>
 80010d8:	4603      	mov	r3, r0
 80010da:	b21a      	sxth	r2, r3
 80010dc:	4b10      	ldr	r3, [pc, #64]	; (8001120 <BMP280_Init+0xc8>)
 80010de:	801a      	strh	r2, [r3, #0]
	t3 = BMP280_Read16LE(BMP280_DIG_T3);
 80010e0:	208c      	movs	r0, #140	; 0x8c
 80010e2:	f7ff ff65 	bl	8000fb0 <BMP280_Read16LE>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <BMP280_Init+0xcc>)
 80010ec:	801a      	strh	r2, [r3, #0]

	BMP280_Write8(BMP280_CONTROL, (temperature_resolution<< BMP280_BIT_RESOLUTION )| mode);
 80010ee:	78fb      	ldrb	r3, [r7, #3]
 80010f0:	015b      	lsls	r3, r3, #5
 80010f2:	b25a      	sxtb	r2, r3
 80010f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80010f8:	4313      	orrs	r3, r2
 80010fa:	b25b      	sxtb	r3, r3
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	4619      	mov	r1, r3
 8001100:	20f4      	movs	r0, #244	; 0xf4
 8001102:	f7ff ff6e 	bl	8000fe2 <BMP280_Write8>
	return ret;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200001fc 	.word	0x200001fc
 8001114:	20000201 	.word	0x20000201
 8001118:	20000200 	.word	0x20000200
 800111c:	20000206 	.word	0x20000206
 8001120:	20000202 	.word	0x20000202
 8001124:	20000204 	.word	0x20000204

08001128 <BMP280_ReadTemperature>:

float BMP280_ReadTemperature(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
  float ret;  // Si la lectura pudo realizarse ret es el valor de temperatura
  	  	  	  // Si la lectura no pudo realizarse ret=-1
  int32_t var1, var2;
  float T;
  delayInit(&delayTimeConvertion,TIME_MAX_CONVERTION_FINISH);
 800112e:	2164      	movs	r1, #100	; 0x64
 8001130:	4849      	ldr	r0, [pc, #292]	; (8001258 <BMP280_ReadTemperature+0x130>)
 8001132:	f7ff fecb 	bl	8000ecc <delayInit>

  if(_mode == BMP280_FORCEDMODE)
 8001136:	4b49      	ldr	r3, [pc, #292]	; (800125c <BMP280_ReadTemperature+0x134>)
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	2b01      	cmp	r3, #1
 800113c:	f040 8081 	bne.w	8001242 <BMP280_ReadTemperature+0x11a>
  {
	  uint8_t mode;
	  uint8_t ctrl = BMP280_Read8(BMP280_CONTROL);// Se verifica el modo FORCE
 8001140:	20f4      	movs	r0, #244	; 0xf4
 8001142:	f7ff fefe 	bl	8000f42 <BMP280_Read8>
 8001146:	4603      	mov	r3, r0
 8001148:	74fb      	strb	r3, [r7, #19]
	  ctrl &= ~(0x03);
 800114a:	7cfb      	ldrb	r3, [r7, #19]
 800114c:	f023 0303 	bic.w	r3, r3, #3
 8001150:	74fb      	strb	r3, [r7, #19]
	  ctrl |= BMP280_FORCEDMODE;
 8001152:	7cfb      	ldrb	r3, [r7, #19]
 8001154:	f043 0301 	orr.w	r3, r3, #1
 8001158:	74fb      	strb	r3, [r7, #19]
	  // Debido a que no puede accederse al dato si no está en FORCEMODE
	  // Se carga FORCEMODE si es que no estaba
	  BMP280_Write8(BMP280_CONTROL, ctrl);
 800115a:	7cfb      	ldrb	r3, [r7, #19]
 800115c:	4619      	mov	r1, r3
 800115e:	20f4      	movs	r0, #244	; 0xf4
 8001160:	f7ff ff3f 	bl	8000fe2 <BMP280_Write8>
	  mode = BMP280_Read8(BMP280_CONTROL);
 8001164:	20f4      	movs	r0, #244	; 0xf4
 8001166:	f7ff feec 	bl	8000f42 <BMP280_Read8>
 800116a:	4603      	mov	r3, r0
 800116c:	74bb      	strb	r3, [r7, #18]
	  mode &= 0x03;
 800116e:	7cbb      	ldrb	r3, [r7, #18]
 8001170:	f003 0303 	and.w	r3, r3, #3
 8001174:	74bb      	strb	r3, [r7, #18]

	  if(mode == BMP280_FORCEDMODE)
 8001176:	7cbb      	ldrb	r3, [r7, #18]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d164      	bne.n	8001246 <BMP280_ReadTemperature+0x11e>
		  /* Cuando termina la conversión el sensor vuelve al estado
		   * SLEEPMODE
		   * Solo puede leerse el dato cuando terminó la conversión,
		   * es decir en SLEEPMODE.
		   */
		  while(delayRead(&delayTimeConvertion!=CONVERTION_MAX_FINISH)){
 800117c:	e00d      	b.n	800119a <BMP280_ReadTemperature+0x72>
			mode = BMP280_Read8(BMP280_CONTROL);
 800117e:	20f4      	movs	r0, #244	; 0xf4
 8001180:	f7ff fedf 	bl	8000f42 <BMP280_Read8>
 8001184:	4603      	mov	r3, r0
 8001186:	74bb      	strb	r3, [r7, #18]
			mode &= 0x03;
 8001188:	7cbb      	ldrb	r3, [r7, #18]
 800118a:	f003 0303 	and.w	r3, r3, #3
 800118e:	74bb      	strb	r3, [r7, #18]
			  if (mode == BMP280_SLEEPMODE){
 8001190:	7cbb      	ldrb	r3, [r7, #18]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d00e      	beq.n	80011b4 <BMP280_ReadTemperature+0x8c>
			  		break;
			  	}else
			  	{
			  	ret=-1;
 8001196:	4b32      	ldr	r3, [pc, #200]	; (8001260 <BMP280_ReadTemperature+0x138>)
 8001198:	617b      	str	r3, [r7, #20]
		  while(delayRead(&delayTimeConvertion!=CONVERTION_MAX_FINISH)){
 800119a:	4b2f      	ldr	r3, [pc, #188]	; (8001258 <BMP280_ReadTemperature+0x130>)
 800119c:	2b01      	cmp	r3, #1
 800119e:	d001      	beq.n	80011a4 <BMP280_ReadTemperature+0x7c>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <BMP280_ReadTemperature+0x7e>
 80011a4:	2300      	movs	r3, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fea1 	bl	8000eee <delayRead>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d1e5      	bne.n	800117e <BMP280_ReadTemperature+0x56>
 80011b2:	e000      	b.n	80011b6 <BMP280_ReadTemperature+0x8e>
			  		break;
 80011b4:	bf00      	nop
			  	}
		  }
		  // Ecuación de conversión dada por el fabricante
		  // Temperatura en grados Celsius
		  int32_t adc_T = BMP280_Read24(BMP280_TEMPDATA);
 80011b6:	20fa      	movs	r0, #250	; 0xfa
 80011b8:	f7ff ff2f 	bl	800101a <BMP280_Read24>
 80011bc:	4603      	mov	r3, r0
 80011be:	60fb      	str	r3, [r7, #12]
		  adc_T >>= 4;
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	111b      	asrs	r3, r3, #4
 80011c4:	60fb      	str	r3, [r7, #12]

		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	10da      	asrs	r2, r3, #3
 80011ca:	4b26      	ldr	r3, [pc, #152]	; (8001264 <BMP280_ReadTemperature+0x13c>)
 80011cc:	881b      	ldrh	r3, [r3, #0]
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	1ad3      	subs	r3, r2, r3
				  ((int32_t)t2)) >> 11;
 80011d2:	4a25      	ldr	r2, [pc, #148]	; (8001268 <BMP280_ReadTemperature+0x140>)
 80011d4:	f9b2 2000 	ldrsh.w	r2, [r2]
		  var1  = ((((adc_T>>3) - ((int32_t)t1 <<1))) *
 80011d8:	fb02 f303 	mul.w	r3, r2, r3
 80011dc:	12db      	asrs	r3, r3, #11
 80011de:	60bb      	str	r3, [r7, #8]

		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	111b      	asrs	r3, r3, #4
 80011e4:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <BMP280_ReadTemperature+0x13c>)
 80011e6:	8812      	ldrh	r2, [r2, #0]
 80011e8:	1a9b      	subs	r3, r3, r2
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	1112      	asrs	r2, r2, #4
 80011ee:	491d      	ldr	r1, [pc, #116]	; (8001264 <BMP280_ReadTemperature+0x13c>)
 80011f0:	8809      	ldrh	r1, [r1, #0]
 80011f2:	1a52      	subs	r2, r2, r1
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 80011f4:	fb02 f303 	mul.w	r3, r2, r3
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 80011f8:	131b      	asrs	r3, r3, #12
				  ((int32_t)t3)) >> 14;
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <BMP280_ReadTemperature+0x144>)
 80011fc:	f9b2 2000 	ldrsh.w	r2, [r2]
				  ((adc_T>>4) - ((int32_t)t1))) >> 12) *
 8001200:	fb02 f303 	mul.w	r3, r2, r3
		  var2  = (((((adc_T>>4) - ((int32_t)t1)) *
 8001204:	139b      	asrs	r3, r3, #14
 8001206:	607b      	str	r3, [r7, #4]

		  t_fine = var1 + var2;
 8001208:	68ba      	ldr	r2, [r7, #8]
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4413      	add	r3, r2
 800120e:	4a18      	ldr	r2, [pc, #96]	; (8001270 <BMP280_ReadTemperature+0x148>)
 8001210:	6013      	str	r3, [r2, #0]

		  T  = (t_fine * 5 + 128) >> 8;
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <BMP280_ReadTemperature+0x148>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	3380      	adds	r3, #128	; 0x80
 800121e:	121b      	asrs	r3, r3, #8
 8001220:	ee07 3a90 	vmov	s15, r3
 8001224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001228:	edc7 7a00 	vstr	s15, [r7]
		  T=T/100;
 800122c:	ed97 7a00 	vldr	s14, [r7]
 8001230:	eddf 6a10 	vldr	s13, [pc, #64]	; 8001274 <BMP280_ReadTemperature+0x14c>
 8001234:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001238:	edc7 7a00 	vstr	s15, [r7]
		  ret=T;
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	617b      	str	r3, [r7, #20]
 8001240:	e001      	b.n	8001246 <BMP280_ReadTemperature+0x11e>
	  }
  }else
  {
	  ret=-1;
 8001242:	4b07      	ldr	r3, [pc, #28]	; (8001260 <BMP280_ReadTemperature+0x138>)
 8001244:	617b      	str	r3, [r7, #20]
  }
  return ret;
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	ee07 3a90 	vmov	s15, r3
}
 800124c:	eeb0 0a67 	vmov.f32	s0, s15
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	2000020c 	.word	0x2000020c
 800125c:	20000201 	.word	0x20000201
 8001260:	bf800000 	.word	0xbf800000
 8001264:	20000206 	.word	0x20000206
 8001268:	20000202 	.word	0x20000202
 800126c:	20000204 	.word	0x20000204
 8001270:	20000208 	.word	0x20000208
 8001274:	42c80000 	.word	0x42c80000

08001278 <FSM_Termometro_Init>:
// Implementaciones

//Privadas*****************************************************************************/
//Configuración e inicialización de puertos y periféricos
static void FSM_Termometro_Init(void)
{
 8001278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800127a:	b093      	sub	sp, #76	; 0x4c
 800127c:	af12      	add	r7, sp, #72	; 0x48
	  setSPI_Port_Name(hspi1);
 800127e:	4c1b      	ldr	r4, [pc, #108]	; (80012ec <FSM_Termometro_Init+0x74>)
 8001280:	4668      	mov	r0, sp
 8001282:	f104 0310 	add.w	r3, r4, #16
 8001286:	2248      	movs	r2, #72	; 0x48
 8001288:	4619      	mov	r1, r3
 800128a:	f003 fa1b 	bl	80046c4 <memcpy>
 800128e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001292:	f000 fa65 	bl	8001760 <setSPI_Port_Name>
	  setI2C_Port_Name(hi2c2);
 8001296:	4c16      	ldr	r4, [pc, #88]	; (80012f0 <FSM_Termometro_Init+0x78>)
 8001298:	4668      	mov	r0, sp
 800129a:	f104 0310 	add.w	r3, r4, #16
 800129e:	2244      	movs	r2, #68	; 0x44
 80012a0:	4619      	mov	r1, r3
 80012a2:	f003 fa0f 	bl	80046c4 <memcpy>
 80012a6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80012aa:	f000 fa71 	bl	8001790 <setI2C_Port_Name>
	  setUART_Port_Name(huart3);
 80012ae:	4e11      	ldr	r6, [pc, #68]	; (80012f4 <FSM_Termometro_Init+0x7c>)
 80012b0:	466d      	mov	r5, sp
 80012b2:	f106 0410 	add.w	r4, r6, #16
 80012b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012c2:	6823      	ldr	r3, [r4, #0]
 80012c4:	602b      	str	r3, [r5, #0]
 80012c6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80012ca:	f000 fa79 	bl	80017c0 <setUART_Port_Name>

	  MX_GPIO_Init();
 80012ce:	f000 fa8f 	bl	80017f0 <MX_GPIO_Init>
	  MX_SPI_Init();
 80012d2:	f000 fadf 	bl	8001894 <MX_SPI_Init>
	  MX_USART_UART_Init();
 80012d6:	f000 fba9 	bl	8001a2c <MX_USART_UART_Init>
	  MX_I2C_Init();
 80012da:	f000 fb37 	bl	800194c <MX_I2C_Init>
	  LCD44780_Init();
 80012de:	f000 f98d 	bl	80015fc <LCD44780_Init>
}
 80012e2:	bf00      	nop
 80012e4:	3704      	adds	r7, #4
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000218 	.word	0x20000218
 80012f0:	20000270 	.word	0x20000270
 80012f4:	200002c4 	.word	0x200002c4

080012f8 <FSM_Termometro_Connect>:
// La medición se realiza en modo Forzado (FORCEMODE) y a la frecuencia de muestreo menor
// Verificación de la conexión del sensor con el microprocesador
// ver datasheet BMP280
static uint8_t FSM_Termometro_Connect(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
	 uint8_t ret;
	 ret=BMP280_Init(&hspi1, BMP280_TEMPERATURE_16BIT, BMP280_FORCEDMODE);
 80012fe:	2201      	movs	r2, #1
 8001300:	2101      	movs	r1, #1
 8001302:	4809      	ldr	r0, [pc, #36]	; (8001328 <FSM_Termometro_Connect+0x30>)
 8001304:	f7ff fea8 	bl	8001058 <BMP280_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	71fb      	strb	r3, [r7, #7]

	 if (ret!=0){
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d005      	beq.n	800131e <FSM_Termometro_Connect+0x26>
		  ret =-1; // No se detectó el sensor
 8001312:	23ff      	movs	r3, #255	; 0xff
 8001314:	71fb      	strb	r3, [r7, #7]
		  UART_SensorConnectError();
 8001316:	f000 fbdb 	bl	8001ad0 <UART_SensorConnectError>
		  LCD44780_SensorConnectError();
 800131a:	f000 fa09 	bl	8001730 <LCD44780_SensorConnectError>
	  }
	 return ret;
 800131e:	79fb      	ldrb	r3, [r7, #7]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000218 	.word	0x20000218

0800132c <FSM_Termometro_Measure>:

int8_t FSM_Termometro_Measure(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
	  int8_t ret;
	  temperature=BMP280_ReadTemperature();
 8001332:	f7ff fef9 	bl	8001128 <BMP280_ReadTemperature>
 8001336:	eef0 7a40 	vmov.f32	s15, s0
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <FSM_Termometro_Measure+0x78>)
 800133c:	edc3 7a00 	vstr	s15, [r3]

	  if ((temperature<TEMPERATURE_MAX) && (temperature>TEMPERATURE_MIN)){
 8001340:	4b18      	ldr	r3, [pc, #96]	; (80013a4 <FSM_Termometro_Measure+0x78>)
 8001342:	edd3 7a00 	vldr	s15, [r3]
 8001346:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80013a8 <FSM_Termometro_Measure+0x7c>
 800134a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001352:	d51a      	bpl.n	800138a <FSM_Termometro_Measure+0x5e>
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <FSM_Termometro_Measure+0x78>)
 8001356:	edd3 7a00 	vldr	s15, [r3]
 800135a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800135e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001366:	dd10      	ble.n	800138a <FSM_Termometro_Measure+0x5e>
		  UART_Send_Temperature(temperature);
 8001368:	4b0e      	ldr	r3, [pc, #56]	; (80013a4 <FSM_Termometro_Measure+0x78>)
 800136a:	edd3 7a00 	vldr	s15, [r3]
 800136e:	eeb0 0a67 	vmov.f32	s0, s15
 8001372:	f000 fb85 	bl	8001a80 <UART_Send_Temperature>
		  LCD44780_UpdateTemperature(temperature);
 8001376:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <FSM_Termometro_Measure+0x78>)
 8001378:	edd3 7a00 	vldr	s15, [r3]
 800137c:	eeb0 0a67 	vmov.f32	s0, s15
 8001380:	f000 f966 	bl	8001650 <LCD44780_UpdateTemperature>
		  ret =0; // Dentro del rango
 8001384:	2300      	movs	r3, #0
 8001386:	71fb      	strb	r3, [r7, #7]
 8001388:	e005      	b.n	8001396 <FSM_Termometro_Measure+0x6a>
	  }else
	  	  {
		  	  LCD44780_SensorTemperatureError();
 800138a:	f000 f9b9 	bl	8001700 <LCD44780_SensorTemperatureError>
		  	  UART_SensorTemperatureError();
 800138e:	f000 fb95 	bl	8001abc <UART_SensorTemperatureError>
		  	  ret=-1; // Fuera del rango
 8001392:	23ff      	movs	r3, #255	; 0xff
 8001394:	71fb      	strb	r3, [r7, #7]
	  	  }
	  return ret;
 8001396:	f997 3007 	ldrsb.w	r3, [r7, #7]
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	2000030c 	.word	0x2000030c
 80013a8:	420c0000 	.word	0x420c0000

080013ac <FSM_Termometro_Range>:

static void FSM_Termometro_Range(void)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	af00      	add	r7, sp, #0
	if(temperature>TEMPERATURE_ALARM)
 80013b0:	4b08      	ldr	r3, [pc, #32]	; (80013d4 <FSM_Termometro_Range+0x28>)
 80013b2:	edd3 7a00 	vldr	s15, [r3]
 80013b6:	eeb3 7a0c 	vmov.f32	s14, #60	; 0x41e00000  28.0
 80013ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013c2:	dc00      	bgt.n	80013c6 <FSM_Termometro_Range+0x1a>
	{
		LCD44780_TemperatureAlarm();
		UART_TemperatureAlarm();
	}
}
 80013c4:	e003      	b.n	80013ce <FSM_Termometro_Range+0x22>
		LCD44780_TemperatureAlarm();
 80013c6:	f000 f985 	bl	80016d4 <LCD44780_TemperatureAlarm>
		UART_TemperatureAlarm();
 80013ca:	f000 fb6d 	bl	8001aa8 <UART_TemperatureAlarm>
}
 80013ce:	bf00      	nop
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000030c 	.word	0x2000030c

080013d8 <FSM_Termometro_Update>:

// La máquina está diseñada a partir de la máquina de estados propuesta en el datasheet
// del sensor
// Se adaptó la máquina para que el sistema soporte conexiones/desconexiones del sensor
void FSM_Termometro_Update(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
	  switch (fsm_state) {
 80013dc:	4b2b      	ldr	r3, [pc, #172]	; (800148c <FSM_Termometro_Update+0xb4>)
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	2b03      	cmp	r3, #3
 80013e2:	d849      	bhi.n	8001478 <FSM_Termometro_Update+0xa0>
 80013e4:	a201      	add	r2, pc, #4	; (adr r2, 80013ec <FSM_Termometro_Update+0x14>)
 80013e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ea:	bf00      	nop
 80013ec:	080013fd 	.word	0x080013fd
 80013f0:	08001409 	.word	0x08001409
 80013f4:	0800143b 	.word	0x0800143b
 80013f8:	0800146d 	.word	0x0800146d

	  	  	  case INIT:
	  	  		    FSM_Termometro_Init();
 80013fc:	f7ff ff3c 	bl	8001278 <FSM_Termometro_Init>
	                fsm_state=CONNECT;
 8001400:	4b22      	ldr	r3, [pc, #136]	; (800148c <FSM_Termometro_Update+0xb4>)
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 8001406:	e03e      	b.n	8001486 <FSM_Termometro_Update+0xae>

	  	  	  case CONNECT:
	  	  		    errorConnect=FSM_Termometro_Connect();
 8001408:	f7ff ff76 	bl	80012f8 <FSM_Termometro_Connect>
 800140c:	4603      	mov	r3, r0
 800140e:	b25a      	sxtb	r2, r3
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <FSM_Termometro_Update+0xb8>)
 8001412:	701a      	strb	r2, [r3, #0]
	  	  		    if(errorConnect==CONNECT_OK){
 8001414:	4b1e      	ldr	r3, [pc, #120]	; (8001490 <FSM_Termometro_Update+0xb8>)
 8001416:	f993 3000 	ldrsb.w	r3, [r3]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d103      	bne.n	8001426 <FSM_Termometro_Update+0x4e>
		  	  		    fsm_state=MEASURE;
 800141e:	4b1b      	ldr	r3, [pc, #108]	; (800148c <FSM_Termometro_Update+0xb4>)
 8001420:	2202      	movs	r2, #2
 8001422:	701a      	strb	r2, [r3, #0]
	  	  		    }else
	  	  		    	if(errorConnect==CONNECT_ERROR)
	  	  		    	{
	  	  		    	fsm_state=INIT;
	  	  		    	}
	  	  	  break;
 8001424:	e02c      	b.n	8001480 <FSM_Termometro_Update+0xa8>
	  	  		    	if(errorConnect==CONNECT_ERROR)
 8001426:	4b1a      	ldr	r3, [pc, #104]	; (8001490 <FSM_Termometro_Update+0xb8>)
 8001428:	f993 3000 	ldrsb.w	r3, [r3]
 800142c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001430:	d126      	bne.n	8001480 <FSM_Termometro_Update+0xa8>
	  	  		    	fsm_state=INIT;
 8001432:	4b16      	ldr	r3, [pc, #88]	; (800148c <FSM_Termometro_Update+0xb4>)
 8001434:	2200      	movs	r2, #0
 8001436:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 8001438:	e022      	b.n	8001480 <FSM_Termometro_Update+0xa8>

	  	  	  case MEASURE:
	  	  		    errorMeasure=FSM_Termometro_Measure();
 800143a:	f7ff ff77 	bl	800132c <FSM_Termometro_Measure>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b14      	ldr	r3, [pc, #80]	; (8001494 <FSM_Termometro_Update+0xbc>)
 8001444:	701a      	strb	r2, [r3, #0]
	  	  		    if(errorMeasure==MEASURE_OK){
 8001446:	4b13      	ldr	r3, [pc, #76]	; (8001494 <FSM_Termometro_Update+0xbc>)
 8001448:	f993 3000 	ldrsb.w	r3, [r3]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d103      	bne.n	8001458 <FSM_Termometro_Update+0x80>
		  	  		    fsm_state=RANGE;
 8001450:	4b0e      	ldr	r3, [pc, #56]	; (800148c <FSM_Termometro_Update+0xb4>)
 8001452:	2203      	movs	r2, #3
 8001454:	701a      	strb	r2, [r3, #0]
	  	  		    }else
	  	  		    	if(errorMeasure==MEASURE_ERROR)
	  	  		    	{
	  	  		    	fsm_state=CONNECT;
	  	  		    	}
	  	  	  break;
 8001456:	e015      	b.n	8001484 <FSM_Termometro_Update+0xac>
	  	  		    	if(errorMeasure==MEASURE_ERROR)
 8001458:	4b0e      	ldr	r3, [pc, #56]	; (8001494 <FSM_Termometro_Update+0xbc>)
 800145a:	f993 3000 	ldrsb.w	r3, [r3]
 800145e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001462:	d10f      	bne.n	8001484 <FSM_Termometro_Update+0xac>
	  	  		    	fsm_state=CONNECT;
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <FSM_Termometro_Update+0xb4>)
 8001466:	2201      	movs	r2, #1
 8001468:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 800146a:	e00b      	b.n	8001484 <FSM_Termometro_Update+0xac>

	  	  	  case RANGE:
	  	  		    FSM_Termometro_Range();
 800146c:	f7ff ff9e 	bl	80013ac <FSM_Termometro_Range>
	  	  		    fsm_state=MEASURE;
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <FSM_Termometro_Update+0xb4>)
 8001472:	2202      	movs	r2, #2
 8001474:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 8001476:	e006      	b.n	8001486 <FSM_Termometro_Update+0xae>

	  	  	  default:
	  	  		fsm_state=INIT;
 8001478:	4b04      	ldr	r3, [pc, #16]	; (800148c <FSM_Termometro_Update+0xb4>)
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
	  	  	  break;
 800147e:	e002      	b.n	8001486 <FSM_Termometro_Update+0xae>
	  	  	  break;
 8001480:	bf00      	nop
 8001482:	e000      	b.n	8001486 <FSM_Termometro_Update+0xae>
	  	  	  break;
 8001484:	bf00      	nop
	  	  }
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	20000308 	.word	0x20000308
 8001490:	20000309 	.word	0x20000309
 8001494:	2000030a 	.word	0x2000030a

08001498 <LCD44780_TransmitReceive>:
static void LCD44780_Backlight(uint8_t state);

//Implementaciones

/*FUNCIONES DE COMUNICACIÓN*************************************************/
static void LCD44780_TransmitReceive(uint8_t nibble, uint8_t rs) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	460a      	mov	r2, r1
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	4613      	mov	r3, r2
 80014a6:	71bb      	strb	r3, [r7, #6]
  uint8_t data = nibble << D4_BIT;
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	011b      	lsls	r3, r3, #4
 80014ac:	73fb      	strb	r3, [r7, #15]
  data |= rs << RS_BIT;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	79bb      	ldrb	r3, [r7, #6]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	73fb      	strb	r3, [r7, #15]
  data |= backlight_state << BL_BIT;
 80014b6:	4b09      	ldr	r3, [pc, #36]	; (80014dc <LCD44780_TransmitReceive+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	b25a      	sxtb	r2, r3
 80014be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	b25b      	sxtb	r3, r3
 80014c6:	73fb      	strb	r3, [r7, #15]
  //Comunicación por I2C
  LCDHD44780_I2C_PCF8574T_TransmitReceive(data,I2C_SIZE,I2C_TIMEOUT);
 80014c8:	7bfb      	ldrb	r3, [r7, #15]
 80014ca:	2264      	movs	r2, #100	; 0x64
 80014cc:	2101      	movs	r1, #1
 80014ce:	4618      	mov	r0, r3
 80014d0:	f000 fa7c 	bl	80019cc <LCDHD44780_I2C_PCF8574T_TransmitReceive>

}
 80014d4:	bf00      	nop
 80014d6:	3710      	adds	r7, #16
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	20000000 	.word	0x20000000

080014e0 <LCD44780_SendCmd>:

static void LCD44780_SendCmd(uint8_t cmd) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	4603      	mov	r3, r0
 80014e8:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = cmd >> 4;
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	091b      	lsrs	r3, r3, #4
 80014ee:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = cmd & 0x0F;
 80014f0:	79fb      	ldrb	r3, [r7, #7]
 80014f2:	f003 030f 	and.w	r3, r3, #15
 80014f6:	73bb      	strb	r3, [r7, #14]
  LCD44780_TransmitReceive(upper_nibble, MODE_CMD);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	2100      	movs	r1, #0
 80014fc:	4618      	mov	r0, r3
 80014fe:	f7ff ffcb 	bl	8001498 <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(lower_nibble, MODE_CMD);
 8001502:	7bbb      	ldrb	r3, [r7, #14]
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f7ff ffc6 	bl	8001498 <LCD44780_TransmitReceive>
}
 800150c:	bf00      	nop
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <LCD44780_SendData>:

static void LCD44780_SendData(uint8_t data) {
 8001514:	b580      	push	{r7, lr}
 8001516:	b084      	sub	sp, #16
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	71fb      	strb	r3, [r7, #7]
  uint8_t upper_nibble = data >> 4;
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	091b      	lsrs	r3, r3, #4
 8001522:	73fb      	strb	r3, [r7, #15]
  uint8_t lower_nibble = data & 0x0F;
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	f003 030f 	and.w	r3, r3, #15
 800152a:	73bb      	strb	r3, [r7, #14]
  LCD44780_TransmitReceive(upper_nibble, MODE_DATA);
 800152c:	7bfb      	ldrb	r3, [r7, #15]
 800152e:	2101      	movs	r1, #1
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff ffb1 	bl	8001498 <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(lower_nibble, MODE_DATA);
 8001536:	7bbb      	ldrb	r3, [r7, #14]
 8001538:	2101      	movs	r1, #1
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff ffac 	bl	8001498 <LCD44780_TransmitReceive>
}
 8001540:	bf00      	nop
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <LCD44780_WriteString>:

static void LCD44780_WriteString(char *str) {
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  while (*str) {
 8001550:	e006      	b.n	8001560 <LCD44780_WriteString+0x18>
	  LCD44780_SendData(*str++);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	1c5a      	adds	r2, r3, #1
 8001556:	607a      	str	r2, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	4618      	mov	r0, r3
 800155c:	f7ff ffda 	bl	8001514 <LCD44780_SendData>
  while (*str) {
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d1f4      	bne.n	8001552 <LCD44780_WriteString+0xa>
  }
}
 8001568:	bf00      	nop
 800156a:	bf00      	nop
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <LCD44780_SetCursor>:

static void LCD44780_SetCursor(uint8_t row, uint8_t column) {
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	460a      	mov	r2, r1
 800157c:	71fb      	strb	r3, [r7, #7]
 800157e:	4613      	mov	r3, r2
 8001580:	71bb      	strb	r3, [r7, #6]
    uint8_t address;
    switch (row) {
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <LCD44780_SetCursor+0x1c>
 8001588:	2b01      	cmp	r3, #1
 800158a:	d003      	beq.n	8001594 <LCD44780_SetCursor+0x22>
 800158c:	e005      	b.n	800159a <LCD44780_SetCursor+0x28>
        case 0:
            address = 0x00;
 800158e:	2300      	movs	r3, #0
 8001590:	73fb      	strb	r3, [r7, #15]
            break;
 8001592:	e004      	b.n	800159e <LCD44780_SetCursor+0x2c>
        case 1:
            address = 0x40;
 8001594:	2340      	movs	r3, #64	; 0x40
 8001596:	73fb      	strb	r3, [r7, #15]
            break;
 8001598:	e001      	b.n	800159e <LCD44780_SetCursor+0x2c>
        default:
            address = 0x00;
 800159a:	2300      	movs	r3, #0
 800159c:	73fb      	strb	r3, [r7, #15]
    }
    address += column;
 800159e:	7bfa      	ldrb	r2, [r7, #15]
 80015a0:	79bb      	ldrb	r3, [r7, #6]
 80015a2:	4413      	add	r3, r2
 80015a4:	73fb      	strb	r3, [r7, #15]
    LCD44780_SendCmd(0x80 | address);
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7ff ff96 	bl	80014e0 <LCD44780_SendCmd>
}
 80015b4:	bf00      	nop
 80015b6:	3710      	adds	r7, #16
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}

080015bc <LCD44780_Clear>:

static void LCD44780_Clear(void) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
	LCD44780_SendCmd(CMD_INIT_0);
 80015c0:	2001      	movs	r0, #1
 80015c2:	f7ff ff8d 	bl	80014e0 <LCD44780_SendCmd>
}
 80015c6:	bf00      	nop
 80015c8:	bd80      	pop	{r7, pc}
	...

080015cc <LCD44780_Backlight>:
// Encendido de la iluminación
static void LCD44780_Backlight(uint8_t state) {
 80015cc:	b480      	push	{r7}
 80015ce:	b083      	sub	sp, #12
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	4603      	mov	r3, r0
 80015d4:	71fb      	strb	r3, [r7, #7]
  if (state) {
 80015d6:	79fb      	ldrb	r3, [r7, #7]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d003      	beq.n	80015e4 <LCD44780_Backlight+0x18>
    backlight_state = BLACKLIGHT_ON;
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <LCD44780_Backlight+0x2c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	701a      	strb	r2, [r3, #0]
  } else {
    backlight_state = BLACKLIGHT_OFF;
  }
}
 80015e2:	e002      	b.n	80015ea <LCD44780_Backlight+0x1e>
    backlight_state = BLACKLIGHT_OFF;
 80015e4:	4b04      	ldr	r3, [pc, #16]	; (80015f8 <LCD44780_Backlight+0x2c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	701a      	strb	r2, [r3, #0]
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	20000000 	.word	0x20000000

080015fc <LCD44780_Init>:
/******************************************************************************/

//Publicas
/*FUNCIONES DE USUARIO*************************************************/
void LCD44780_Init() {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
  char *labelTemperature = "Temperatura:";
 8001602:	4b12      	ldr	r3, [pc, #72]	; (800164c <LCD44780_Init+0x50>)
 8001604:	607b      	str	r3, [r7, #4]
  LCD44780_TransmitReceive(CMD_INIT_1, MODE_CMD);
 8001606:	2100      	movs	r1, #0
 8001608:	2003      	movs	r0, #3
 800160a:	f7ff ff45 	bl	8001498 <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(CMD_INIT_1, MODE_CMD);
 800160e:	2100      	movs	r1, #0
 8001610:	2003      	movs	r0, #3
 8001612:	f7ff ff41 	bl	8001498 <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(CMD_INIT_1, MODE_CMD);
 8001616:	2100      	movs	r1, #0
 8001618:	2003      	movs	r0, #3
 800161a:	f7ff ff3d 	bl	8001498 <LCD44780_TransmitReceive>
  LCD44780_TransmitReceive(CMD_INIT_2, MODE_CMD);
 800161e:	2100      	movs	r1, #0
 8001620:	2002      	movs	r0, #2
 8001622:	f7ff ff39 	bl	8001498 <LCD44780_TransmitReceive>

  LCD44780_SendCmd(0x28);
 8001626:	2028      	movs	r0, #40	; 0x28
 8001628:	f7ff ff5a 	bl	80014e0 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x0C);
 800162c:	200c      	movs	r0, #12
 800162e:	f7ff ff57 	bl	80014e0 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x06);
 8001632:	2006      	movs	r0, #6
 8001634:	f7ff ff54 	bl	80014e0 <LCD44780_SendCmd>
  LCD44780_SendCmd(0x01);
 8001638:	2001      	movs	r0, #1
 800163a:	f7ff ff51 	bl	80014e0 <LCD44780_SendCmd>

  LCD44780_Backlight(BLACKLIGHT_ON);
 800163e:	2001      	movs	r0, #1
 8001640:	f7ff ffc4 	bl	80015cc <LCD44780_Backlight>
}
 8001644:	bf00      	nop
 8001646:	3708      	adds	r7, #8
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	080075d0 	.word	0x080075d0

08001650 <LCD44780_UpdateTemperature>:
void LCD44780_UpdateTemperature(float temperature)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b088      	sub	sp, #32
 8001654:	af00      	add	r7, sp, #0
 8001656:	ed87 0a01 	vstr	s0, [r7, #4]
		  char *labelTemperature = "Temperatura:";
 800165a:	4b1b      	ldr	r3, [pc, #108]	; (80016c8 <LCD44780_UpdateTemperature+0x78>)
 800165c:	61fb      	str	r3, [r7, #28]
		  char *labelTemperatureUnit = "C";
 800165e:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <LCD44780_UpdateTemperature+0x7c>)
 8001660:	61bb      	str	r3, [r7, #24]
		  char temperatureString[10];

		  sprintf(temperatureString, "%.2f", temperature);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7fe ff80 	bl	8000568 <__aeabi_f2d>
 8001668:	4602      	mov	r2, r0
 800166a:	460b      	mov	r3, r1
 800166c:	f107 000c 	add.w	r0, r7, #12
 8001670:	4917      	ldr	r1, [pc, #92]	; (80016d0 <LCD44780_UpdateTemperature+0x80>)
 8001672:	f003 fd35 	bl	80050e0 <siprintf>
		  LCD44780_Clear();
 8001676:	f7ff ffa1 	bl	80015bc <LCD44780_Clear>
		  LCD44780_SetCursor(0, 0);
 800167a:	2100      	movs	r1, #0
 800167c:	2000      	movs	r0, #0
 800167e:	f7ff ff78 	bl	8001572 <LCD44780_SetCursor>
		  LCD44780_WriteString(labelTemperature);
 8001682:	69f8      	ldr	r0, [r7, #28]
 8001684:	f7ff ff60 	bl	8001548 <LCD44780_WriteString>
		  LCD44780_SetCursor(1, 0);
 8001688:	2100      	movs	r1, #0
 800168a:	2001      	movs	r0, #1
 800168c:	f7ff ff71 	bl	8001572 <LCD44780_SetCursor>
		  LCD44780_WriteString(temperatureString);
 8001690:	f107 030c 	add.w	r3, r7, #12
 8001694:	4618      	mov	r0, r3
 8001696:	f7ff ff57 	bl	8001548 <LCD44780_WriteString>
		  memset(temperatureString, 0, sizeof(temperatureString));
 800169a:	f107 030c 	add.w	r3, r7, #12
 800169e:	220a      	movs	r2, #10
 80016a0:	2100      	movs	r1, #0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f003 f81c 	bl	80046e0 <memset>
		  LCD44780_SetCursor(1, 6);
 80016a8:	2106      	movs	r1, #6
 80016aa:	2001      	movs	r0, #1
 80016ac:	f7ff ff61 	bl	8001572 <LCD44780_SetCursor>
		  LCD44780_WriteString(labelTemperatureUnit );
 80016b0:	69b8      	ldr	r0, [r7, #24]
 80016b2:	f7ff ff49 	bl	8001548 <LCD44780_WriteString>
		  HAL_Delay(TEMPERATURE_TIME_UPDATE);
 80016b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016ba:	f000 fd33 	bl	8002124 <HAL_Delay>
}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	080075d0 	.word	0x080075d0
 80016cc:	080075e0 	.word	0x080075e0
 80016d0:	080075e4 	.word	0x080075e4

080016d4 <LCD44780_TemperatureAlarm>:

void LCD44780_TemperatureAlarm()
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
	  char *labelTemperatureAlarm = "Alarma";
 80016da:	4b08      	ldr	r3, [pc, #32]	; (80016fc <LCD44780_TemperatureAlarm+0x28>)
 80016dc:	607b      	str	r3, [r7, #4]
	  LCD44780_SetCursor(1, 9);
 80016de:	2109      	movs	r1, #9
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff ff46 	bl	8001572 <LCD44780_SetCursor>
	  LCD44780_WriteString(labelTemperatureAlarm );
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff ff2e 	bl	8001548 <LCD44780_WriteString>
	  HAL_Delay(TEMPERATURE_TIME_UPDATE);
 80016ec:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80016f0:	f000 fd18 	bl	8002124 <HAL_Delay>
}
 80016f4:	bf00      	nop
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	080075ec 	.word	0x080075ec

08001700 <LCD44780_SensorTemperatureError>:
void LCD44780_SensorTemperatureError()
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
	  char *labelSensorTemperatureError = "Error de sensor";
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <LCD44780_SensorTemperatureError+0x2c>)
 8001708:	607b      	str	r3, [r7, #4]
	  LCD44780_Clear();
 800170a:	f7ff ff57 	bl	80015bc <LCD44780_Clear>
	  LCD44780_SetCursor(1, 0);
 800170e:	2100      	movs	r1, #0
 8001710:	2001      	movs	r0, #1
 8001712:	f7ff ff2e 	bl	8001572 <LCD44780_SetCursor>
	  LCD44780_WriteString(labelSensorTemperatureError );
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff16 	bl	8001548 <LCD44780_WriteString>
	  HAL_Delay(TEMPERATURE_TIME_UPDATE);
 800171c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001720:	f000 fd00 	bl	8002124 <HAL_Delay>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	080075f4 	.word	0x080075f4

08001730 <LCD44780_SensorConnectError>:
void LCD44780_SensorConnectError()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
	  char *labelSensorConnectError = "Error de Conn";
 8001736:	4b09      	ldr	r3, [pc, #36]	; (800175c <LCD44780_SensorConnectError+0x2c>)
 8001738:	607b      	str	r3, [r7, #4]
	  LCD44780_Clear();
 800173a:	f7ff ff3f 	bl	80015bc <LCD44780_Clear>
	  LCD44780_SetCursor(1, 0);
 800173e:	2100      	movs	r1, #0
 8001740:	2001      	movs	r0, #1
 8001742:	f7ff ff16 	bl	8001572 <LCD44780_SetCursor>
	  LCD44780_WriteString(labelSensorConnectError );
 8001746:	6878      	ldr	r0, [r7, #4]
 8001748:	f7ff fefe 	bl	8001548 <LCD44780_WriteString>
	  HAL_Delay(TEMPERATURE_TIME_UPDATE);
 800174c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001750:	f000 fce8 	bl	8002124 <HAL_Delay>
}
 8001754:	bf00      	nop
 8001756:	3708      	adds	r7, #8
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	08007604 	.word	0x08007604

08001760 <setSPI_Port_Name>:

//Funciones Públicas

/*****************************************************************************************/
void setSPI_Port_Name(SPI_HandleTypeDef hspiX)
{
 8001760:	b084      	sub	sp, #16
 8001762:	b580      	push	{r7, lr}
 8001764:	af00      	add	r7, sp, #0
 8001766:	f107 0c08 	add.w	ip, r7, #8
 800176a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hspi=hspiX;
 800176e:	4b07      	ldr	r3, [pc, #28]	; (800178c <setSPI_Port_Name+0x2c>)
 8001770:	4618      	mov	r0, r3
 8001772:	f107 0308 	add.w	r3, r7, #8
 8001776:	2258      	movs	r2, #88	; 0x58
 8001778:	4619      	mov	r1, r3
 800177a:	f002 ffa3 	bl	80046c4 <memcpy>
}
 800177e:	bf00      	nop
 8001780:	46bd      	mov	sp, r7
 8001782:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001786:	b004      	add	sp, #16
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000310 	.word	0x20000310

08001790 <setI2C_Port_Name>:
void setI2C_Port_Name(I2C_HandleTypeDef hi2cX)
{
 8001790:	b084      	sub	sp, #16
 8001792:	b580      	push	{r7, lr}
 8001794:	af00      	add	r7, sp, #0
 8001796:	f107 0c08 	add.w	ip, r7, #8
 800179a:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	hi2c=hi2cX;
 800179e:	4b07      	ldr	r3, [pc, #28]	; (80017bc <setI2C_Port_Name+0x2c>)
 80017a0:	4618      	mov	r0, r3
 80017a2:	f107 0308 	add.w	r3, r7, #8
 80017a6:	2254      	movs	r2, #84	; 0x54
 80017a8:	4619      	mov	r1, r3
 80017aa:	f002 ff8b 	bl	80046c4 <memcpy>
}
 80017ae:	bf00      	nop
 80017b0:	46bd      	mov	sp, r7
 80017b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017b6:	b004      	add	sp, #16
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000368 	.word	0x20000368

080017c0 <setUART_Port_Name>:
void setUART_Port_Name(UART_HandleTypeDef huartX)
{
 80017c0:	b084      	sub	sp, #16
 80017c2:	b580      	push	{r7, lr}
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	f107 0c08 	add.w	ip, r7, #8
 80017ca:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	huart=huartX;
 80017ce:	4b07      	ldr	r3, [pc, #28]	; (80017ec <setUART_Port_Name+0x2c>)
 80017d0:	4618      	mov	r0, r3
 80017d2:	f107 0308 	add.w	r3, r7, #8
 80017d6:	2244      	movs	r2, #68	; 0x44
 80017d8:	4619      	mov	r1, r3
 80017da:	f002 ff73 	bl	80046c4 <memcpy>
}
 80017de:	bf00      	nop
 80017e0:	46bd      	mov	sp, r7
 80017e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80017e6:	b004      	add	sp, #16
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	200003bc 	.word	0x200003bc

080017f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f6:	f107 030c 	add.w	r3, r7, #12
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
 8001804:	611a      	str	r2, [r3, #16]
  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	4b20      	ldr	r3, [pc, #128]	; (800188c <MX_GPIO_Init+0x9c>)
 800180c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800180e:	4a1f      	ldr	r2, [pc, #124]	; (800188c <MX_GPIO_Init+0x9c>)
 8001810:	f043 0320 	orr.w	r3, r3, #32
 8001814:	6313      	str	r3, [r2, #48]	; 0x30
 8001816:	4b1d      	ldr	r3, [pc, #116]	; (800188c <MX_GPIO_Init+0x9c>)
 8001818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181a:	f003 0320 	and.w	r3, r3, #32
 800181e:	60bb      	str	r3, [r7, #8]
 8001820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	4b19      	ldr	r3, [pc, #100]	; (800188c <MX_GPIO_Init+0x9c>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	4a18      	ldr	r2, [pc, #96]	; (800188c <MX_GPIO_Init+0x9c>)
 800182c:	f043 0301 	orr.w	r3, r3, #1
 8001830:	6313      	str	r3, [r2, #48]	; 0x30
 8001832:	4b16      	ldr	r3, [pc, #88]	; (800188c <MX_GPIO_Init+0x9c>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	f003 0301 	and.w	r3, r3, #1
 800183a:	607b      	str	r3, [r7, #4]
 800183c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	603b      	str	r3, [r7, #0]
 8001842:	4b12      	ldr	r3, [pc, #72]	; (800188c <MX_GPIO_Init+0x9c>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	4a11      	ldr	r2, [pc, #68]	; (800188c <MX_GPIO_Init+0x9c>)
 8001848:	f043 0308 	orr.w	r3, r3, #8
 800184c:	6313      	str	r3, [r2, #48]	; 0x30
 800184e:	4b0f      	ldr	r3, [pc, #60]	; (800188c <MX_GPIO_Init+0x9c>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001852:	f003 0308 	and.w	r3, r3, #8
 8001856:	603b      	str	r3, [r7, #0]
 8001858:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, SPI_ENABLE_PIN, GPIO_PIN_RESET);
 800185a:	2200      	movs	r2, #0
 800185c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001860:	480b      	ldr	r0, [pc, #44]	; (8001890 <MX_GPIO_Init+0xa0>)
 8001862:	f000 ff15 	bl	8002690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD14 */
  GPIO_InitStruct.Pin = SPI_ENABLE_PIN;
 8001866:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800186a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800186c:	2301      	movs	r3, #1
 800186e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	2300      	movs	r3, #0
 8001872:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001874:	2300      	movs	r3, #0
 8001876:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	4619      	mov	r1, r3
 800187e:	4804      	ldr	r0, [pc, #16]	; (8001890 <MX_GPIO_Init+0xa0>)
 8001880:	f000 fd5a 	bl	8002338 <HAL_GPIO_Init>
}
 8001884:	bf00      	nop
 8001886:	3720      	adds	r7, #32
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}
 800188c:	40023800 	.word	0x40023800
 8001890:	40020c00 	.word	0x40020c00

08001894 <MX_SPI_Init>:
/*****************************************************************************************/

void MX_SPI_Init(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  hspi.Instance = SPI1;
 8001898:	4b17      	ldr	r3, [pc, #92]	; (80018f8 <MX_SPI_Init+0x64>)
 800189a:	4a18      	ldr	r2, [pc, #96]	; (80018fc <MX_SPI_Init+0x68>)
 800189c:	601a      	str	r2, [r3, #0]
  hspi.Init.Mode = SPI_MODE_MASTER;
 800189e:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_SPI_Init+0x64>)
 80018a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80018a4:	605a      	str	r2, [r3, #4]
  hspi.Init.Direction = SPI_DIRECTION_2LINES;
 80018a6:	4b14      	ldr	r3, [pc, #80]	; (80018f8 <MX_SPI_Init+0x64>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	609a      	str	r2, [r3, #8]
  hspi.Init.DataSize = SPI_DATASIZE_8BIT;
 80018ac:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <MX_SPI_Init+0x64>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	60da      	str	r2, [r3, #12]
  hspi.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018b2:	4b11      	ldr	r3, [pc, #68]	; (80018f8 <MX_SPI_Init+0x64>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	611a      	str	r2, [r3, #16]
  hspi.Init.CLKPhase = SPI_PHASE_1EDGE;
 80018b8:	4b0f      	ldr	r3, [pc, #60]	; (80018f8 <MX_SPI_Init+0x64>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	615a      	str	r2, [r3, #20]
  hspi.Init.NSS = SPI_NSS_SOFT;
 80018be:	4b0e      	ldr	r3, [pc, #56]	; (80018f8 <MX_SPI_Init+0x64>)
 80018c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018c4:	619a      	str	r2, [r3, #24]
  hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32; // 500 KHz
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <MX_SPI_Init+0x64>)
 80018c8:	2220      	movs	r2, #32
 80018ca:	61da      	str	r2, [r3, #28]
  hspi.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018cc:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <MX_SPI_Init+0x64>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	621a      	str	r2, [r3, #32]
  hspi.Init.TIMode = SPI_TIMODE_DISABLE;
 80018d2:	4b09      	ldr	r3, [pc, #36]	; (80018f8 <MX_SPI_Init+0x64>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018d8:	4b07      	ldr	r3, [pc, #28]	; (80018f8 <MX_SPI_Init+0x64>)
 80018da:	2200      	movs	r2, #0
 80018dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi.Init.CRCPolynomial = 10;
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <MX_SPI_Init+0x64>)
 80018e0:	220a      	movs	r2, #10
 80018e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi) != HAL_OK)
 80018e4:	4804      	ldr	r0, [pc, #16]	; (80018f8 <MX_SPI_Init+0x64>)
 80018e6:	f002 f80b 	bl	8003900 <HAL_SPI_Init>
 80018ea:	4603      	mov	r3, r0
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d001      	beq.n	80018f4 <MX_SPI_Init+0x60>
  {
    Error_Handler();
 80018f0:	f000 f974 	bl	8001bdc <Error_Handler>
  }
}
 80018f4:	bf00      	nop
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	20000310 	.word	0x20000310
 80018fc:	40013000 	.word	0x40013000

08001900 <BMP280_SPI_TransmitReceive>:
void BMP280_SPI_TransmitReceive(uint8_t buffer[2],uint8_t size,uint8_t timeOut)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b084      	sub	sp, #16
 8001904:	af02      	add	r7, sp, #8
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	460b      	mov	r3, r1
 800190a:	70fb      	strb	r3, [r7, #3]
 800190c:	4613      	mov	r3, r2
 800190e:	70bb      	strb	r3, [r7, #2]
	HAL_GPIO_WritePin(GPIOD, SPI_ENABLE_PIN, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001916:	480b      	ldr	r0, [pc, #44]	; (8001944 <BMP280_SPI_TransmitReceive+0x44>)
 8001918:	f000 feba 	bl	8002690 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi, buffer, buffer, size, timeOut);
 800191c:	78fb      	ldrb	r3, [r7, #3]
 800191e:	b29a      	uxth	r2, r3
 8001920:	78bb      	ldrb	r3, [r7, #2]
 8001922:	9300      	str	r3, [sp, #0]
 8001924:	4613      	mov	r3, r2
 8001926:	687a      	ldr	r2, [r7, #4]
 8001928:	6879      	ldr	r1, [r7, #4]
 800192a:	4807      	ldr	r0, [pc, #28]	; (8001948 <BMP280_SPI_TransmitReceive+0x48>)
 800192c:	f002 f871 	bl	8003a12 <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOD, SPI_ENABLE_PIN, GPIO_PIN_SET);
 8001930:	2201      	movs	r2, #1
 8001932:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001936:	4803      	ldr	r0, [pc, #12]	; (8001944 <BMP280_SPI_TransmitReceive+0x44>)
 8001938:	f000 feaa 	bl	8002690 <HAL_GPIO_WritePin>
}
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40020c00 	.word	0x40020c00
 8001948:	20000310 	.word	0x20000310

0800194c <MX_I2C_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
void MX_I2C_Init(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  hi2c.Instance = I2C2;
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <MX_I2C_Init+0x74>)
 8001952:	4a1c      	ldr	r2, [pc, #112]	; (80019c4 <MX_I2C_Init+0x78>)
 8001954:	601a      	str	r2, [r3, #0]
  hi2c.Init.ClockSpeed = 100000;
 8001956:	4b1a      	ldr	r3, [pc, #104]	; (80019c0 <MX_I2C_Init+0x74>)
 8001958:	4a1b      	ldr	r2, [pc, #108]	; (80019c8 <MX_I2C_Init+0x7c>)
 800195a:	605a      	str	r2, [r3, #4]
  hi2c.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <MX_I2C_Init+0x74>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  hi2c.Init.OwnAddress1 = 0;
 8001962:	4b17      	ldr	r3, [pc, #92]	; (80019c0 <MX_I2C_Init+0x74>)
 8001964:	2200      	movs	r2, #0
 8001966:	60da      	str	r2, [r3, #12]
  hi2c.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <MX_I2C_Init+0x74>)
 800196a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800196e:	611a      	str	r2, [r3, #16]
  hi2c.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001970:	4b13      	ldr	r3, [pc, #76]	; (80019c0 <MX_I2C_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	615a      	str	r2, [r3, #20]
  hi2c.Init.OwnAddress2 = 0;
 8001976:	4b12      	ldr	r3, [pc, #72]	; (80019c0 <MX_I2C_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	619a      	str	r2, [r3, #24]
  hi2c.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800197c:	4b10      	ldr	r3, [pc, #64]	; (80019c0 <MX_I2C_Init+0x74>)
 800197e:	2200      	movs	r2, #0
 8001980:	61da      	str	r2, [r3, #28]
  hi2c.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <MX_I2C_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c) != HAL_OK)
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <MX_I2C_Init+0x74>)
 800198a:	f000 fe9b 	bl	80026c4 <HAL_I2C_Init>
 800198e:	4603      	mov	r3, r0
 8001990:	2b00      	cmp	r3, #0
 8001992:	d001      	beq.n	8001998 <MX_I2C_Init+0x4c>
  {
    Error_Handler();
 8001994:	f000 f922 	bl	8001bdc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001998:	2100      	movs	r1, #0
 800199a:	4809      	ldr	r0, [pc, #36]	; (80019c0 <MX_I2C_Init+0x74>)
 800199c:	f001 fadd 	bl	8002f5a <HAL_I2CEx_ConfigAnalogFilter>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_I2C_Init+0x5e>
  {
    Error_Handler();
 80019a6:	f000 f919 	bl	8001bdc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c, 0) != HAL_OK)
 80019aa:	2100      	movs	r1, #0
 80019ac:	4804      	ldr	r0, [pc, #16]	; (80019c0 <MX_I2C_Init+0x74>)
 80019ae:	f001 fb10 	bl	8002fd2 <HAL_I2CEx_ConfigDigitalFilter>
 80019b2:	4603      	mov	r3, r0
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d001      	beq.n	80019bc <MX_I2C_Init+0x70>
  {
    Error_Handler();
 80019b8:	f000 f910 	bl	8001bdc <Error_Handler>
  }
}
 80019bc:	bf00      	nop
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	20000368 	.word	0x20000368
 80019c4:	40005800 	.word	0x40005800
 80019c8:	000186a0 	.word	0x000186a0

080019cc <LCDHD44780_I2C_PCF8574T_TransmitReceive>:

void LCDHD44780_I2C_PCF8574T_TransmitReceive(uint8_t data,uint8_t size,uint8_t timeOut)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	460b      	mov	r3, r1
 80019d8:	71bb      	strb	r3, [r7, #6]
 80019da:	4613      	mov	r3, r2
 80019dc:	717b      	strb	r3, [r7, #5]
	data |= 1 << EN_BIT; // protocolo i2c
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	f043 0304 	orr.w	r3, r3, #4
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c, I2C_ADDR << 1, &data, size, timeOut);
 80019e8:	79bb      	ldrb	r3, [r7, #6]
 80019ea:	b299      	uxth	r1, r3
 80019ec:	797b      	ldrb	r3, [r7, #5]
 80019ee:	1dfa      	adds	r2, r7, #7
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	460b      	mov	r3, r1
 80019f4:	214e      	movs	r1, #78	; 0x4e
 80019f6:	480c      	ldr	r0, [pc, #48]	; (8001a28 <LCDHD44780_I2C_PCF8574T_TransmitReceive+0x5c>)
 80019f8:	f000 ffa8 	bl	800294c <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80019fc:	2001      	movs	r0, #1
 80019fe:	f000 fb91 	bl	8002124 <HAL_Delay>
	data &= ~(1 << EN_BIT);// protocolo i2c
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	f023 0304 	bic.w	r3, r3, #4
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_Master_Transmit(&hi2c, I2C_ADDR << 1, &data, size, timeOut);
 8001a0c:	79bb      	ldrb	r3, [r7, #6]
 8001a0e:	b299      	uxth	r1, r3
 8001a10:	797b      	ldrb	r3, [r7, #5]
 8001a12:	1dfa      	adds	r2, r7, #7
 8001a14:	9300      	str	r3, [sp, #0]
 8001a16:	460b      	mov	r3, r1
 8001a18:	214e      	movs	r1, #78	; 0x4e
 8001a1a:	4803      	ldr	r0, [pc, #12]	; (8001a28 <LCDHD44780_I2C_PCF8574T_TransmitReceive+0x5c>)
 8001a1c:	f000 ff96 	bl	800294c <HAL_I2C_Master_Transmit>
}
 8001a20:	bf00      	nop
 8001a22:	3708      	adds	r7, #8
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}
 8001a28:	20000368 	.word	0x20000368

08001a2c <MX_USART_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART_UART_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  huart.Instance = USART3;
 8001a30:	4b11      	ldr	r3, [pc, #68]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a32:	4a12      	ldr	r2, [pc, #72]	; (8001a7c <MX_USART_UART_Init+0x50>)
 8001a34:	601a      	str	r2, [r3, #0]
  huart.Init.BaudRate = 9600;
 8001a36:	4b10      	ldr	r3, [pc, #64]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001a3c:	605a      	str	r2, [r3, #4]
  huart.Init.WordLength = UART_WORDLENGTH_8B;
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	609a      	str	r2, [r3, #8]
  huart.Init.StopBits = UART_STOPBITS_1;
 8001a44:	4b0c      	ldr	r3, [pc, #48]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	60da      	str	r2, [r3, #12]
  huart.Init.Parity = UART_PARITY_ODD;
 8001a4a:	4b0b      	ldr	r3, [pc, #44]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a4c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8001a50:	611a      	str	r2, [r3, #16]
  huart.Init.Mode = UART_MODE_TX_RX;
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a54:	220c      	movs	r2, #12
 8001a56:	615a      	str	r2, [r3, #20]
  huart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a58:	4b07      	ldr	r3, [pc, #28]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	619a      	str	r2, [r3, #24]
  huart.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart) != HAL_OK)
 8001a64:	4804      	ldr	r0, [pc, #16]	; (8001a78 <MX_USART_UART_Init+0x4c>)
 8001a66:	f002 fa41 	bl	8003eec <HAL_UART_Init>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d001      	beq.n	8001a74 <MX_USART_UART_Init+0x48>
  {
    Error_Handler();
 8001a70:	f000 f8b4 	bl	8001bdc <Error_Handler>
  }
}
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	200003bc 	.word	0x200003bc
 8001a7c:	40004800 	.word	0x40004800

08001a80 <UART_Send_Temperature>:
void UART_Send_Temperature(float temperature)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	ed87 0a01 	vstr	s0, [r7, #4]
	  printf("Temperatura=%.2f\n",temperature);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7fe fd6c 	bl	8000568 <__aeabi_f2d>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4803      	ldr	r0, [pc, #12]	; (8001aa4 <UART_Send_Temperature+0x24>)
 8001a96:	f003 fa95 	bl	8004fc4 <iprintf>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08007614 	.word	0x08007614

08001aa8 <UART_TemperatureAlarm>:
void UART_TemperatureAlarm(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
	  printf("Alarma: Err1\n");
 8001aac:	4802      	ldr	r0, [pc, #8]	; (8001ab8 <UART_TemperatureAlarm+0x10>)
 8001aae:	f003 fb0f 	bl	80050d0 <puts>
}
 8001ab2:	bf00      	nop
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	08007628 	.word	0x08007628

08001abc <UART_SensorTemperatureError>:
void UART_SensorTemperatureError(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
	  printf("Error en lectura del sensor: Err2\n");
 8001ac0:	4802      	ldr	r0, [pc, #8]	; (8001acc <UART_SensorTemperatureError+0x10>)
 8001ac2:	f003 fb05 	bl	80050d0 <puts>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	bf00      	nop
 8001acc:	08007638 	.word	0x08007638

08001ad0 <UART_SensorConnectError>:
void UART_SensorConnectError(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	  printf("Error en la Conexion con el sensor: Err3\n");
 8001ad4:	4802      	ldr	r0, [pc, #8]	; (8001ae0 <UART_SensorConnectError+0x10>)
 8001ad6:	f003 fafb 	bl	80050d0 <puts>
}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	0800765c 	.word	0x0800765c

08001ae4 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart, (uint8_t *)&ch, 1, 0xFFFF);
 8001aec:	1d39      	adds	r1, r7, #4
 8001aee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af2:	2201      	movs	r2, #1
 8001af4:	4803      	ldr	r0, [pc, #12]	; (8001b04 <__io_putchar+0x20>)
 8001af6:	f002 fa46 	bl	8003f86 <HAL_UART_Transmit>
  return ch;
 8001afa:	687b      	ldr	r3, [r7, #4]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	200003bc 	.word	0x200003bc

08001b08 <main>:
#include "FSM_termometro.h"

void SystemClock_Config(void);

int main(void)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	af00      	add	r7, sp, #0
  HAL_Init();
 8001b0c:	f000 fa98 	bl	8002040 <HAL_Init>
  SystemClock_Config();
 8001b10:	f000 f804 	bl	8001b1c <SystemClock_Config>

  while (1)
  {
	  FSM_Termometro_Update();
 8001b14:	f7ff fc60 	bl	80013d8 <FSM_Termometro_Update>
 8001b18:	e7fc      	b.n	8001b14 <main+0xc>
	...

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b094      	sub	sp, #80	; 0x50
 8001b20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b22:	f107 0320 	add.w	r3, r7, #32
 8001b26:	2230      	movs	r2, #48	; 0x30
 8001b28:	2100      	movs	r1, #0
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	f002 fdd8 	bl	80046e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b30:	f107 030c 	add.w	r3, r7, #12
 8001b34:	2200      	movs	r2, #0
 8001b36:	601a      	str	r2, [r3, #0]
 8001b38:	605a      	str	r2, [r3, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
 8001b3c:	60da      	str	r2, [r3, #12]
 8001b3e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
 8001b44:	4b23      	ldr	r3, [pc, #140]	; (8001bd4 <SystemClock_Config+0xb8>)
 8001b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b48:	4a22      	ldr	r2, [pc, #136]	; (8001bd4 <SystemClock_Config+0xb8>)
 8001b4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b50:	4b20      	ldr	r3, [pc, #128]	; (8001bd4 <SystemClock_Config+0xb8>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	60bb      	str	r3, [r7, #8]
 8001b5a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	607b      	str	r3, [r7, #4]
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <SystemClock_Config+0xbc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b68:	4a1b      	ldr	r2, [pc, #108]	; (8001bd8 <SystemClock_Config+0xbc>)
 8001b6a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b6e:	6013      	str	r3, [r2, #0]
 8001b70:	4b19      	ldr	r3, [pc, #100]	; (8001bd8 <SystemClock_Config+0xbc>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b78:	607b      	str	r3, [r7, #4]
 8001b7a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b7c:	2302      	movs	r3, #2
 8001b7e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b80:	2301      	movs	r3, #1
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b84:	2310      	movs	r3, #16
 8001b86:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b8c:	f107 0320 	add.w	r3, r7, #32
 8001b90:	4618      	mov	r0, r3
 8001b92:	f001 fa5d 	bl	8003050 <HAL_RCC_OscConfig>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b9c:	f000 f81e 	bl	8001bdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ba0:	230f      	movs	r3, #15
 8001ba2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001bb4:	f107 030c 	add.w	r3, r7, #12
 8001bb8:	2100      	movs	r1, #0
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f001 fcc0 	bl	8003540 <HAL_RCC_ClockConfig>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bc6:	f000 f809 	bl	8001bdc <Error_Handler>
  }
}
 8001bca:	bf00      	nop
 8001bcc:	3750      	adds	r7, #80	; 0x50
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
 8001bd2:	bf00      	nop
 8001bd4:	40023800 	.word	0x40023800
 8001bd8:	40007000 	.word	0x40007000

08001bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001be0:	b672      	cpsid	i
}
 8001be2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001be4:	e7fe      	b.n	8001be4 <Error_Handler+0x8>
	...

08001be8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bee:	2300      	movs	r3, #0
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	4b10      	ldr	r3, [pc, #64]	; (8001c34 <HAL_MspInit+0x4c>)
 8001bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bf6:	4a0f      	ldr	r2, [pc, #60]	; (8001c34 <HAL_MspInit+0x4c>)
 8001bf8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bfc:	6453      	str	r3, [r2, #68]	; 0x44
 8001bfe:	4b0d      	ldr	r3, [pc, #52]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c06:	607b      	str	r3, [r7, #4]
 8001c08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	603b      	str	r3, [r7, #0]
 8001c0e:	4b09      	ldr	r3, [pc, #36]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <HAL_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c22:	603b      	str	r3, [r7, #0]
 8001c24:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800

08001c38 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b08a      	sub	sp, #40	; 0x28
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	2200      	movs	r2, #0
 8001c46:	601a      	str	r2, [r3, #0]
 8001c48:	605a      	str	r2, [r3, #4]
 8001c4a:	609a      	str	r2, [r3, #8]
 8001c4c:	60da      	str	r2, [r3, #12]
 8001c4e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a19      	ldr	r2, [pc, #100]	; (8001cbc <HAL_I2C_MspInit+0x84>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d12b      	bne.n	8001cb2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <HAL_I2C_MspInit+0x88>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <HAL_I2C_MspInit+0x88>)
 8001c64:	f043 0320 	orr.w	r3, r3, #32
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <HAL_I2C_MspInit+0x88>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f003 0320 	and.w	r3, r3, #32
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PF0     ------> I2C2_SDA
    PF1     ------> I2C2_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001c76:	2303      	movs	r3, #3
 8001c78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c7a:	2312      	movs	r3, #18
 8001c7c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c82:	2303      	movs	r3, #3
 8001c84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001c86:	2304      	movs	r3, #4
 8001c88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480c      	ldr	r0, [pc, #48]	; (8001cc4 <HAL_I2C_MspInit+0x8c>)
 8001c92:	f000 fb51 	bl	8002338 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_I2C_MspInit+0x88>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	4a08      	ldr	r2, [pc, #32]	; (8001cc0 <HAL_I2C_MspInit+0x88>)
 8001ca0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ca4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ca6:	4b06      	ldr	r3, [pc, #24]	; (8001cc0 <HAL_I2C_MspInit+0x88>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001cae:	60fb      	str	r3, [r7, #12]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001cb2:	bf00      	nop
 8001cb4:	3728      	adds	r7, #40	; 0x28
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40005800 	.word	0x40005800
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40021400 	.word	0x40021400

08001cc8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b08a      	sub	sp, #40	; 0x28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd0:	f107 0314 	add.w	r3, r7, #20
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]
 8001cde:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a19      	ldr	r2, [pc, #100]	; (8001d4c <HAL_SPI_MspInit+0x84>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d12b      	bne.n	8001d42 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	613b      	str	r3, [r7, #16]
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_SPI_MspInit+0x88>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a17      	ldr	r2, [pc, #92]	; (8001d50 <HAL_SPI_MspInit+0x88>)
 8001cf4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b15      	ldr	r3, [pc, #84]	; (8001d50 <HAL_SPI_MspInit+0x88>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d02:	613b      	str	r3, [r7, #16]
 8001d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	60fb      	str	r3, [r7, #12]
 8001d0a:	4b11      	ldr	r3, [pc, #68]	; (8001d50 <HAL_SPI_MspInit+0x88>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	4a10      	ldr	r2, [pc, #64]	; (8001d50 <HAL_SPI_MspInit+0x88>)
 8001d10:	f043 0301 	orr.w	r3, r3, #1
 8001d14:	6313      	str	r3, [r2, #48]	; 0x30
 8001d16:	4b0e      	ldr	r3, [pc, #56]	; (8001d50 <HAL_SPI_MspInit+0x88>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	f003 0301 	and.w	r3, r3, #1
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001d22:	23e0      	movs	r3, #224	; 0xe0
 8001d24:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d26:	2302      	movs	r3, #2
 8001d28:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2e:	2303      	movs	r3, #3
 8001d30:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d32:	2305      	movs	r3, #5
 8001d34:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d36:	f107 0314 	add.w	r3, r7, #20
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4805      	ldr	r0, [pc, #20]	; (8001d54 <HAL_SPI_MspInit+0x8c>)
 8001d3e:	f000 fafb 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001d42:	bf00      	nop
 8001d44:	3728      	adds	r7, #40	; 0x28
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40013000 	.word	0x40013000
 8001d50:	40023800 	.word	0x40023800
 8001d54:	40020000 	.word	0x40020000

08001d58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b08a      	sub	sp, #40	; 0x28
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d60:	f107 0314 	add.w	r3, r7, #20
 8001d64:	2200      	movs	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	605a      	str	r2, [r3, #4]
 8001d6a:	609a      	str	r2, [r3, #8]
 8001d6c:	60da      	str	r2, [r3, #12]
 8001d6e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4a19      	ldr	r2, [pc, #100]	; (8001ddc <HAL_UART_MspInit+0x84>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d12c      	bne.n	8001dd4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	613b      	str	r3, [r7, #16]
 8001d7e:	4b18      	ldr	r3, [pc, #96]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	4a17      	ldr	r2, [pc, #92]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d88:	6413      	str	r3, [r2, #64]	; 0x40
 8001d8a:	4b15      	ldr	r3, [pc, #84]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d92:	613b      	str	r3, [r7, #16]
 8001d94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d96:	2300      	movs	r3, #0
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9e:	4a10      	ldr	r2, [pc, #64]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001da0:	f043 0308 	orr.w	r3, r3, #8
 8001da4:	6313      	str	r3, [r2, #48]	; 0x30
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <HAL_UART_MspInit+0x88>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001daa:	f003 0308 	and.w	r3, r3, #8
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001db6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001db8:	2302      	movs	r3, #2
 8001dba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc0:	2303      	movs	r3, #3
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001dc4:	2307      	movs	r3, #7
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001dc8:	f107 0314 	add.w	r3, r7, #20
 8001dcc:	4619      	mov	r1, r3
 8001dce:	4805      	ldr	r0, [pc, #20]	; (8001de4 <HAL_UART_MspInit+0x8c>)
 8001dd0:	f000 fab2 	bl	8002338 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001dd4:	bf00      	nop
 8001dd6:	3728      	adds	r7, #40	; 0x28
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	40004800 	.word	0x40004800
 8001de0:	40023800 	.word	0x40023800
 8001de4:	40020c00 	.word	0x40020c00

08001de8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001dec:	e7fe      	b.n	8001dec <NMI_Handler+0x4>

08001dee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dee:	b480      	push	{r7}
 8001df0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001df2:	e7fe      	b.n	8001df2 <HardFault_Handler+0x4>

08001df4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001df8:	e7fe      	b.n	8001df8 <MemManage_Handler+0x4>

08001dfa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001dfe:	e7fe      	b.n	8001dfe <BusFault_Handler+0x4>

08001e00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <UsageFault_Handler+0x4>

08001e06 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e14:	b480      	push	{r7}
 8001e16:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e18:	bf00      	nop
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr

08001e22 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e22:	b480      	push	{r7}
 8001e24:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e26:	bf00      	nop
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e34:	f000 f956 	bl	80020e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e38:	bf00      	nop
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  return 1;
 8001e40:	2301      	movs	r3, #1
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr

08001e4c <_kill>:

int _kill(int pid, int sig)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b082      	sub	sp, #8
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e56:	f002 fc0b 	bl	8004670 <__errno>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	2216      	movs	r2, #22
 8001e5e:	601a      	str	r2, [r3, #0]
  return -1;
 8001e60:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}

08001e6c <_exit>:

void _exit (int status)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f7ff ffe7 	bl	8001e4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e7e:	e7fe      	b.n	8001e7e <_exit+0x12>

08001e80 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e00a      	b.n	8001ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e92:	f3af 8000 	nop.w
 8001e96:	4601      	mov	r1, r0
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	1c5a      	adds	r2, r3, #1
 8001e9c:	60ba      	str	r2, [r7, #8]
 8001e9e:	b2ca      	uxtb	r2, r1
 8001ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	617b      	str	r3, [r7, #20]
 8001ea8:	697a      	ldr	r2, [r7, #20]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	429a      	cmp	r2, r3
 8001eae:	dbf0      	blt.n	8001e92 <_read+0x12>
  }

  return len;
 8001eb0:	687b      	ldr	r3, [r7, #4]
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3718      	adds	r7, #24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b086      	sub	sp, #24
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	60f8      	str	r0, [r7, #12]
 8001ec2:	60b9      	str	r1, [r7, #8]
 8001ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	617b      	str	r3, [r7, #20]
 8001eca:	e009      	b.n	8001ee0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	1c5a      	adds	r2, r3, #1
 8001ed0:	60ba      	str	r2, [r7, #8]
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f7ff fe05 	bl	8001ae4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	3301      	adds	r3, #1
 8001ede:	617b      	str	r3, [r7, #20]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	dbf1      	blt.n	8001ecc <_write+0x12>
  }
  return len;
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	3718      	adds	r7, #24
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}

08001ef2 <_close>:

int _close(int file)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f0a:	b480      	push	{r7}
 8001f0c:	b083      	sub	sp, #12
 8001f0e:	af00      	add	r7, sp, #0
 8001f10:	6078      	str	r0, [r7, #4]
 8001f12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f1a:	605a      	str	r2, [r3, #4]
  return 0;
 8001f1c:	2300      	movs	r3, #0
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr

08001f2a <_isatty>:

int _isatty(int file)
{
 8001f2a:	b480      	push	{r7}
 8001f2c:	b083      	sub	sp, #12
 8001f2e:	af00      	add	r7, sp, #0
 8001f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f32:	2301      	movs	r3, #1
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b085      	sub	sp, #20
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3714      	adds	r7, #20
 8001f52:	46bd      	mov	sp, r7
 8001f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f58:	4770      	bx	lr
	...

08001f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f64:	4a14      	ldr	r2, [pc, #80]	; (8001fb8 <_sbrk+0x5c>)
 8001f66:	4b15      	ldr	r3, [pc, #84]	; (8001fbc <_sbrk+0x60>)
 8001f68:	1ad3      	subs	r3, r2, r3
 8001f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f70:	4b13      	ldr	r3, [pc, #76]	; (8001fc0 <_sbrk+0x64>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d102      	bne.n	8001f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <_sbrk+0x64>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <_sbrk+0x68>)
 8001f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d207      	bcs.n	8001f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f8c:	f002 fb70 	bl	8004670 <__errno>
 8001f90:	4603      	mov	r3, r0
 8001f92:	220c      	movs	r2, #12
 8001f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f9a:	e009      	b.n	8001fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <_sbrk+0x64>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fa2:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <_sbrk+0x64>)
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4413      	add	r3, r2
 8001faa:	4a05      	ldr	r2, [pc, #20]	; (8001fc0 <_sbrk+0x64>)
 8001fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fae:	68fb      	ldr	r3, [r7, #12]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}
 8001fb8:	20030000 	.word	0x20030000
 8001fbc:	00000400 	.word	0x00000400
 8001fc0:	20000400 	.word	0x20000400
 8001fc4:	20000418 	.word	0x20000418

08001fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <SystemInit+0x20>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	4a05      	ldr	r2, [pc, #20]	; (8001fe8 <SystemInit+0x20>)
 8001fd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fdc:	bf00      	nop
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000ed00 	.word	0xe000ed00

08001fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001fec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002024 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ff0:	480d      	ldr	r0, [pc, #52]	; (8002028 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ff2:	490e      	ldr	r1, [pc, #56]	; (800202c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ff4:	4a0e      	ldr	r2, [pc, #56]	; (8002030 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ff6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ff8:	e002      	b.n	8002000 <LoopCopyDataInit>

08001ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ffe:	3304      	adds	r3, #4

08002000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002004:	d3f9      	bcc.n	8001ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002006:	4a0b      	ldr	r2, [pc, #44]	; (8002034 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002008:	4c0b      	ldr	r4, [pc, #44]	; (8002038 <LoopFillZerobss+0x26>)
  movs r3, #0
 800200a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800200c:	e001      	b.n	8002012 <LoopFillZerobss>

0800200e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800200e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002010:	3204      	adds	r2, #4

08002012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002014:	d3fb      	bcc.n	800200e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002016:	f7ff ffd7 	bl	8001fc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800201a:	f002 fb2f 	bl	800467c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800201e:	f7ff fd73 	bl	8001b08 <main>
  bx  lr    
 8002022:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002024:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800202c:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 8002030:	08007a8c 	.word	0x08007a8c
  ldr r2, =_sbss
 8002034:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 8002038:	20000418 	.word	0x20000418

0800203c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800203c:	e7fe      	b.n	800203c <ADC_IRQHandler>
	...

08002040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002044:	4b0e      	ldr	r3, [pc, #56]	; (8002080 <HAL_Init+0x40>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4a0d      	ldr	r2, [pc, #52]	; (8002080 <HAL_Init+0x40>)
 800204a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <HAL_Init+0x40>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a0a      	ldr	r2, [pc, #40]	; (8002080 <HAL_Init+0x40>)
 8002056:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800205a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800205c:	4b08      	ldr	r3, [pc, #32]	; (8002080 <HAL_Init+0x40>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a07      	ldr	r2, [pc, #28]	; (8002080 <HAL_Init+0x40>)
 8002062:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002068:	2003      	movs	r0, #3
 800206a:	f000 f931 	bl	80022d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800206e:	200f      	movs	r0, #15
 8002070:	f000 f808 	bl	8002084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002074:	f7ff fdb8 	bl	8001be8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002078:	2300      	movs	r3, #0
}
 800207a:	4618      	mov	r0, r3
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023c00 	.word	0x40023c00

08002084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800208c:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <HAL_InitTick+0x54>)
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x58>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	4619      	mov	r1, r3
 8002096:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209a:	fbb3 f3f1 	udiv	r3, r3, r1
 800209e:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a2:	4618      	mov	r0, r3
 80020a4:	f000 f93b 	bl	800231e <HAL_SYSTICK_Config>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e00e      	b.n	80020d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2b0f      	cmp	r3, #15
 80020b6:	d80a      	bhi.n	80020ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020b8:	2200      	movs	r2, #0
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020c0:	f000 f911 	bl	80022e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c4:	4a06      	ldr	r2, [pc, #24]	; (80020e0 <HAL_InitTick+0x5c>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ca:	2300      	movs	r3, #0
 80020cc:	e000      	b.n	80020d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
}
 80020d0:	4618      	mov	r0, r3
 80020d2:	3708      	adds	r7, #8
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	20000004 	.word	0x20000004
 80020dc:	2000000c 	.word	0x2000000c
 80020e0:	20000008 	.word	0x20000008

080020e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020e8:	4b06      	ldr	r3, [pc, #24]	; (8002104 <HAL_IncTick+0x20>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x24>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4413      	add	r3, r2
 80020f4:	4a04      	ldr	r2, [pc, #16]	; (8002108 <HAL_IncTick+0x24>)
 80020f6:	6013      	str	r3, [r2, #0]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	2000000c 	.word	0x2000000c
 8002108:	20000404 	.word	0x20000404

0800210c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <HAL_GetTick+0x14>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	20000404 	.word	0x20000404

08002124 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff ffee 	bl	800210c <HAL_GetTick>
 8002130:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800213c:	d005      	beq.n	800214a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213e:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <HAL_Delay+0x44>)
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	461a      	mov	r2, r3
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	4413      	add	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214a:	bf00      	nop
 800214c:	f7ff ffde 	bl	800210c <HAL_GetTick>
 8002150:	4602      	mov	r2, r0
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	68fa      	ldr	r2, [r7, #12]
 8002158:	429a      	cmp	r2, r3
 800215a:	d8f7      	bhi.n	800214c <HAL_Delay+0x28>
  {
  }
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
 8002166:	bf00      	nop
 8002168:	2000000c 	.word	0x2000000c

0800216c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800216c:	b480      	push	{r7}
 800216e:	b085      	sub	sp, #20
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f003 0307 	and.w	r3, r3, #7
 800217a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800217c:	4b0c      	ldr	r3, [pc, #48]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 800217e:	68db      	ldr	r3, [r3, #12]
 8002180:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002182:	68ba      	ldr	r2, [r7, #8]
 8002184:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002188:	4013      	ands	r3, r2
 800218a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002194:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002198:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800219c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219e:	4a04      	ldr	r2, [pc, #16]	; (80021b0 <__NVIC_SetPriorityGrouping+0x44>)
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	60d3      	str	r3, [r2, #12]
}
 80021a4:	bf00      	nop
 80021a6:	3714      	adds	r7, #20
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr
 80021b0:	e000ed00 	.word	0xe000ed00

080021b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b4:	b480      	push	{r7}
 80021b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b8:	4b04      	ldr	r3, [pc, #16]	; (80021cc <__NVIC_GetPriorityGrouping+0x18>)
 80021ba:	68db      	ldr	r3, [r3, #12]
 80021bc:	0a1b      	lsrs	r3, r3, #8
 80021be:	f003 0307 	and.w	r3, r3, #7
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	4603      	mov	r3, r0
 80021d8:	6039      	str	r1, [r7, #0]
 80021da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	db0a      	blt.n	80021fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2da      	uxtb	r2, r3
 80021e8:	490c      	ldr	r1, [pc, #48]	; (800221c <__NVIC_SetPriority+0x4c>)
 80021ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ee:	0112      	lsls	r2, r2, #4
 80021f0:	b2d2      	uxtb	r2, r2
 80021f2:	440b      	add	r3, r1
 80021f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021f8:	e00a      	b.n	8002210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	b2da      	uxtb	r2, r3
 80021fe:	4908      	ldr	r1, [pc, #32]	; (8002220 <__NVIC_SetPriority+0x50>)
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	3b04      	subs	r3, #4
 8002208:	0112      	lsls	r2, r2, #4
 800220a:	b2d2      	uxtb	r2, r2
 800220c:	440b      	add	r3, r1
 800220e:	761a      	strb	r2, [r3, #24]
}
 8002210:	bf00      	nop
 8002212:	370c      	adds	r7, #12
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr
 800221c:	e000e100 	.word	0xe000e100
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002224:	b480      	push	{r7}
 8002226:	b089      	sub	sp, #36	; 0x24
 8002228:	af00      	add	r7, sp, #0
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	60b9      	str	r1, [r7, #8]
 800222e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f003 0307 	and.w	r3, r3, #7
 8002236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	f1c3 0307 	rsb	r3, r3, #7
 800223e:	2b04      	cmp	r3, #4
 8002240:	bf28      	it	cs
 8002242:	2304      	movcs	r3, #4
 8002244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002246:	69fb      	ldr	r3, [r7, #28]
 8002248:	3304      	adds	r3, #4
 800224a:	2b06      	cmp	r3, #6
 800224c:	d902      	bls.n	8002254 <NVIC_EncodePriority+0x30>
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	3b03      	subs	r3, #3
 8002252:	e000      	b.n	8002256 <NVIC_EncodePriority+0x32>
 8002254:	2300      	movs	r3, #0
 8002256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002258:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	fa02 f303 	lsl.w	r3, r2, r3
 8002262:	43da      	mvns	r2, r3
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	401a      	ands	r2, r3
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800226c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	fa01 f303 	lsl.w	r3, r1, r3
 8002276:	43d9      	mvns	r1, r3
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800227c:	4313      	orrs	r3, r2
         );
}
 800227e:	4618      	mov	r0, r3
 8002280:	3724      	adds	r7, #36	; 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
	...

0800228c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	3b01      	subs	r3, #1
 8002298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800229c:	d301      	bcc.n	80022a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800229e:	2301      	movs	r3, #1
 80022a0:	e00f      	b.n	80022c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022a2:	4a0a      	ldr	r2, [pc, #40]	; (80022cc <SysTick_Config+0x40>)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	3b01      	subs	r3, #1
 80022a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022aa:	210f      	movs	r1, #15
 80022ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80022b0:	f7ff ff8e 	bl	80021d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <SysTick_Config+0x40>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ba:	4b04      	ldr	r3, [pc, #16]	; (80022cc <SysTick_Config+0x40>)
 80022bc:	2207      	movs	r2, #7
 80022be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	e000e010 	.word	0xe000e010

080022d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	f7ff ff47 	bl	800216c <__NVIC_SetPriorityGrouping>
}
 80022de:	bf00      	nop
 80022e0:	3708      	adds	r7, #8
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}

080022e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022e6:	b580      	push	{r7, lr}
 80022e8:	b086      	sub	sp, #24
 80022ea:	af00      	add	r7, sp, #0
 80022ec:	4603      	mov	r3, r0
 80022ee:	60b9      	str	r1, [r7, #8]
 80022f0:	607a      	str	r2, [r7, #4]
 80022f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022f8:	f7ff ff5c 	bl	80021b4 <__NVIC_GetPriorityGrouping>
 80022fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022fe:	687a      	ldr	r2, [r7, #4]
 8002300:	68b9      	ldr	r1, [r7, #8]
 8002302:	6978      	ldr	r0, [r7, #20]
 8002304:	f7ff ff8e 	bl	8002224 <NVIC_EncodePriority>
 8002308:	4602      	mov	r2, r0
 800230a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800230e:	4611      	mov	r1, r2
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff5d 	bl	80021d0 <__NVIC_SetPriority>
}
 8002316:	bf00      	nop
 8002318:	3718      	adds	r7, #24
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffb0 	bl	800228c <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002338:	b480      	push	{r7}
 800233a:	b089      	sub	sp, #36	; 0x24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002346:	2300      	movs	r3, #0
 8002348:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800234a:	2300      	movs	r3, #0
 800234c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]
 8002352:	e177      	b.n	8002644 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002354:	2201      	movs	r2, #1
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800235e:	683b      	ldr	r3, [r7, #0]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	697a      	ldr	r2, [r7, #20]
 8002364:	4013      	ands	r3, r2
 8002366:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002368:	693a      	ldr	r2, [r7, #16]
 800236a:	697b      	ldr	r3, [r7, #20]
 800236c:	429a      	cmp	r2, r3
 800236e:	f040 8166 	bne.w	800263e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	2b01      	cmp	r3, #1
 800237c:	d005      	beq.n	800238a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002386:	2b02      	cmp	r3, #2
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f003 0303 	and.w	r3, r3, #3
 80023f4:	2b03      	cmp	r3, #3
 80023f6:	d017      	beq.n	8002428 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	2203      	movs	r2, #3
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f003 0303 	and.w	r3, r3, #3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d123      	bne.n	800247c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	08da      	lsrs	r2, r3, #3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	3208      	adds	r2, #8
 800243c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002440:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	220f      	movs	r2, #15
 800244c:	fa02 f303 	lsl.w	r3, r2, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	69ba      	ldr	r2, [r7, #24]
 8002454:	4013      	ands	r3, r2
 8002456:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	f003 0307 	and.w	r3, r3, #7
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	69ba      	ldr	r2, [r7, #24]
 800246a:	4313      	orrs	r3, r2
 800246c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800246e:	69fb      	ldr	r3, [r7, #28]
 8002470:	08da      	lsrs	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	3208      	adds	r2, #8
 8002476:	69b9      	ldr	r1, [r7, #24]
 8002478:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	005b      	lsls	r3, r3, #1
 8002486:	2203      	movs	r2, #3
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43db      	mvns	r3, r3
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4013      	ands	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	f003 0203 	and.w	r2, r3, #3
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	005b      	lsls	r3, r3, #1
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	4313      	orrs	r3, r2
 80024a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 80c0 	beq.w	800263e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	60fb      	str	r3, [r7, #12]
 80024c2:	4b66      	ldr	r3, [pc, #408]	; (800265c <HAL_GPIO_Init+0x324>)
 80024c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c6:	4a65      	ldr	r2, [pc, #404]	; (800265c <HAL_GPIO_Init+0x324>)
 80024c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024cc:	6453      	str	r3, [r2, #68]	; 0x44
 80024ce:	4b63      	ldr	r3, [pc, #396]	; (800265c <HAL_GPIO_Init+0x324>)
 80024d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024d6:	60fb      	str	r3, [r7, #12]
 80024d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024da:	4a61      	ldr	r2, [pc, #388]	; (8002660 <HAL_GPIO_Init+0x328>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0303 	and.w	r3, r3, #3
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	220f      	movs	r2, #15
 80024f2:	fa02 f303 	lsl.w	r3, r2, r3
 80024f6:	43db      	mvns	r3, r3
 80024f8:	69ba      	ldr	r2, [r7, #24]
 80024fa:	4013      	ands	r3, r2
 80024fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_GPIO_Init+0x32c>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d037      	beq.n	8002576 <HAL_GPIO_Init+0x23e>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a57      	ldr	r2, [pc, #348]	; (8002668 <HAL_GPIO_Init+0x330>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d031      	beq.n	8002572 <HAL_GPIO_Init+0x23a>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a56      	ldr	r2, [pc, #344]	; (800266c <HAL_GPIO_Init+0x334>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d02b      	beq.n	800256e <HAL_GPIO_Init+0x236>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a55      	ldr	r2, [pc, #340]	; (8002670 <HAL_GPIO_Init+0x338>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d025      	beq.n	800256a <HAL_GPIO_Init+0x232>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a54      	ldr	r2, [pc, #336]	; (8002674 <HAL_GPIO_Init+0x33c>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d01f      	beq.n	8002566 <HAL_GPIO_Init+0x22e>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a53      	ldr	r2, [pc, #332]	; (8002678 <HAL_GPIO_Init+0x340>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d019      	beq.n	8002562 <HAL_GPIO_Init+0x22a>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a52      	ldr	r2, [pc, #328]	; (800267c <HAL_GPIO_Init+0x344>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_GPIO_Init+0x226>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a51      	ldr	r2, [pc, #324]	; (8002680 <HAL_GPIO_Init+0x348>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d00d      	beq.n	800255a <HAL_GPIO_Init+0x222>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a50      	ldr	r2, [pc, #320]	; (8002684 <HAL_GPIO_Init+0x34c>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d007      	beq.n	8002556 <HAL_GPIO_Init+0x21e>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a4f      	ldr	r2, [pc, #316]	; (8002688 <HAL_GPIO_Init+0x350>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d101      	bne.n	8002552 <HAL_GPIO_Init+0x21a>
 800254e:	2309      	movs	r3, #9
 8002550:	e012      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002552:	230a      	movs	r3, #10
 8002554:	e010      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002556:	2308      	movs	r3, #8
 8002558:	e00e      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800255a:	2307      	movs	r3, #7
 800255c:	e00c      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800255e:	2306      	movs	r3, #6
 8002560:	e00a      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002562:	2305      	movs	r3, #5
 8002564:	e008      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002566:	2304      	movs	r3, #4
 8002568:	e006      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800256a:	2303      	movs	r3, #3
 800256c:	e004      	b.n	8002578 <HAL_GPIO_Init+0x240>
 800256e:	2302      	movs	r3, #2
 8002570:	e002      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <HAL_GPIO_Init+0x240>
 8002576:	2300      	movs	r3, #0
 8002578:	69fa      	ldr	r2, [r7, #28]
 800257a:	f002 0203 	and.w	r2, r2, #3
 800257e:	0092      	lsls	r2, r2, #2
 8002580:	4093      	lsls	r3, r2
 8002582:	69ba      	ldr	r2, [r7, #24]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002588:	4935      	ldr	r1, [pc, #212]	; (8002660 <HAL_GPIO_Init+0x328>)
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	089b      	lsrs	r3, r3, #2
 800258e:	3302      	adds	r3, #2
 8002590:	69ba      	ldr	r2, [r7, #24]
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_GPIO_Init+0x354>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	43db      	mvns	r3, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4013      	ands	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	685b      	ldr	r3, [r3, #4]
 80025aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025b2:	69ba      	ldr	r2, [r7, #24]
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	4313      	orrs	r3, r2
 80025b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ba:	4a34      	ldr	r2, [pc, #208]	; (800268c <HAL_GPIO_Init+0x354>)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_GPIO_Init+0x354>)
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c6:	693b      	ldr	r3, [r7, #16]
 80025c8:	43db      	mvns	r3, r3
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	4013      	ands	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025dc:	69ba      	ldr	r2, [r7, #24]
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025e4:	4a29      	ldr	r2, [pc, #164]	; (800268c <HAL_GPIO_Init+0x354>)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025ea:	4b28      	ldr	r3, [pc, #160]	; (800268c <HAL_GPIO_Init+0x354>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	685b      	ldr	r3, [r3, #4]
 80025fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002602:	2b00      	cmp	r3, #0
 8002604:	d003      	beq.n	800260e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002606:	69ba      	ldr	r2, [r7, #24]
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800260e:	4a1f      	ldr	r2, [pc, #124]	; (800268c <HAL_GPIO_Init+0x354>)
 8002610:	69bb      	ldr	r3, [r7, #24]
 8002612:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002614:	4b1d      	ldr	r3, [pc, #116]	; (800268c <HAL_GPIO_Init+0x354>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	43db      	mvns	r3, r3
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	4013      	ands	r3, r2
 8002622:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d003      	beq.n	8002638 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002630:	69ba      	ldr	r2, [r7, #24]
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	4313      	orrs	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002638:	4a14      	ldr	r2, [pc, #80]	; (800268c <HAL_GPIO_Init+0x354>)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3301      	adds	r3, #1
 8002642:	61fb      	str	r3, [r7, #28]
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	2b0f      	cmp	r3, #15
 8002648:	f67f ae84 	bls.w	8002354 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800264c:	bf00      	nop
 800264e:	bf00      	nop
 8002650:	3724      	adds	r7, #36	; 0x24
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800
 8002664:	40020000 	.word	0x40020000
 8002668:	40020400 	.word	0x40020400
 800266c:	40020800 	.word	0x40020800
 8002670:	40020c00 	.word	0x40020c00
 8002674:	40021000 	.word	0x40021000
 8002678:	40021400 	.word	0x40021400
 800267c:	40021800 	.word	0x40021800
 8002680:	40021c00 	.word	0x40021c00
 8002684:	40022000 	.word	0x40022000
 8002688:	40022400 	.word	0x40022400
 800268c:	40013c00 	.word	0x40013c00

08002690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002690:	b480      	push	{r7}
 8002692:	b083      	sub	sp, #12
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	460b      	mov	r3, r1
 800269a:	807b      	strh	r3, [r7, #2]
 800269c:	4613      	mov	r3, r2
 800269e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026a0:	787b      	ldrb	r3, [r7, #1]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d003      	beq.n	80026ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026a6:	887a      	ldrh	r2, [r7, #2]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026ac:	e003      	b.n	80026b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	041a      	lsls	r2, r3, #16
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	619a      	str	r2, [r3, #24]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	e12b      	b.n	800292e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d106      	bne.n	80026f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f7ff faa4 	bl	8001c38 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2224      	movs	r2, #36	; 0x24
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f022 0201 	bic.w	r2, r2, #1
 8002706:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002716:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002726:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002728:	f001 f8c2 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 800272c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	685b      	ldr	r3, [r3, #4]
 8002732:	4a81      	ldr	r2, [pc, #516]	; (8002938 <HAL_I2C_Init+0x274>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d807      	bhi.n	8002748 <HAL_I2C_Init+0x84>
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	4a80      	ldr	r2, [pc, #512]	; (800293c <HAL_I2C_Init+0x278>)
 800273c:	4293      	cmp	r3, r2
 800273e:	bf94      	ite	ls
 8002740:	2301      	movls	r3, #1
 8002742:	2300      	movhi	r3, #0
 8002744:	b2db      	uxtb	r3, r3
 8002746:	e006      	b.n	8002756 <HAL_I2C_Init+0x92>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	4a7d      	ldr	r2, [pc, #500]	; (8002940 <HAL_I2C_Init+0x27c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	bf94      	ite	ls
 8002750:	2301      	movls	r3, #1
 8002752:	2300      	movhi	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	2b00      	cmp	r3, #0
 8002758:	d001      	beq.n	800275e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0e7      	b.n	800292e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	4a78      	ldr	r2, [pc, #480]	; (8002944 <HAL_I2C_Init+0x280>)
 8002762:	fba2 2303 	umull	r2, r3, r2, r3
 8002766:	0c9b      	lsrs	r3, r3, #18
 8002768:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	68ba      	ldr	r2, [r7, #8]
 800277a:	430a      	orrs	r2, r1
 800277c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6a1b      	ldr	r3, [r3, #32]
 8002784:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	4a6a      	ldr	r2, [pc, #424]	; (8002938 <HAL_I2C_Init+0x274>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d802      	bhi.n	8002798 <HAL_I2C_Init+0xd4>
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	3301      	adds	r3, #1
 8002796:	e009      	b.n	80027ac <HAL_I2C_Init+0xe8>
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800279e:	fb02 f303 	mul.w	r3, r2, r3
 80027a2:	4a69      	ldr	r2, [pc, #420]	; (8002948 <HAL_I2C_Init+0x284>)
 80027a4:	fba2 2303 	umull	r2, r3, r2, r3
 80027a8:	099b      	lsrs	r3, r3, #6
 80027aa:	3301      	adds	r3, #1
 80027ac:	687a      	ldr	r2, [r7, #4]
 80027ae:	6812      	ldr	r2, [r2, #0]
 80027b0:	430b      	orrs	r3, r1
 80027b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	69db      	ldr	r3, [r3, #28]
 80027ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80027be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	495c      	ldr	r1, [pc, #368]	; (8002938 <HAL_I2C_Init+0x274>)
 80027c8:	428b      	cmp	r3, r1
 80027ca:	d819      	bhi.n	8002800 <HAL_I2C_Init+0x13c>
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	1e59      	subs	r1, r3, #1
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80027da:	1c59      	adds	r1, r3, #1
 80027dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80027e0:	400b      	ands	r3, r1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d00a      	beq.n	80027fc <HAL_I2C_Init+0x138>
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	1e59      	subs	r1, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	685b      	ldr	r3, [r3, #4]
 80027ee:	005b      	lsls	r3, r3, #1
 80027f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80027f4:	3301      	adds	r3, #1
 80027f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027fa:	e051      	b.n	80028a0 <HAL_I2C_Init+0x1dc>
 80027fc:	2304      	movs	r3, #4
 80027fe:	e04f      	b.n	80028a0 <HAL_I2C_Init+0x1dc>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d111      	bne.n	800282c <HAL_I2C_Init+0x168>
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	1e58      	subs	r0, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6859      	ldr	r1, [r3, #4]
 8002810:	460b      	mov	r3, r1
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	440b      	add	r3, r1
 8002816:	fbb0 f3f3 	udiv	r3, r0, r3
 800281a:	3301      	adds	r3, #1
 800281c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf0c      	ite	eq
 8002824:	2301      	moveq	r3, #1
 8002826:	2300      	movne	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	e012      	b.n	8002852 <HAL_I2C_Init+0x18e>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	1e58      	subs	r0, r3, #1
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6859      	ldr	r1, [r3, #4]
 8002834:	460b      	mov	r3, r1
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	0099      	lsls	r1, r3, #2
 800283c:	440b      	add	r3, r1
 800283e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002842:	3301      	adds	r3, #1
 8002844:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002848:	2b00      	cmp	r3, #0
 800284a:	bf0c      	ite	eq
 800284c:	2301      	moveq	r3, #1
 800284e:	2300      	movne	r3, #0
 8002850:	b2db      	uxtb	r3, r3
 8002852:	2b00      	cmp	r3, #0
 8002854:	d001      	beq.n	800285a <HAL_I2C_Init+0x196>
 8002856:	2301      	movs	r3, #1
 8002858:	e022      	b.n	80028a0 <HAL_I2C_Init+0x1dc>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10e      	bne.n	8002880 <HAL_I2C_Init+0x1bc>
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	1e58      	subs	r0, r3, #1
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6859      	ldr	r1, [r3, #4]
 800286a:	460b      	mov	r3, r1
 800286c:	005b      	lsls	r3, r3, #1
 800286e:	440b      	add	r3, r1
 8002870:	fbb0 f3f3 	udiv	r3, r0, r3
 8002874:	3301      	adds	r3, #1
 8002876:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800287a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800287e:	e00f      	b.n	80028a0 <HAL_I2C_Init+0x1dc>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	6809      	ldr	r1, [r1, #0]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	69da      	ldr	r2, [r3, #28]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a1b      	ldr	r3, [r3, #32]
 80028ba:	431a      	orrs	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	430a      	orrs	r2, r1
 80028c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80028ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6911      	ldr	r1, [r2, #16]
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68d2      	ldr	r2, [r2, #12]
 80028da:	4311      	orrs	r1, r2
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	695a      	ldr	r2, [r3, #20]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	699b      	ldr	r3, [r3, #24]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	681a      	ldr	r2, [r3, #0]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f042 0201 	orr.w	r2, r2, #1
 800290e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2220      	movs	r2, #32
 800291a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2200      	movs	r2, #0
 8002922:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2200      	movs	r2, #0
 8002928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800292c:	2300      	movs	r3, #0
}
 800292e:	4618      	mov	r0, r3
 8002930:	3710      	adds	r7, #16
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}
 8002936:	bf00      	nop
 8002938:	000186a0 	.word	0x000186a0
 800293c:	001e847f 	.word	0x001e847f
 8002940:	003d08ff 	.word	0x003d08ff
 8002944:	431bde83 	.word	0x431bde83
 8002948:	10624dd3 	.word	0x10624dd3

0800294c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b088      	sub	sp, #32
 8002950:	af02      	add	r7, sp, #8
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	607a      	str	r2, [r7, #4]
 8002956:	461a      	mov	r2, r3
 8002958:	460b      	mov	r3, r1
 800295a:	817b      	strh	r3, [r7, #10]
 800295c:	4613      	mov	r3, r2
 800295e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002960:	f7ff fbd4 	bl	800210c <HAL_GetTick>
 8002964:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800296c:	b2db      	uxtb	r3, r3
 800296e:	2b20      	cmp	r3, #32
 8002970:	f040 80e0 	bne.w	8002b34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	2319      	movs	r3, #25
 800297a:	2201      	movs	r2, #1
 800297c:	4970      	ldr	r1, [pc, #448]	; (8002b40 <HAL_I2C_Master_Transmit+0x1f4>)
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f964 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 8002984:	4603      	mov	r3, r0
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800298a:	2302      	movs	r3, #2
 800298c:	e0d3      	b.n	8002b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002994:	2b01      	cmp	r3, #1
 8002996:	d101      	bne.n	800299c <HAL_I2C_Master_Transmit+0x50>
 8002998:	2302      	movs	r3, #2
 800299a:	e0cc      	b.n	8002b36 <HAL_I2C_Master_Transmit+0x1ea>
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 0301 	and.w	r3, r3, #1
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d007      	beq.n	80029c2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0201 	orr.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029d0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	2221      	movs	r2, #33	; 0x21
 80029d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2210      	movs	r2, #16
 80029de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	2200      	movs	r2, #0
 80029e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	687a      	ldr	r2, [r7, #4]
 80029ec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	893a      	ldrh	r2, [r7, #8]
 80029f2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	4a50      	ldr	r2, [pc, #320]	; (8002b44 <HAL_I2C_Master_Transmit+0x1f8>)
 8002a02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002a04:	8979      	ldrh	r1, [r7, #10]
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	6a3a      	ldr	r2, [r7, #32]
 8002a0a:	68f8      	ldr	r0, [r7, #12]
 8002a0c:	f000 f89c 	bl	8002b48 <I2C_MasterRequestWrite>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e08d      	b.n	8002b36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	613b      	str	r3, [r7, #16]
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	613b      	str	r3, [r7, #16]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	613b      	str	r3, [r7, #16]
 8002a2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002a30:	e066      	b.n	8002b00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	6a39      	ldr	r1, [r7, #32]
 8002a36:	68f8      	ldr	r0, [r7, #12]
 8002a38:	f000 f9de 	bl	8002df8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00d      	beq.n	8002a5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	2b04      	cmp	r3, #4
 8002a48:	d107      	bne.n	8002a5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002a58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e06b      	b.n	8002b36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	781a      	ldrb	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a86:	3b01      	subs	r3, #1
 8002a88:	b29a      	uxth	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	f003 0304 	and.w	r3, r3, #4
 8002a98:	2b04      	cmp	r3, #4
 8002a9a:	d11b      	bne.n	8002ad4 <HAL_I2C_Master_Transmit+0x188>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d017      	beq.n	8002ad4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa8:	781a      	ldrb	r2, [r3, #0]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab4:	1c5a      	adds	r2, r3, #1
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	3b01      	subs	r3, #1
 8002ac2:	b29a      	uxth	r2, r3
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002acc:	3b01      	subs	r3, #1
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ad4:	697a      	ldr	r2, [r7, #20]
 8002ad6:	6a39      	ldr	r1, [r7, #32]
 8002ad8:	68f8      	ldr	r0, [r7, #12]
 8002ada:	f000 f9ce 	bl	8002e7a <I2C_WaitOnBTFFlagUntilTimeout>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d00d      	beq.n	8002b00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae8:	2b04      	cmp	r3, #4
 8002aea:	d107      	bne.n	8002afc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002afa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e01a      	b.n	8002b36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d194      	bne.n	8002a32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2220      	movs	r2, #32
 8002b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b30:	2300      	movs	r3, #0
 8002b32:	e000      	b.n	8002b36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002b34:	2302      	movs	r3, #2
  }
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	00100002 	.word	0x00100002
 8002b44:	ffff0000 	.word	0xffff0000

08002b48 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b088      	sub	sp, #32
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	607a      	str	r2, [r7, #4]
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	460b      	mov	r3, r1
 8002b56:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	2b08      	cmp	r3, #8
 8002b62:	d006      	beq.n	8002b72 <I2C_MasterRequestWrite+0x2a>
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2b01      	cmp	r3, #1
 8002b68:	d003      	beq.n	8002b72 <I2C_MasterRequestWrite+0x2a>
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b70:	d108      	bne.n	8002b84 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b80:	601a      	str	r2, [r3, #0]
 8002b82:	e00b      	b.n	8002b9c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	2b12      	cmp	r3, #18
 8002b8a:	d107      	bne.n	8002b9c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	681a      	ldr	r2, [r3, #0]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002b9a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ba8:	68f8      	ldr	r0, [r7, #12]
 8002baa:	f000 f84f 	bl	8002c4c <I2C_WaitOnFlagUntilTimeout>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d00d      	beq.n	8002bd0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bc2:	d103      	bne.n	8002bcc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002bca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002bcc:	2303      	movs	r3, #3
 8002bce:	e035      	b.n	8002c3c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	691b      	ldr	r3, [r3, #16]
 8002bd4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002bd8:	d108      	bne.n	8002bec <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002be8:	611a      	str	r2, [r3, #16]
 8002bea:	e01b      	b.n	8002c24 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002bec:	897b      	ldrh	r3, [r7, #10]
 8002bee:	11db      	asrs	r3, r3, #7
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	f003 0306 	and.w	r3, r3, #6
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f063 030f 	orn	r3, r3, #15
 8002bfc:	b2da      	uxtb	r2, r3
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	687a      	ldr	r2, [r7, #4]
 8002c08:	490e      	ldr	r1, [pc, #56]	; (8002c44 <I2C_MasterRequestWrite+0xfc>)
 8002c0a:	68f8      	ldr	r0, [r7, #12]
 8002c0c:	f000 f875 	bl	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002c16:	2301      	movs	r3, #1
 8002c18:	e010      	b.n	8002c3c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	b2da      	uxtb	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	4907      	ldr	r1, [pc, #28]	; (8002c48 <I2C_MasterRequestWrite+0x100>)
 8002c2a:	68f8      	ldr	r0, [r7, #12]
 8002c2c:	f000 f865 	bl	8002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c30:	4603      	mov	r3, r0
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e000      	b.n	8002c3c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002c3a:	2300      	movs	r3, #0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3718      	adds	r7, #24
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	00010008 	.word	0x00010008
 8002c48:	00010002 	.word	0x00010002

08002c4c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	60f8      	str	r0, [r7, #12]
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	603b      	str	r3, [r7, #0]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c5c:	e025      	b.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c64:	d021      	beq.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c66:	f7ff fa51 	bl	800210c <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	683a      	ldr	r2, [r7, #0]
 8002c72:	429a      	cmp	r2, r3
 8002c74:	d302      	bcc.n	8002c7c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d116      	bne.n	8002caa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2220      	movs	r2, #32
 8002c86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	f043 0220 	orr.w	r2, r3, #32
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e023      	b.n	8002cf2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	0c1b      	lsrs	r3, r3, #16
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b01      	cmp	r3, #1
 8002cb2:	d10d      	bne.n	8002cd0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	43da      	mvns	r2, r3
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	bf0c      	ite	eq
 8002cc6:	2301      	moveq	r3, #1
 8002cc8:	2300      	movne	r3, #0
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	e00c      	b.n	8002cea <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	699b      	ldr	r3, [r3, #24]
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4013      	ands	r3, r2
 8002cdc:	b29b      	uxth	r3, r3
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bf0c      	ite	eq
 8002ce2:	2301      	moveq	r3, #1
 8002ce4:	2300      	movne	r3, #0
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	461a      	mov	r2, r3
 8002cea:	79fb      	ldrb	r3, [r7, #7]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d0b6      	beq.n	8002c5e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3710      	adds	r7, #16
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}

08002cfa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002cfa:	b580      	push	{r7, lr}
 8002cfc:	b084      	sub	sp, #16
 8002cfe:	af00      	add	r7, sp, #0
 8002d00:	60f8      	str	r0, [r7, #12]
 8002d02:	60b9      	str	r1, [r7, #8]
 8002d04:	607a      	str	r2, [r7, #4]
 8002d06:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002d08:	e051      	b.n	8002dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	695b      	ldr	r3, [r3, #20]
 8002d10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d18:	d123      	bne.n	8002d62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d28:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d32:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	2200      	movs	r2, #0
 8002d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4e:	f043 0204 	orr.w	r2, r3, #4
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e046      	b.n	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d68:	d021      	beq.n	8002dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d6a:	f7ff f9cf 	bl	800210c <HAL_GetTick>
 8002d6e:	4602      	mov	r2, r0
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	1ad3      	subs	r3, r2, r3
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d302      	bcc.n	8002d80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d116      	bne.n	8002dae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2200      	movs	r2, #0
 8002d84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9a:	f043 0220 	orr.w	r2, r3, #32
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2200      	movs	r2, #0
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e020      	b.n	8002df0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	0c1b      	lsrs	r3, r3, #16
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d10c      	bne.n	8002dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	43da      	mvns	r2, r3
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	e00b      	b.n	8002dea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	699b      	ldr	r3, [r3, #24]
 8002dd8:	43da      	mvns	r2, r3
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	bf14      	ite	ne
 8002de4:	2301      	movne	r3, #1
 8002de6:	2300      	moveq	r3, #0
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d18d      	bne.n	8002d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3710      	adds	r7, #16
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b084      	sub	sp, #16
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e04:	e02d      	b.n	8002e62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f000 f878 	bl	8002efc <I2C_IsAcknowledgeFailed>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e02d      	b.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e1c:	d021      	beq.n	8002e62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e1e:	f7ff f975 	bl	800210c <HAL_GetTick>
 8002e22:	4602      	mov	r2, r0
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	1ad3      	subs	r3, r2, r3
 8002e28:	68ba      	ldr	r2, [r7, #8]
 8002e2a:	429a      	cmp	r2, r3
 8002e2c:	d302      	bcc.n	8002e34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d116      	bne.n	8002e62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	2200      	movs	r2, #0
 8002e38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4e:	f043 0220 	orr.w	r2, r3, #32
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2200      	movs	r2, #0
 8002e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e007      	b.n	8002e72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	695b      	ldr	r3, [r3, #20]
 8002e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e6c:	2b80      	cmp	r3, #128	; 0x80
 8002e6e:	d1ca      	bne.n	8002e06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	60f8      	str	r0, [r7, #12]
 8002e82:	60b9      	str	r1, [r7, #8]
 8002e84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002e86:	e02d      	b.n	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f837 	bl	8002efc <I2C_IsAcknowledgeFailed>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e02d      	b.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	68bb      	ldr	r3, [r7, #8]
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9e:	d021      	beq.n	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea0:	f7ff f934 	bl	800210c <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d302      	bcc.n	8002eb6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d116      	bne.n	8002ee4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2200      	movs	r2, #0
 8002eba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	f043 0220 	orr.w	r2, r3, #32
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	e007      	b.n	8002ef4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	f003 0304 	and.w	r3, r3, #4
 8002eee:	2b04      	cmp	r3, #4
 8002ef0:	d1ca      	bne.n	8002e88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002ef2:	2300      	movs	r3, #0
}
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	3710      	adds	r7, #16
 8002ef8:	46bd      	mov	sp, r7
 8002efa:	bd80      	pop	{r7, pc}

08002efc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b083      	sub	sp, #12
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f12:	d11b      	bne.n	8002f4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f38:	f043 0204 	orr.w	r2, r3, #4
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e000      	b.n	8002f4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002f4c:	2300      	movs	r3, #0
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr

08002f5a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002f5a:	b480      	push	{r7}
 8002f5c:	b083      	sub	sp, #12
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
 8002f62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f6a:	b2db      	uxtb	r3, r3
 8002f6c:	2b20      	cmp	r3, #32
 8002f6e:	d129      	bne.n	8002fc4 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2224      	movs	r2, #36	; 0x24
 8002f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	681a      	ldr	r2, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f022 0201 	bic.w	r2, r2, #1
 8002f86:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f022 0210 	bic.w	r2, r2, #16
 8002f96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	430a      	orrs	r2, r1
 8002fa6:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f042 0201 	orr.w	r2, r2, #1
 8002fb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2220      	movs	r2, #32
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	e000      	b.n	8002fc6 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8002fc4:	2302      	movs	r3, #2
  }
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b085      	sub	sp, #20
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
 8002fda:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8002fdc:	2300      	movs	r3, #0
 8002fde:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	2b20      	cmp	r3, #32
 8002fea:	d12a      	bne.n	8003042 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2224      	movs	r2, #36	; 0x24
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f022 0201 	bic.w	r2, r2, #1
 8003002:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800300a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800300c:	89fb      	ldrh	r3, [r7, #14]
 800300e:	f023 030f 	bic.w	r3, r3, #15
 8003012:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	b29a      	uxth	r2, r3
 8003018:	89fb      	ldrh	r3, [r7, #14]
 800301a:	4313      	orrs	r3, r2
 800301c:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	89fa      	ldrh	r2, [r7, #14]
 8003024:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f042 0201 	orr.w	r2, r2, #1
 8003034:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3714      	adds	r7, #20
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e267      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d075      	beq.n	800315a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800306e:	4b88      	ldr	r3, [pc, #544]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f003 030c 	and.w	r3, r3, #12
 8003076:	2b04      	cmp	r3, #4
 8003078:	d00c      	beq.n	8003094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800307a:	4b85      	ldr	r3, [pc, #532]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003082:	2b08      	cmp	r3, #8
 8003084:	d112      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003086:	4b82      	ldr	r3, [pc, #520]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800308e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003092:	d10b      	bne.n	80030ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003094:	4b7e      	ldr	r3, [pc, #504]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800309c:	2b00      	cmp	r3, #0
 800309e:	d05b      	beq.n	8003158 <HAL_RCC_OscConfig+0x108>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d157      	bne.n	8003158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e242      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030b4:	d106      	bne.n	80030c4 <HAL_RCC_OscConfig+0x74>
 80030b6:	4b76      	ldr	r3, [pc, #472]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a75      	ldr	r2, [pc, #468]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c0:	6013      	str	r3, [r2, #0]
 80030c2:	e01d      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x98>
 80030ce:	4b70      	ldr	r3, [pc, #448]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a6f      	ldr	r2, [pc, #444]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030d8:	6013      	str	r3, [r2, #0]
 80030da:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a6c      	ldr	r2, [pc, #432]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e4:	6013      	str	r3, [r2, #0]
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0xb0>
 80030e8:	4b69      	ldr	r3, [pc, #420]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a68      	ldr	r2, [pc, #416]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030f2:	6013      	str	r3, [r2, #0]
 80030f4:	4b66      	ldr	r3, [pc, #408]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a65      	ldr	r2, [pc, #404]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80030fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d013      	beq.n	8003130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003108:	f7ff f800 	bl	800210c <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800310e:	e008      	b.n	8003122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003110:	f7fe fffc 	bl	800210c <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	2b64      	cmp	r3, #100	; 0x64
 800311c:	d901      	bls.n	8003122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800311e:	2303      	movs	r3, #3
 8003120:	e207      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	4b5b      	ldr	r3, [pc, #364]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312a:	2b00      	cmp	r3, #0
 800312c:	d0f0      	beq.n	8003110 <HAL_RCC_OscConfig+0xc0>
 800312e:	e014      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003130:	f7fe ffec 	bl	800210c <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003136:	e008      	b.n	800314a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003138:	f7fe ffe8 	bl	800210c <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b64      	cmp	r3, #100	; 0x64
 8003144:	d901      	bls.n	800314a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e1f3      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	4b51      	ldr	r3, [pc, #324]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003152:	2b00      	cmp	r3, #0
 8003154:	d1f0      	bne.n	8003138 <HAL_RCC_OscConfig+0xe8>
 8003156:	e000      	b.n	800315a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d063      	beq.n	800322e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003166:	4b4a      	ldr	r3, [pc, #296]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 030c 	and.w	r3, r3, #12
 800316e:	2b00      	cmp	r3, #0
 8003170:	d00b      	beq.n	800318a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003172:	4b47      	ldr	r3, [pc, #284]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800317a:	2b08      	cmp	r3, #8
 800317c:	d11c      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317e:	4b44      	ldr	r3, [pc, #272]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d116      	bne.n	80031b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	4b41      	ldr	r3, [pc, #260]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d005      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b01      	cmp	r3, #1
 800319c:	d001      	beq.n	80031a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800319e:	2301      	movs	r3, #1
 80031a0:	e1c7      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	4b3b      	ldr	r3, [pc, #236]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	691b      	ldr	r3, [r3, #16]
 80031ae:	00db      	lsls	r3, r3, #3
 80031b0:	4937      	ldr	r1, [pc, #220]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031b2:	4313      	orrs	r3, r2
 80031b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031b6:	e03a      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c0:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x244>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031c6:	f7fe ffa1 	bl	800210c <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031ce:	f7fe ff9d 	bl	800210c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e1a8      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e0:	4b2b      	ldr	r3, [pc, #172]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 0302 	and.w	r3, r3, #2
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031ec:	4b28      	ldr	r3, [pc, #160]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	00db      	lsls	r3, r3, #3
 80031fa:	4925      	ldr	r1, [pc, #148]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	600b      	str	r3, [r1, #0]
 8003200:	e015      	b.n	800322e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003202:	4b24      	ldr	r3, [pc, #144]	; (8003294 <HAL_RCC_OscConfig+0x244>)
 8003204:	2200      	movs	r2, #0
 8003206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003208:	f7fe ff80 	bl	800210c <HAL_GetTick>
 800320c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800320e:	e008      	b.n	8003222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003210:	f7fe ff7c 	bl	800210c <HAL_GetTick>
 8003214:	4602      	mov	r2, r0
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	1ad3      	subs	r3, r2, r3
 800321a:	2b02      	cmp	r3, #2
 800321c:	d901      	bls.n	8003222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800321e:	2303      	movs	r3, #3
 8003220:	e187      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003222:	4b1b      	ldr	r3, [pc, #108]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0302 	and.w	r3, r3, #2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d1f0      	bne.n	8003210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 0308 	and.w	r3, r3, #8
 8003236:	2b00      	cmp	r3, #0
 8003238:	d036      	beq.n	80032a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d016      	beq.n	8003270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003242:	4b15      	ldr	r3, [pc, #84]	; (8003298 <HAL_RCC_OscConfig+0x248>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003248:	f7fe ff60 	bl	800210c <HAL_GetTick>
 800324c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800324e:	e008      	b.n	8003262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003250:	f7fe ff5c 	bl	800210c <HAL_GetTick>
 8003254:	4602      	mov	r2, r0
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	1ad3      	subs	r3, r2, r3
 800325a:	2b02      	cmp	r3, #2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e167      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003262:	4b0b      	ldr	r3, [pc, #44]	; (8003290 <HAL_RCC_OscConfig+0x240>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0f0      	beq.n	8003250 <HAL_RCC_OscConfig+0x200>
 800326e:	e01b      	b.n	80032a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003270:	4b09      	ldr	r3, [pc, #36]	; (8003298 <HAL_RCC_OscConfig+0x248>)
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003276:	f7fe ff49 	bl	800210c <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800327c:	e00e      	b.n	800329c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800327e:	f7fe ff45 	bl	800210c <HAL_GetTick>
 8003282:	4602      	mov	r2, r0
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	1ad3      	subs	r3, r2, r3
 8003288:	2b02      	cmp	r3, #2
 800328a:	d907      	bls.n	800329c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800328c:	2303      	movs	r3, #3
 800328e:	e150      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	42470000 	.word	0x42470000
 8003298:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800329c:	4b88      	ldr	r3, [pc, #544]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d1ea      	bne.n	800327e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f003 0304 	and.w	r3, r3, #4
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 8097 	beq.w	80033e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032ba:	4b81      	ldr	r3, [pc, #516]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d10f      	bne.n	80032e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c6:	2300      	movs	r3, #0
 80032c8:	60bb      	str	r3, [r7, #8]
 80032ca:	4b7d      	ldr	r3, [pc, #500]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ce:	4a7c      	ldr	r2, [pc, #496]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d4:	6413      	str	r3, [r2, #64]	; 0x40
 80032d6:	4b7a      	ldr	r3, [pc, #488]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80032d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032de:	60bb      	str	r3, [r7, #8]
 80032e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032e2:	2301      	movs	r3, #1
 80032e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e6:	4b77      	ldr	r3, [pc, #476]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d118      	bne.n	8003324 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032f2:	4b74      	ldr	r3, [pc, #464]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a73      	ldr	r2, [pc, #460]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 80032f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fe:	f7fe ff05 	bl	800210c <HAL_GetTick>
 8003302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003304:	e008      	b.n	8003318 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003306:	f7fe ff01 	bl	800210c <HAL_GetTick>
 800330a:	4602      	mov	r2, r0
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	1ad3      	subs	r3, r2, r3
 8003310:	2b02      	cmp	r3, #2
 8003312:	d901      	bls.n	8003318 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003314:	2303      	movs	r3, #3
 8003316:	e10c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003318:	4b6a      	ldr	r3, [pc, #424]	; (80034c4 <HAL_RCC_OscConfig+0x474>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003320:	2b00      	cmp	r3, #0
 8003322:	d0f0      	beq.n	8003306 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d106      	bne.n	800333a <HAL_RCC_OscConfig+0x2ea>
 800332c:	4b64      	ldr	r3, [pc, #400]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800332e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003330:	4a63      	ldr	r2, [pc, #396]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003332:	f043 0301 	orr.w	r3, r3, #1
 8003336:	6713      	str	r3, [r2, #112]	; 0x70
 8003338:	e01c      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	2b05      	cmp	r3, #5
 8003340:	d10c      	bne.n	800335c <HAL_RCC_OscConfig+0x30c>
 8003342:	4b5f      	ldr	r3, [pc, #380]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003344:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003346:	4a5e      	ldr	r2, [pc, #376]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003348:	f043 0304 	orr.w	r3, r3, #4
 800334c:	6713      	str	r3, [r2, #112]	; 0x70
 800334e:	4b5c      	ldr	r3, [pc, #368]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003352:	4a5b      	ldr	r2, [pc, #364]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003354:	f043 0301 	orr.w	r3, r3, #1
 8003358:	6713      	str	r3, [r2, #112]	; 0x70
 800335a:	e00b      	b.n	8003374 <HAL_RCC_OscConfig+0x324>
 800335c:	4b58      	ldr	r3, [pc, #352]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a57      	ldr	r2, [pc, #348]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003362:	f023 0301 	bic.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	4b55      	ldr	r3, [pc, #340]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336c:	4a54      	ldr	r2, [pc, #336]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800336e:	f023 0304 	bic.w	r3, r3, #4
 8003372:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d015      	beq.n	80033a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800337c:	f7fe fec6 	bl	800210c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003382:	e00a      	b.n	800339a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003384:	f7fe fec2 	bl	800210c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003392:	4293      	cmp	r3, r2
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e0cb      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800339a:	4b49      	ldr	r3, [pc, #292]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0ee      	beq.n	8003384 <HAL_RCC_OscConfig+0x334>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a8:	f7fe feb0 	bl	800210c <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ae:	e00a      	b.n	80033c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033b0:	f7fe feac 	bl	800210c <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80033be:	4293      	cmp	r3, r2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e0b5      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c6:	4b3e      	ldr	r3, [pc, #248]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d1ee      	bne.n	80033b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033d2:	7dfb      	ldrb	r3, [r7, #23]
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d105      	bne.n	80033e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d8:	4b39      	ldr	r3, [pc, #228]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033dc:	4a38      	ldr	r2, [pc, #224]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	699b      	ldr	r3, [r3, #24]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 80a1 	beq.w	8003530 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033ee:	4b34      	ldr	r3, [pc, #208]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d05c      	beq.n	80034b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	699b      	ldr	r3, [r3, #24]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d141      	bne.n	8003486 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003402:	4b31      	ldr	r3, [pc, #196]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003408:	f7fe fe80 	bl	800210c <HAL_GetTick>
 800340c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800340e:	e008      	b.n	8003422 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003410:	f7fe fe7c 	bl	800210c <HAL_GetTick>
 8003414:	4602      	mov	r2, r0
 8003416:	693b      	ldr	r3, [r7, #16]
 8003418:	1ad3      	subs	r3, r2, r3
 800341a:	2b02      	cmp	r3, #2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e087      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003422:	4b27      	ldr	r3, [pc, #156]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1f0      	bne.n	8003410 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69da      	ldr	r2, [r3, #28]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	431a      	orrs	r2, r3
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003444:	085b      	lsrs	r3, r3, #1
 8003446:	3b01      	subs	r3, #1
 8003448:	041b      	lsls	r3, r3, #16
 800344a:	431a      	orrs	r2, r3
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003450:	061b      	lsls	r3, r3, #24
 8003452:	491b      	ldr	r1, [pc, #108]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 8003454:	4313      	orrs	r3, r2
 8003456:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 800345a:	2201      	movs	r2, #1
 800345c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800345e:	f7fe fe55 	bl	800210c <HAL_GetTick>
 8003462:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003464:	e008      	b.n	8003478 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003466:	f7fe fe51 	bl	800210c <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b02      	cmp	r3, #2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e05c      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003478:	4b11      	ldr	r3, [pc, #68]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0f0      	beq.n	8003466 <HAL_RCC_OscConfig+0x416>
 8003484:	e054      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003486:	4b10      	ldr	r3, [pc, #64]	; (80034c8 <HAL_RCC_OscConfig+0x478>)
 8003488:	2200      	movs	r2, #0
 800348a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800348c:	f7fe fe3e 	bl	800210c <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003494:	f7fe fe3a 	bl	800210c <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e045      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a6:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_RCC_OscConfig+0x470>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d1f0      	bne.n	8003494 <HAL_RCC_OscConfig+0x444>
 80034b2:	e03d      	b.n	8003530 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	699b      	ldr	r3, [r3, #24]
 80034b8:	2b01      	cmp	r3, #1
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	e038      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
 80034c0:	40023800 	.word	0x40023800
 80034c4:	40007000 	.word	0x40007000
 80034c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034cc:	4b1b      	ldr	r3, [pc, #108]	; (800353c <HAL_RCC_OscConfig+0x4ec>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	699b      	ldr	r3, [r3, #24]
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d028      	beq.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d121      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d11a      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034f6:	68fa      	ldr	r2, [r7, #12]
 80034f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034fc:	4013      	ands	r3, r2
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003502:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003504:	4293      	cmp	r3, r2
 8003506:	d111      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003512:	085b      	lsrs	r3, r3, #1
 8003514:	3b01      	subs	r3, #1
 8003516:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d107      	bne.n	800352c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003528:	429a      	cmp	r2, r3
 800352a:	d001      	beq.n	8003530 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e000      	b.n	8003532 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003530:	2300      	movs	r3, #0
}
 8003532:	4618      	mov	r0, r3
 8003534:	3718      	adds	r7, #24
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	40023800 	.word	0x40023800

08003540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b084      	sub	sp, #16
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d101      	bne.n	8003554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e0cc      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003554:	4b68      	ldr	r3, [pc, #416]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	429a      	cmp	r2, r3
 8003560:	d90c      	bls.n	800357c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003562:	4b65      	ldr	r3, [pc, #404]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800356a:	4b63      	ldr	r3, [pc, #396]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 030f 	and.w	r3, r3, #15
 8003572:	683a      	ldr	r2, [r7, #0]
 8003574:	429a      	cmp	r2, r3
 8003576:	d001      	beq.n	800357c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e0b8      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d020      	beq.n	80035ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d005      	beq.n	80035a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003594:	4b59      	ldr	r3, [pc, #356]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	4a58      	ldr	r2, [pc, #352]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800359e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f003 0308 	and.w	r3, r3, #8
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d005      	beq.n	80035b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035ac:	4b53      	ldr	r3, [pc, #332]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b8:	4b50      	ldr	r3, [pc, #320]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	494d      	ldr	r1, [pc, #308]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035c6:	4313      	orrs	r3, r2
 80035c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0301 	and.w	r3, r3, #1
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d044      	beq.n	8003660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d107      	bne.n	80035ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d119      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e07f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d107      	bne.n	800360e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035fe:	4b3f      	ldr	r3, [pc, #252]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e06f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800360e:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0302 	and.w	r3, r3, #2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d101      	bne.n	800361e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e067      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800361e:	4b37      	ldr	r3, [pc, #220]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f023 0203 	bic.w	r2, r3, #3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	4934      	ldr	r1, [pc, #208]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 800362c:	4313      	orrs	r3, r2
 800362e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003630:	f7fe fd6c 	bl	800210c <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003636:	e00a      	b.n	800364e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003638:	f7fe fd68 	bl	800210c <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	f241 3288 	movw	r2, #5000	; 0x1388
 8003646:	4293      	cmp	r3, r2
 8003648:	d901      	bls.n	800364e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800364a:	2303      	movs	r3, #3
 800364c:	e04f      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800364e:	4b2b      	ldr	r3, [pc, #172]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 020c 	and.w	r2, r3, #12
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	429a      	cmp	r2, r3
 800365e:	d1eb      	bne.n	8003638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003660:	4b25      	ldr	r3, [pc, #148]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 030f 	and.w	r3, r3, #15
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d20c      	bcs.n	8003688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800366e:	4b22      	ldr	r3, [pc, #136]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	683a      	ldr	r2, [r7, #0]
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003676:	4b20      	ldr	r3, [pc, #128]	; (80036f8 <HAL_RCC_ClockConfig+0x1b8>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f003 030f 	and.w	r3, r3, #15
 800367e:	683a      	ldr	r2, [r7, #0]
 8003680:	429a      	cmp	r2, r3
 8003682:	d001      	beq.n	8003688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e032      	b.n	80036ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003694:	4b19      	ldr	r3, [pc, #100]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	4916      	ldr	r1, [pc, #88]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036a2:	4313      	orrs	r3, r2
 80036a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d009      	beq.n	80036c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036b2:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	00db      	lsls	r3, r3, #3
 80036c0:	490e      	ldr	r1, [pc, #56]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036c2:	4313      	orrs	r3, r2
 80036c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036c6:	f000 f821 	bl	800370c <HAL_RCC_GetSysClockFreq>
 80036ca:	4602      	mov	r2, r0
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	091b      	lsrs	r3, r3, #4
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	490a      	ldr	r1, [pc, #40]	; (8003700 <HAL_RCC_ClockConfig+0x1c0>)
 80036d8:	5ccb      	ldrb	r3, [r1, r3]
 80036da:	fa22 f303 	lsr.w	r3, r2, r3
 80036de:	4a09      	ldr	r2, [pc, #36]	; (8003704 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036e2:	4b09      	ldr	r3, [pc, #36]	; (8003708 <HAL_RCC_ClockConfig+0x1c8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f7fe fccc 	bl	8002084 <HAL_InitTick>

  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023c00 	.word	0x40023c00
 80036fc:	40023800 	.word	0x40023800
 8003700:	08007688 	.word	0x08007688
 8003704:	20000004 	.word	0x20000004
 8003708:	20000008 	.word	0x20000008

0800370c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800370c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003710:	b090      	sub	sp, #64	; 0x40
 8003712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003714:	2300      	movs	r3, #0
 8003716:	637b      	str	r3, [r7, #52]	; 0x34
 8003718:	2300      	movs	r3, #0
 800371a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800371c:	2300      	movs	r3, #0
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003720:	2300      	movs	r3, #0
 8003722:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003724:	4b59      	ldr	r3, [pc, #356]	; (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f003 030c 	and.w	r3, r3, #12
 800372c:	2b08      	cmp	r3, #8
 800372e:	d00d      	beq.n	800374c <HAL_RCC_GetSysClockFreq+0x40>
 8003730:	2b08      	cmp	r3, #8
 8003732:	f200 80a1 	bhi.w	8003878 <HAL_RCC_GetSysClockFreq+0x16c>
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_RCC_GetSysClockFreq+0x34>
 800373a:	2b04      	cmp	r3, #4
 800373c:	d003      	beq.n	8003746 <HAL_RCC_GetSysClockFreq+0x3a>
 800373e:	e09b      	b.n	8003878 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003740:	4b53      	ldr	r3, [pc, #332]	; (8003890 <HAL_RCC_GetSysClockFreq+0x184>)
 8003742:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003744:	e09b      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003746:	4b53      	ldr	r3, [pc, #332]	; (8003894 <HAL_RCC_GetSysClockFreq+0x188>)
 8003748:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800374a:	e098      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800374c:	4b4f      	ldr	r3, [pc, #316]	; (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003754:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003756:	4b4d      	ldr	r3, [pc, #308]	; (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d028      	beq.n	80037b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003762:	4b4a      	ldr	r3, [pc, #296]	; (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	099b      	lsrs	r3, r3, #6
 8003768:	2200      	movs	r2, #0
 800376a:	623b      	str	r3, [r7, #32]
 800376c:	627a      	str	r2, [r7, #36]	; 0x24
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003774:	2100      	movs	r1, #0
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCC_GetSysClockFreq+0x188>)
 8003778:	fb03 f201 	mul.w	r2, r3, r1
 800377c:	2300      	movs	r3, #0
 800377e:	fb00 f303 	mul.w	r3, r0, r3
 8003782:	4413      	add	r3, r2
 8003784:	4a43      	ldr	r2, [pc, #268]	; (8003894 <HAL_RCC_GetSysClockFreq+0x188>)
 8003786:	fba0 1202 	umull	r1, r2, r0, r2
 800378a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800378c:	460a      	mov	r2, r1
 800378e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003792:	4413      	add	r3, r2
 8003794:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003798:	2200      	movs	r2, #0
 800379a:	61bb      	str	r3, [r7, #24]
 800379c:	61fa      	str	r2, [r7, #28]
 800379e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80037a6:	f7fd fa0f 	bl	8000bc8 <__aeabi_uldivmod>
 80037aa:	4602      	mov	r2, r0
 80037ac:	460b      	mov	r3, r1
 80037ae:	4613      	mov	r3, r2
 80037b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037b2:	e053      	b.n	800385c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037b4:	4b35      	ldr	r3, [pc, #212]	; (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	099b      	lsrs	r3, r3, #6
 80037ba:	2200      	movs	r2, #0
 80037bc:	613b      	str	r3, [r7, #16]
 80037be:	617a      	str	r2, [r7, #20]
 80037c0:	693b      	ldr	r3, [r7, #16]
 80037c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80037c6:	f04f 0b00 	mov.w	fp, #0
 80037ca:	4652      	mov	r2, sl
 80037cc:	465b      	mov	r3, fp
 80037ce:	f04f 0000 	mov.w	r0, #0
 80037d2:	f04f 0100 	mov.w	r1, #0
 80037d6:	0159      	lsls	r1, r3, #5
 80037d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037dc:	0150      	lsls	r0, r2, #5
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	ebb2 080a 	subs.w	r8, r2, sl
 80037e6:	eb63 090b 	sbc.w	r9, r3, fp
 80037ea:	f04f 0200 	mov.w	r2, #0
 80037ee:	f04f 0300 	mov.w	r3, #0
 80037f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80037f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80037fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80037fe:	ebb2 0408 	subs.w	r4, r2, r8
 8003802:	eb63 0509 	sbc.w	r5, r3, r9
 8003806:	f04f 0200 	mov.w	r2, #0
 800380a:	f04f 0300 	mov.w	r3, #0
 800380e:	00eb      	lsls	r3, r5, #3
 8003810:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003814:	00e2      	lsls	r2, r4, #3
 8003816:	4614      	mov	r4, r2
 8003818:	461d      	mov	r5, r3
 800381a:	eb14 030a 	adds.w	r3, r4, sl
 800381e:	603b      	str	r3, [r7, #0]
 8003820:	eb45 030b 	adc.w	r3, r5, fp
 8003824:	607b      	str	r3, [r7, #4]
 8003826:	f04f 0200 	mov.w	r2, #0
 800382a:	f04f 0300 	mov.w	r3, #0
 800382e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003832:	4629      	mov	r1, r5
 8003834:	028b      	lsls	r3, r1, #10
 8003836:	4621      	mov	r1, r4
 8003838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800383c:	4621      	mov	r1, r4
 800383e:	028a      	lsls	r2, r1, #10
 8003840:	4610      	mov	r0, r2
 8003842:	4619      	mov	r1, r3
 8003844:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003846:	2200      	movs	r2, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	60fa      	str	r2, [r7, #12]
 800384c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003850:	f7fd f9ba 	bl	8000bc8 <__aeabi_uldivmod>
 8003854:	4602      	mov	r2, r0
 8003856:	460b      	mov	r3, r1
 8003858:	4613      	mov	r3, r2
 800385a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800385c:	4b0b      	ldr	r3, [pc, #44]	; (800388c <HAL_RCC_GetSysClockFreq+0x180>)
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	0c1b      	lsrs	r3, r3, #16
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	3301      	adds	r3, #1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800386c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800386e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003870:	fbb2 f3f3 	udiv	r3, r2, r3
 8003874:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003876:	e002      	b.n	800387e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003878:	4b05      	ldr	r3, [pc, #20]	; (8003890 <HAL_RCC_GetSysClockFreq+0x184>)
 800387a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800387c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003880:	4618      	mov	r0, r3
 8003882:	3740      	adds	r7, #64	; 0x40
 8003884:	46bd      	mov	sp, r7
 8003886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800388a:	bf00      	nop
 800388c:	40023800 	.word	0x40023800
 8003890:	00f42400 	.word	0x00f42400
 8003894:	017d7840 	.word	0x017d7840

08003898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003898:	b480      	push	{r7}
 800389a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800389c:	4b03      	ldr	r3, [pc, #12]	; (80038ac <HAL_RCC_GetHCLKFreq+0x14>)
 800389e:	681b      	ldr	r3, [r3, #0]
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	20000004 	.word	0x20000004

080038b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038b4:	f7ff fff0 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038b8:	4602      	mov	r2, r0
 80038ba:	4b05      	ldr	r3, [pc, #20]	; (80038d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	0a9b      	lsrs	r3, r3, #10
 80038c0:	f003 0307 	and.w	r3, r3, #7
 80038c4:	4903      	ldr	r1, [pc, #12]	; (80038d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038c6:	5ccb      	ldrb	r3, [r1, r3]
 80038c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	bd80      	pop	{r7, pc}
 80038d0:	40023800 	.word	0x40023800
 80038d4:	08007698 	.word	0x08007698

080038d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038dc:	f7ff ffdc 	bl	8003898 <HAL_RCC_GetHCLKFreq>
 80038e0:	4602      	mov	r2, r0
 80038e2:	4b05      	ldr	r3, [pc, #20]	; (80038f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	0b5b      	lsrs	r3, r3, #13
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	4903      	ldr	r1, [pc, #12]	; (80038fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80038ee:	5ccb      	ldrb	r3, [r1, r3]
 80038f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	bd80      	pop	{r7, pc}
 80038f8:	40023800 	.word	0x40023800
 80038fc:	08007698 	.word	0x08007698

08003900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e07b      	b.n	8003a0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003916:	2b00      	cmp	r3, #0
 8003918:	d108      	bne.n	800392c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003922:	d009      	beq.n	8003938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	2200      	movs	r2, #0
 8003928:	61da      	str	r2, [r3, #28]
 800392a:	e005      	b.n	8003938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2200      	movs	r2, #0
 8003930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003944:	b2db      	uxtb	r3, r3
 8003946:	2b00      	cmp	r3, #0
 8003948:	d106      	bne.n	8003958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7fe f9b8 	bl	8001cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2202      	movs	r2, #2
 800395c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800396e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003980:	431a      	orrs	r2, r3
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	691b      	ldr	r3, [r3, #16]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	431a      	orrs	r2, r3
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695b      	ldr	r3, [r3, #20]
 800399a:	f003 0301 	and.w	r3, r3, #1
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80039a8:	431a      	orrs	r2, r3
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80039b2:	431a      	orrs	r2, r3
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039bc:	ea42 0103 	orr.w	r1, r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	430a      	orrs	r2, r1
 80039ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	699b      	ldr	r3, [r3, #24]
 80039d4:	0c1b      	lsrs	r3, r3, #16
 80039d6:	f003 0104 	and.w	r1, r3, #4
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039de:	f003 0210 	and.w	r2, r3, #16
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	69da      	ldr	r2, [r3, #28]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3708      	adds	r7, #8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b08c      	sub	sp, #48	; 0x30
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	607a      	str	r2, [r7, #4]
 8003a1e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003a20:	2301      	movs	r3, #1
 8003a22:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003a24:	2300      	movs	r3, #0
 8003a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_SPI_TransmitReceive+0x26>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e18a      	b.n	8003d4e <HAL_SPI_TransmitReceive+0x33c>
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003a40:	f7fe fb64 	bl	800210c <HAL_GetTick>
 8003a44:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003a56:	887b      	ldrh	r3, [r7, #2]
 8003a58:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003a5a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a5e:	2b01      	cmp	r3, #1
 8003a60:	d00f      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x70>
 8003a62:	69fb      	ldr	r3, [r7, #28]
 8003a64:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a68:	d107      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d103      	bne.n	8003a7a <HAL_SPI_TransmitReceive+0x68>
 8003a72:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a76:	2b04      	cmp	r3, #4
 8003a78:	d003      	beq.n	8003a82 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a80:	e15b      	b.n	8003d3a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x82>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x82>
 8003a8e:	887b      	ldrh	r3, [r7, #2]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8003a9a:	e14e      	b.n	8003d3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d003      	beq.n	8003ab0 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2205      	movs	r2, #5
 8003aac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	687a      	ldr	r2, [r7, #4]
 8003aba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	887a      	ldrh	r2, [r7, #2]
 8003ac0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	887a      	ldrh	r2, [r7, #2]
 8003ac6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	887a      	ldrh	r2, [r7, #2]
 8003ad8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af0:	2b40      	cmp	r3, #64	; 0x40
 8003af2:	d007      	beq.n	8003b04 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b0c:	d178      	bne.n	8003c00 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d002      	beq.n	8003b1c <HAL_SPI_TransmitReceive+0x10a>
 8003b16:	8b7b      	ldrh	r3, [r7, #26]
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d166      	bne.n	8003bea <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2c:	1c9a      	adds	r2, r3, #2
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b36:	b29b      	uxth	r3, r3
 8003b38:	3b01      	subs	r3, #1
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b40:	e053      	b.n	8003bea <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d11b      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x176>
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b54:	b29b      	uxth	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d016      	beq.n	8003b88 <HAL_SPI_TransmitReceive+0x176>
 8003b5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d113      	bne.n	8003b88 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b64:	881a      	ldrh	r2, [r3, #0]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b70:	1c9a      	adds	r2, r3, #2
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b29a      	uxth	r2, r3
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	f003 0301 	and.w	r3, r3, #1
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d119      	bne.n	8003bca <HAL_SPI_TransmitReceive+0x1b8>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b9a:	b29b      	uxth	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d014      	beq.n	8003bca <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003baa:	b292      	uxth	r2, r2
 8003bac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb2:	1c9a      	adds	r2, r3, #2
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bbc:	b29b      	uxth	r3, r3
 8003bbe:	3b01      	subs	r3, #1
 8003bc0:	b29a      	uxth	r2, r3
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003bca:	f7fe fa9f 	bl	800210c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d807      	bhi.n	8003bea <HAL_SPI_TransmitReceive+0x1d8>
 8003bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003be0:	d003      	beq.n	8003bea <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003be8:	e0a7      	b.n	8003d3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003bee:	b29b      	uxth	r3, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d1a6      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x130>
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003bf8:	b29b      	uxth	r3, r3
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1a1      	bne.n	8003b42 <HAL_SPI_TransmitReceive+0x130>
 8003bfe:	e07c      	b.n	8003cfa <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d002      	beq.n	8003c0e <HAL_SPI_TransmitReceive+0x1fc>
 8003c08:	8b7b      	ldrh	r3, [r7, #26]
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d16b      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	330c      	adds	r3, #12
 8003c18:	7812      	ldrb	r2, [r2, #0]
 8003c1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c20:	1c5a      	adds	r2, r3, #1
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c34:	e057      	b.n	8003ce6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f003 0302 	and.w	r3, r3, #2
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d11c      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x26c>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d017      	beq.n	8003c7e <HAL_SPI_TransmitReceive+0x26c>
 8003c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d114      	bne.n	8003c7e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	330c      	adds	r3, #12
 8003c5e:	7812      	ldrb	r2, [r2, #0]
 8003c60:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	1c5a      	adds	r2, r3, #1
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	689b      	ldr	r3, [r3, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b01      	cmp	r3, #1
 8003c8a:	d119      	bne.n	8003cc0 <HAL_SPI_TransmitReceive+0x2ae>
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d014      	beq.n	8003cc0 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca0:	b2d2      	uxtb	r2, r2
 8003ca2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	1c5a      	adds	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cb2:	b29b      	uxth	r3, r3
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003cc0:	f7fe fa24 	bl	800210c <HAL_GetTick>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cc8:	1ad3      	subs	r3, r2, r3
 8003cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d803      	bhi.n	8003cd8 <HAL_SPI_TransmitReceive+0x2c6>
 8003cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd6:	d102      	bne.n	8003cde <HAL_SPI_TransmitReceive+0x2cc>
 8003cd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d103      	bne.n	8003ce6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8003cde:	2303      	movs	r3, #3
 8003ce0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8003ce4:	e029      	b.n	8003d3a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1a2      	bne.n	8003c36 <HAL_SPI_TransmitReceive+0x224>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d19d      	bne.n	8003c36 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003cfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cfc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003cfe:	68f8      	ldr	r0, [r7, #12]
 8003d00:	f000 f8b2 	bl	8003e68 <SPI_EndRxTxTransaction>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d006      	beq.n	8003d18 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2220      	movs	r2, #32
 8003d14:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8003d16:	e010      	b.n	8003d3a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10b      	bne.n	8003d38 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d20:	2300      	movs	r3, #0
 8003d22:	617b      	str	r3, [r7, #20]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	617b      	str	r3, [r7, #20]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	697b      	ldr	r3, [r7, #20]
 8003d36:	e000      	b.n	8003d3a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8003d38:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d4a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3730      	adds	r7, #48	; 0x30
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
	...

08003d58 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b088      	sub	sp, #32
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	60f8      	str	r0, [r7, #12]
 8003d60:	60b9      	str	r1, [r7, #8]
 8003d62:	603b      	str	r3, [r7, #0]
 8003d64:	4613      	mov	r3, r2
 8003d66:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003d68:	f7fe f9d0 	bl	800210c <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	4413      	add	r3, r2
 8003d76:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003d78:	f7fe f9c8 	bl	800210c <HAL_GetTick>
 8003d7c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003d7e:	4b39      	ldr	r3, [pc, #228]	; (8003e64 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	015b      	lsls	r3, r3, #5
 8003d84:	0d1b      	lsrs	r3, r3, #20
 8003d86:	69fa      	ldr	r2, [r7, #28]
 8003d88:	fb02 f303 	mul.w	r3, r2, r3
 8003d8c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d8e:	e054      	b.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d96:	d050      	beq.n	8003e3a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d98:	f7fe f9b8 	bl	800210c <HAL_GetTick>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	69fa      	ldr	r2, [r7, #28]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d902      	bls.n	8003dae <SPI_WaitFlagStateUntilTimeout+0x56>
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d13d      	bne.n	8003e2a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003dbc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc6:	d111      	bne.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x94>
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003dd0:	d004      	beq.n	8003ddc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dda:	d107      	bne.n	8003dec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003df4:	d10f      	bne.n	8003e16 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e04:	601a      	str	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e14:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2201      	movs	r2, #1
 8003e1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e017      	b.n	8003e5a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d101      	bne.n	8003e34 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003e30:	2300      	movs	r3, #0
 8003e32:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	689a      	ldr	r2, [r3, #8]
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	4013      	ands	r3, r2
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	429a      	cmp	r2, r3
 8003e48:	bf0c      	ite	eq
 8003e4a:	2301      	moveq	r3, #1
 8003e4c:	2300      	movne	r3, #0
 8003e4e:	b2db      	uxtb	r3, r3
 8003e50:	461a      	mov	r2, r3
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d19b      	bne.n	8003d90 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003e58:	2300      	movs	r3, #0
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	3720      	adds	r7, #32
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	20000004 	.word	0x20000004

08003e68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b088      	sub	sp, #32
 8003e6c:	af02      	add	r7, sp, #8
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003e74:	4b1b      	ldr	r3, [pc, #108]	; (8003ee4 <SPI_EndRxTxTransaction+0x7c>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1b      	ldr	r2, [pc, #108]	; (8003ee8 <SPI_EndRxTxTransaction+0x80>)
 8003e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003e7e:	0d5b      	lsrs	r3, r3, #21
 8003e80:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003e84:	fb02 f303 	mul.w	r3, r2, r3
 8003e88:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e92:	d112      	bne.n	8003eba <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2180      	movs	r1, #128	; 0x80
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff ff5a 	bl	8003d58 <SPI_WaitFlagStateUntilTimeout>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d016      	beq.n	8003ed8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eae:	f043 0220 	orr.w	r2, r3, #32
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e00f      	b.n	8003eda <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	3b01      	subs	r3, #1
 8003ec4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	689b      	ldr	r3, [r3, #8]
 8003ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed0:	2b80      	cmp	r3, #128	; 0x80
 8003ed2:	d0f2      	beq.n	8003eba <SPI_EndRxTxTransaction+0x52>
 8003ed4:	e000      	b.n	8003ed8 <SPI_EndRxTxTransaction+0x70>
        break;
 8003ed6:	bf00      	nop
  }

  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
 8003ee2:	bf00      	nop
 8003ee4:	20000004 	.word	0x20000004
 8003ee8:	165e9f81 	.word	0x165e9f81

08003eec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b082      	sub	sp, #8
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003efa:	2301      	movs	r3, #1
 8003efc:	e03f      	b.n	8003f7e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d106      	bne.n	8003f18 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f12:	6878      	ldr	r0, [r7, #4]
 8003f14:	f7fd ff20 	bl	8001d58 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2224      	movs	r2, #36	; 0x24
 8003f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68da      	ldr	r2, [r3, #12]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f2e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f000 f929 	bl	8004188 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f44:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	695a      	ldr	r2, [r3, #20]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f54:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	68da      	ldr	r2, [r3, #12]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f64:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b08a      	sub	sp, #40	; 0x28
 8003f8a:	af02      	add	r7, sp, #8
 8003f8c:	60f8      	str	r0, [r7, #12]
 8003f8e:	60b9      	str	r1, [r7, #8]
 8003f90:	603b      	str	r3, [r7, #0]
 8003f92:	4613      	mov	r3, r2
 8003f94:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	2b20      	cmp	r3, #32
 8003fa4:	d17c      	bne.n	80040a0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d002      	beq.n	8003fb2 <HAL_UART_Transmit+0x2c>
 8003fac:	88fb      	ldrh	r3, [r7, #6]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e075      	b.n	80040a2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d101      	bne.n	8003fc4 <HAL_UART_Transmit+0x3e>
 8003fc0:	2302      	movs	r3, #2
 8003fc2:	e06e      	b.n	80040a2 <HAL_UART_Transmit+0x11c>
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2221      	movs	r2, #33	; 0x21
 8003fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fda:	f7fe f897 	bl	800210c <HAL_GetTick>
 8003fde:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	88fa      	ldrh	r2, [r7, #6]
 8003fe4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	88fa      	ldrh	r2, [r7, #6]
 8003fea:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ff4:	d108      	bne.n	8004008 <HAL_UART_Transmit+0x82>
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	691b      	ldr	r3, [r3, #16]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d104      	bne.n	8004008 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ffe:	2300      	movs	r3, #0
 8004000:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	61bb      	str	r3, [r7, #24]
 8004006:	e003      	b.n	8004010 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800400c:	2300      	movs	r3, #0
 800400e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004018:	e02a      	b.n	8004070 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	2200      	movs	r2, #0
 8004022:	2180      	movs	r1, #128	; 0x80
 8004024:	68f8      	ldr	r0, [r7, #12]
 8004026:	f000 f840 	bl	80040aa <UART_WaitOnFlagUntilTimeout>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004030:	2303      	movs	r3, #3
 8004032:	e036      	b.n	80040a2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004034:	69fb      	ldr	r3, [r7, #28]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d10b      	bne.n	8004052 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	881b      	ldrh	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004048:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	3302      	adds	r3, #2
 800404e:	61bb      	str	r3, [r7, #24]
 8004050:	e007      	b.n	8004062 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	781a      	ldrb	r2, [r3, #0]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800405c:	69fb      	ldr	r3, [r7, #28]
 800405e:	3301      	adds	r3, #1
 8004060:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004066:	b29b      	uxth	r3, r3
 8004068:	3b01      	subs	r3, #1
 800406a:	b29a      	uxth	r2, r3
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1cf      	bne.n	800401a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	9300      	str	r3, [sp, #0]
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	2200      	movs	r2, #0
 8004082:	2140      	movs	r1, #64	; 0x40
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f810 	bl	80040aa <UART_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d001      	beq.n	8004094 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004090:	2303      	movs	r3, #3
 8004092:	e006      	b.n	80040a2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2220      	movs	r2, #32
 8004098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800409c:	2300      	movs	r3, #0
 800409e:	e000      	b.n	80040a2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80040a0:	2302      	movs	r3, #2
  }
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	3720      	adds	r7, #32
 80040a6:	46bd      	mov	sp, r7
 80040a8:	bd80      	pop	{r7, pc}

080040aa <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80040aa:	b580      	push	{r7, lr}
 80040ac:	b090      	sub	sp, #64	; 0x40
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	603b      	str	r3, [r7, #0]
 80040b6:	4613      	mov	r3, r2
 80040b8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040ba:	e050      	b.n	800415e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040c2:	d04c      	beq.n	800415e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <UART_WaitOnFlagUntilTimeout+0x30>
 80040ca:	f7fe f81f 	bl	800210c <HAL_GetTick>
 80040ce:	4602      	mov	r2, r0
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d241      	bcs.n	800415e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	330c      	adds	r3, #12
 80040e0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	330c      	adds	r3, #12
 80040f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80040fa:	637a      	str	r2, [r7, #52]	; 0x34
 80040fc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004100:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3314      	adds	r3, #20
 8004114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	e853 3f00 	ldrex	r3, [r3]
 800411c:	613b      	str	r3, [r7, #16]
   return(result);
 800411e:	693b      	ldr	r3, [r7, #16]
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	63bb      	str	r3, [r7, #56]	; 0x38
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	3314      	adds	r3, #20
 800412c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800412e:	623a      	str	r2, [r7, #32]
 8004130:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004132:	69f9      	ldr	r1, [r7, #28]
 8004134:	6a3a      	ldr	r2, [r7, #32]
 8004136:	e841 2300 	strex	r3, r2, [r1]
 800413a:	61bb      	str	r3, [r7, #24]
   return(result);
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1e5      	bne.n	800410e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2220      	movs	r2, #32
 800414e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e00f      	b.n	800417e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4013      	ands	r3, r2
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	429a      	cmp	r2, r3
 800416c:	bf0c      	ite	eq
 800416e:	2301      	moveq	r3, #1
 8004170:	2300      	movne	r3, #0
 8004172:	b2db      	uxtb	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	79fb      	ldrb	r3, [r7, #7]
 8004178:	429a      	cmp	r2, r3
 800417a:	d09f      	beq.n	80040bc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800417c:	2300      	movs	r3, #0
}
 800417e:	4618      	mov	r0, r3
 8004180:	3740      	adds	r7, #64	; 0x40
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
	...

08004188 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800418c:	b0c0      	sub	sp, #256	; 0x100
 800418e:	af00      	add	r7, sp, #0
 8004190:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80041a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a4:	68d9      	ldr	r1, [r3, #12]
 80041a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	ea40 0301 	orr.w	r3, r0, r1
 80041b0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041bc:	691b      	ldr	r3, [r3, #16]
 80041be:	431a      	orrs	r2, r3
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	695b      	ldr	r3, [r3, #20]
 80041c6:	431a      	orrs	r2, r3
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68db      	ldr	r3, [r3, #12]
 80041dc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041e0:	f021 010c 	bic.w	r1, r1, #12
 80041e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041ee:	430b      	orrs	r3, r1
 80041f0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	6999      	ldr	r1, [r3, #24]
 8004204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004208:	681a      	ldr	r2, [r3, #0]
 800420a:	ea40 0301 	orr.w	r3, r0, r1
 800420e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b8f      	ldr	r3, [pc, #572]	; (8004454 <UART_SetConfig+0x2cc>)
 8004218:	429a      	cmp	r2, r3
 800421a:	d005      	beq.n	8004228 <UART_SetConfig+0xa0>
 800421c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004220:	681a      	ldr	r2, [r3, #0]
 8004222:	4b8d      	ldr	r3, [pc, #564]	; (8004458 <UART_SetConfig+0x2d0>)
 8004224:	429a      	cmp	r2, r3
 8004226:	d104      	bne.n	8004232 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004228:	f7ff fb56 	bl	80038d8 <HAL_RCC_GetPCLK2Freq>
 800422c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004230:	e003      	b.n	800423a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004232:	f7ff fb3d 	bl	80038b0 <HAL_RCC_GetPCLK1Freq>
 8004236:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004244:	f040 810c 	bne.w	8004460 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004248:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800424c:	2200      	movs	r2, #0
 800424e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004252:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004256:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800425a:	4622      	mov	r2, r4
 800425c:	462b      	mov	r3, r5
 800425e:	1891      	adds	r1, r2, r2
 8004260:	65b9      	str	r1, [r7, #88]	; 0x58
 8004262:	415b      	adcs	r3, r3
 8004264:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004266:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800426a:	4621      	mov	r1, r4
 800426c:	eb12 0801 	adds.w	r8, r2, r1
 8004270:	4629      	mov	r1, r5
 8004272:	eb43 0901 	adc.w	r9, r3, r1
 8004276:	f04f 0200 	mov.w	r2, #0
 800427a:	f04f 0300 	mov.w	r3, #0
 800427e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004282:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004286:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800428a:	4690      	mov	r8, r2
 800428c:	4699      	mov	r9, r3
 800428e:	4623      	mov	r3, r4
 8004290:	eb18 0303 	adds.w	r3, r8, r3
 8004294:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004298:	462b      	mov	r3, r5
 800429a:	eb49 0303 	adc.w	r3, r9, r3
 800429e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80042a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042a6:	685b      	ldr	r3, [r3, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80042ae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80042b2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80042b6:	460b      	mov	r3, r1
 80042b8:	18db      	adds	r3, r3, r3
 80042ba:	653b      	str	r3, [r7, #80]	; 0x50
 80042bc:	4613      	mov	r3, r2
 80042be:	eb42 0303 	adc.w	r3, r2, r3
 80042c2:	657b      	str	r3, [r7, #84]	; 0x54
 80042c4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80042c8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80042cc:	f7fc fc7c 	bl	8000bc8 <__aeabi_uldivmod>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4b61      	ldr	r3, [pc, #388]	; (800445c <UART_SetConfig+0x2d4>)
 80042d6:	fba3 2302 	umull	r2, r3, r3, r2
 80042da:	095b      	lsrs	r3, r3, #5
 80042dc:	011c      	lsls	r4, r3, #4
 80042de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042e2:	2200      	movs	r2, #0
 80042e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042e8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042ec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042f0:	4642      	mov	r2, r8
 80042f2:	464b      	mov	r3, r9
 80042f4:	1891      	adds	r1, r2, r2
 80042f6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042f8:	415b      	adcs	r3, r3
 80042fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042fc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004300:	4641      	mov	r1, r8
 8004302:	eb12 0a01 	adds.w	sl, r2, r1
 8004306:	4649      	mov	r1, r9
 8004308:	eb43 0b01 	adc.w	fp, r3, r1
 800430c:	f04f 0200 	mov.w	r2, #0
 8004310:	f04f 0300 	mov.w	r3, #0
 8004314:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004318:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800431c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004320:	4692      	mov	sl, r2
 8004322:	469b      	mov	fp, r3
 8004324:	4643      	mov	r3, r8
 8004326:	eb1a 0303 	adds.w	r3, sl, r3
 800432a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800432e:	464b      	mov	r3, r9
 8004330:	eb4b 0303 	adc.w	r3, fp, r3
 8004334:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004344:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004348:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800434c:	460b      	mov	r3, r1
 800434e:	18db      	adds	r3, r3, r3
 8004350:	643b      	str	r3, [r7, #64]	; 0x40
 8004352:	4613      	mov	r3, r2
 8004354:	eb42 0303 	adc.w	r3, r2, r3
 8004358:	647b      	str	r3, [r7, #68]	; 0x44
 800435a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800435e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004362:	f7fc fc31 	bl	8000bc8 <__aeabi_uldivmod>
 8004366:	4602      	mov	r2, r0
 8004368:	460b      	mov	r3, r1
 800436a:	4611      	mov	r1, r2
 800436c:	4b3b      	ldr	r3, [pc, #236]	; (800445c <UART_SetConfig+0x2d4>)
 800436e:	fba3 2301 	umull	r2, r3, r3, r1
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2264      	movs	r2, #100	; 0x64
 8004376:	fb02 f303 	mul.w	r3, r2, r3
 800437a:	1acb      	subs	r3, r1, r3
 800437c:	00db      	lsls	r3, r3, #3
 800437e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004382:	4b36      	ldr	r3, [pc, #216]	; (800445c <UART_SetConfig+0x2d4>)
 8004384:	fba3 2302 	umull	r2, r3, r3, r2
 8004388:	095b      	lsrs	r3, r3, #5
 800438a:	005b      	lsls	r3, r3, #1
 800438c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004390:	441c      	add	r4, r3
 8004392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004396:	2200      	movs	r2, #0
 8004398:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800439c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80043a0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80043a4:	4642      	mov	r2, r8
 80043a6:	464b      	mov	r3, r9
 80043a8:	1891      	adds	r1, r2, r2
 80043aa:	63b9      	str	r1, [r7, #56]	; 0x38
 80043ac:	415b      	adcs	r3, r3
 80043ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043b0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80043b4:	4641      	mov	r1, r8
 80043b6:	1851      	adds	r1, r2, r1
 80043b8:	6339      	str	r1, [r7, #48]	; 0x30
 80043ba:	4649      	mov	r1, r9
 80043bc:	414b      	adcs	r3, r1
 80043be:	637b      	str	r3, [r7, #52]	; 0x34
 80043c0:	f04f 0200 	mov.w	r2, #0
 80043c4:	f04f 0300 	mov.w	r3, #0
 80043c8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80043cc:	4659      	mov	r1, fp
 80043ce:	00cb      	lsls	r3, r1, #3
 80043d0:	4651      	mov	r1, sl
 80043d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043d6:	4651      	mov	r1, sl
 80043d8:	00ca      	lsls	r2, r1, #3
 80043da:	4610      	mov	r0, r2
 80043dc:	4619      	mov	r1, r3
 80043de:	4603      	mov	r3, r0
 80043e0:	4642      	mov	r2, r8
 80043e2:	189b      	adds	r3, r3, r2
 80043e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043e8:	464b      	mov	r3, r9
 80043ea:	460a      	mov	r2, r1
 80043ec:	eb42 0303 	adc.w	r3, r2, r3
 80043f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	2200      	movs	r2, #0
 80043fc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004400:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004404:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004408:	460b      	mov	r3, r1
 800440a:	18db      	adds	r3, r3, r3
 800440c:	62bb      	str	r3, [r7, #40]	; 0x28
 800440e:	4613      	mov	r3, r2
 8004410:	eb42 0303 	adc.w	r3, r2, r3
 8004414:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004416:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800441a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800441e:	f7fc fbd3 	bl	8000bc8 <__aeabi_uldivmod>
 8004422:	4602      	mov	r2, r0
 8004424:	460b      	mov	r3, r1
 8004426:	4b0d      	ldr	r3, [pc, #52]	; (800445c <UART_SetConfig+0x2d4>)
 8004428:	fba3 1302 	umull	r1, r3, r3, r2
 800442c:	095b      	lsrs	r3, r3, #5
 800442e:	2164      	movs	r1, #100	; 0x64
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	1ad3      	subs	r3, r2, r3
 8004436:	00db      	lsls	r3, r3, #3
 8004438:	3332      	adds	r3, #50	; 0x32
 800443a:	4a08      	ldr	r2, [pc, #32]	; (800445c <UART_SetConfig+0x2d4>)
 800443c:	fba2 2303 	umull	r2, r3, r2, r3
 8004440:	095b      	lsrs	r3, r3, #5
 8004442:	f003 0207 	and.w	r2, r3, #7
 8004446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4422      	add	r2, r4
 800444e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004450:	e105      	b.n	800465e <UART_SetConfig+0x4d6>
 8004452:	bf00      	nop
 8004454:	40011000 	.word	0x40011000
 8004458:	40011400 	.word	0x40011400
 800445c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004460:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004464:	2200      	movs	r2, #0
 8004466:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800446a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800446e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004472:	4642      	mov	r2, r8
 8004474:	464b      	mov	r3, r9
 8004476:	1891      	adds	r1, r2, r2
 8004478:	6239      	str	r1, [r7, #32]
 800447a:	415b      	adcs	r3, r3
 800447c:	627b      	str	r3, [r7, #36]	; 0x24
 800447e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004482:	4641      	mov	r1, r8
 8004484:	1854      	adds	r4, r2, r1
 8004486:	4649      	mov	r1, r9
 8004488:	eb43 0501 	adc.w	r5, r3, r1
 800448c:	f04f 0200 	mov.w	r2, #0
 8004490:	f04f 0300 	mov.w	r3, #0
 8004494:	00eb      	lsls	r3, r5, #3
 8004496:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800449a:	00e2      	lsls	r2, r4, #3
 800449c:	4614      	mov	r4, r2
 800449e:	461d      	mov	r5, r3
 80044a0:	4643      	mov	r3, r8
 80044a2:	18e3      	adds	r3, r4, r3
 80044a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80044a8:	464b      	mov	r3, r9
 80044aa:	eb45 0303 	adc.w	r3, r5, r3
 80044ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80044b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80044be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80044c2:	f04f 0200 	mov.w	r2, #0
 80044c6:	f04f 0300 	mov.w	r3, #0
 80044ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80044ce:	4629      	mov	r1, r5
 80044d0:	008b      	lsls	r3, r1, #2
 80044d2:	4621      	mov	r1, r4
 80044d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80044d8:	4621      	mov	r1, r4
 80044da:	008a      	lsls	r2, r1, #2
 80044dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044e0:	f7fc fb72 	bl	8000bc8 <__aeabi_uldivmod>
 80044e4:	4602      	mov	r2, r0
 80044e6:	460b      	mov	r3, r1
 80044e8:	4b60      	ldr	r3, [pc, #384]	; (800466c <UART_SetConfig+0x4e4>)
 80044ea:	fba3 2302 	umull	r2, r3, r3, r2
 80044ee:	095b      	lsrs	r3, r3, #5
 80044f0:	011c      	lsls	r4, r3, #4
 80044f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044f6:	2200      	movs	r2, #0
 80044f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004500:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004504:	4642      	mov	r2, r8
 8004506:	464b      	mov	r3, r9
 8004508:	1891      	adds	r1, r2, r2
 800450a:	61b9      	str	r1, [r7, #24]
 800450c:	415b      	adcs	r3, r3
 800450e:	61fb      	str	r3, [r7, #28]
 8004510:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004514:	4641      	mov	r1, r8
 8004516:	1851      	adds	r1, r2, r1
 8004518:	6139      	str	r1, [r7, #16]
 800451a:	4649      	mov	r1, r9
 800451c:	414b      	adcs	r3, r1
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	f04f 0200 	mov.w	r2, #0
 8004524:	f04f 0300 	mov.w	r3, #0
 8004528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800452c:	4659      	mov	r1, fp
 800452e:	00cb      	lsls	r3, r1, #3
 8004530:	4651      	mov	r1, sl
 8004532:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004536:	4651      	mov	r1, sl
 8004538:	00ca      	lsls	r2, r1, #3
 800453a:	4610      	mov	r0, r2
 800453c:	4619      	mov	r1, r3
 800453e:	4603      	mov	r3, r0
 8004540:	4642      	mov	r2, r8
 8004542:	189b      	adds	r3, r3, r2
 8004544:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004548:	464b      	mov	r3, r9
 800454a:	460a      	mov	r2, r1
 800454c:	eb42 0303 	adc.w	r3, r2, r3
 8004550:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2200      	movs	r2, #0
 800455c:	67bb      	str	r3, [r7, #120]	; 0x78
 800455e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800456c:	4649      	mov	r1, r9
 800456e:	008b      	lsls	r3, r1, #2
 8004570:	4641      	mov	r1, r8
 8004572:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004576:	4641      	mov	r1, r8
 8004578:	008a      	lsls	r2, r1, #2
 800457a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800457e:	f7fc fb23 	bl	8000bc8 <__aeabi_uldivmod>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4b39      	ldr	r3, [pc, #228]	; (800466c <UART_SetConfig+0x4e4>)
 8004588:	fba3 1302 	umull	r1, r3, r3, r2
 800458c:	095b      	lsrs	r3, r3, #5
 800458e:	2164      	movs	r1, #100	; 0x64
 8004590:	fb01 f303 	mul.w	r3, r1, r3
 8004594:	1ad3      	subs	r3, r2, r3
 8004596:	011b      	lsls	r3, r3, #4
 8004598:	3332      	adds	r3, #50	; 0x32
 800459a:	4a34      	ldr	r2, [pc, #208]	; (800466c <UART_SetConfig+0x4e4>)
 800459c:	fba2 2303 	umull	r2, r3, r2, r3
 80045a0:	095b      	lsrs	r3, r3, #5
 80045a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80045a6:	441c      	add	r4, r3
 80045a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045ac:	2200      	movs	r2, #0
 80045ae:	673b      	str	r3, [r7, #112]	; 0x70
 80045b0:	677a      	str	r2, [r7, #116]	; 0x74
 80045b2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80045b6:	4642      	mov	r2, r8
 80045b8:	464b      	mov	r3, r9
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	60b9      	str	r1, [r7, #8]
 80045be:	415b      	adcs	r3, r3
 80045c0:	60fb      	str	r3, [r7, #12]
 80045c2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045c6:	4641      	mov	r1, r8
 80045c8:	1851      	adds	r1, r2, r1
 80045ca:	6039      	str	r1, [r7, #0]
 80045cc:	4649      	mov	r1, r9
 80045ce:	414b      	adcs	r3, r1
 80045d0:	607b      	str	r3, [r7, #4]
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045de:	4659      	mov	r1, fp
 80045e0:	00cb      	lsls	r3, r1, #3
 80045e2:	4651      	mov	r1, sl
 80045e4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045e8:	4651      	mov	r1, sl
 80045ea:	00ca      	lsls	r2, r1, #3
 80045ec:	4610      	mov	r0, r2
 80045ee:	4619      	mov	r1, r3
 80045f0:	4603      	mov	r3, r0
 80045f2:	4642      	mov	r2, r8
 80045f4:	189b      	adds	r3, r3, r2
 80045f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045f8:	464b      	mov	r3, r9
 80045fa:	460a      	mov	r2, r1
 80045fc:	eb42 0303 	adc.w	r3, r2, r3
 8004600:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	663b      	str	r3, [r7, #96]	; 0x60
 800460c:	667a      	str	r2, [r7, #100]	; 0x64
 800460e:	f04f 0200 	mov.w	r2, #0
 8004612:	f04f 0300 	mov.w	r3, #0
 8004616:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800461a:	4649      	mov	r1, r9
 800461c:	008b      	lsls	r3, r1, #2
 800461e:	4641      	mov	r1, r8
 8004620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004624:	4641      	mov	r1, r8
 8004626:	008a      	lsls	r2, r1, #2
 8004628:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800462c:	f7fc facc 	bl	8000bc8 <__aeabi_uldivmod>
 8004630:	4602      	mov	r2, r0
 8004632:	460b      	mov	r3, r1
 8004634:	4b0d      	ldr	r3, [pc, #52]	; (800466c <UART_SetConfig+0x4e4>)
 8004636:	fba3 1302 	umull	r1, r3, r3, r2
 800463a:	095b      	lsrs	r3, r3, #5
 800463c:	2164      	movs	r1, #100	; 0x64
 800463e:	fb01 f303 	mul.w	r3, r1, r3
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	3332      	adds	r3, #50	; 0x32
 8004648:	4a08      	ldr	r2, [pc, #32]	; (800466c <UART_SetConfig+0x4e4>)
 800464a:	fba2 2303 	umull	r2, r3, r2, r3
 800464e:	095b      	lsrs	r3, r3, #5
 8004650:	f003 020f 	and.w	r2, r3, #15
 8004654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4422      	add	r2, r4
 800465c:	609a      	str	r2, [r3, #8]
}
 800465e:	bf00      	nop
 8004660:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004664:	46bd      	mov	sp, r7
 8004666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800466a:	bf00      	nop
 800466c:	51eb851f 	.word	0x51eb851f

08004670 <__errno>:
 8004670:	4b01      	ldr	r3, [pc, #4]	; (8004678 <__errno+0x8>)
 8004672:	6818      	ldr	r0, [r3, #0]
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	20000010 	.word	0x20000010

0800467c <__libc_init_array>:
 800467c:	b570      	push	{r4, r5, r6, lr}
 800467e:	4d0d      	ldr	r5, [pc, #52]	; (80046b4 <__libc_init_array+0x38>)
 8004680:	4c0d      	ldr	r4, [pc, #52]	; (80046b8 <__libc_init_array+0x3c>)
 8004682:	1b64      	subs	r4, r4, r5
 8004684:	10a4      	asrs	r4, r4, #2
 8004686:	2600      	movs	r6, #0
 8004688:	42a6      	cmp	r6, r4
 800468a:	d109      	bne.n	80046a0 <__libc_init_array+0x24>
 800468c:	4d0b      	ldr	r5, [pc, #44]	; (80046bc <__libc_init_array+0x40>)
 800468e:	4c0c      	ldr	r4, [pc, #48]	; (80046c0 <__libc_init_array+0x44>)
 8004690:	f002 ff90 	bl	80075b4 <_init>
 8004694:	1b64      	subs	r4, r4, r5
 8004696:	10a4      	asrs	r4, r4, #2
 8004698:	2600      	movs	r6, #0
 800469a:	42a6      	cmp	r6, r4
 800469c:	d105      	bne.n	80046aa <__libc_init_array+0x2e>
 800469e:	bd70      	pop	{r4, r5, r6, pc}
 80046a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80046a4:	4798      	blx	r3
 80046a6:	3601      	adds	r6, #1
 80046a8:	e7ee      	b.n	8004688 <__libc_init_array+0xc>
 80046aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80046ae:	4798      	blx	r3
 80046b0:	3601      	adds	r6, #1
 80046b2:	e7f2      	b.n	800469a <__libc_init_array+0x1e>
 80046b4:	08007a84 	.word	0x08007a84
 80046b8:	08007a84 	.word	0x08007a84
 80046bc:	08007a84 	.word	0x08007a84
 80046c0:	08007a88 	.word	0x08007a88

080046c4 <memcpy>:
 80046c4:	440a      	add	r2, r1
 80046c6:	4291      	cmp	r1, r2
 80046c8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80046cc:	d100      	bne.n	80046d0 <memcpy+0xc>
 80046ce:	4770      	bx	lr
 80046d0:	b510      	push	{r4, lr}
 80046d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80046d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80046da:	4291      	cmp	r1, r2
 80046dc:	d1f9      	bne.n	80046d2 <memcpy+0xe>
 80046de:	bd10      	pop	{r4, pc}

080046e0 <memset>:
 80046e0:	4402      	add	r2, r0
 80046e2:	4603      	mov	r3, r0
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d100      	bne.n	80046ea <memset+0xa>
 80046e8:	4770      	bx	lr
 80046ea:	f803 1b01 	strb.w	r1, [r3], #1
 80046ee:	e7f9      	b.n	80046e4 <memset+0x4>

080046f0 <__cvt>:
 80046f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80046f4:	ec55 4b10 	vmov	r4, r5, d0
 80046f8:	2d00      	cmp	r5, #0
 80046fa:	460e      	mov	r6, r1
 80046fc:	4619      	mov	r1, r3
 80046fe:	462b      	mov	r3, r5
 8004700:	bfbb      	ittet	lt
 8004702:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004706:	461d      	movlt	r5, r3
 8004708:	2300      	movge	r3, #0
 800470a:	232d      	movlt	r3, #45	; 0x2d
 800470c:	700b      	strb	r3, [r1, #0]
 800470e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004710:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004714:	4691      	mov	r9, r2
 8004716:	f023 0820 	bic.w	r8, r3, #32
 800471a:	bfbc      	itt	lt
 800471c:	4622      	movlt	r2, r4
 800471e:	4614      	movlt	r4, r2
 8004720:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004724:	d005      	beq.n	8004732 <__cvt+0x42>
 8004726:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800472a:	d100      	bne.n	800472e <__cvt+0x3e>
 800472c:	3601      	adds	r6, #1
 800472e:	2102      	movs	r1, #2
 8004730:	e000      	b.n	8004734 <__cvt+0x44>
 8004732:	2103      	movs	r1, #3
 8004734:	ab03      	add	r3, sp, #12
 8004736:	9301      	str	r3, [sp, #4]
 8004738:	ab02      	add	r3, sp, #8
 800473a:	9300      	str	r3, [sp, #0]
 800473c:	ec45 4b10 	vmov	d0, r4, r5
 8004740:	4653      	mov	r3, sl
 8004742:	4632      	mov	r2, r6
 8004744:	f000 fe38 	bl	80053b8 <_dtoa_r>
 8004748:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800474c:	4607      	mov	r7, r0
 800474e:	d102      	bne.n	8004756 <__cvt+0x66>
 8004750:	f019 0f01 	tst.w	r9, #1
 8004754:	d022      	beq.n	800479c <__cvt+0xac>
 8004756:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800475a:	eb07 0906 	add.w	r9, r7, r6
 800475e:	d110      	bne.n	8004782 <__cvt+0x92>
 8004760:	783b      	ldrb	r3, [r7, #0]
 8004762:	2b30      	cmp	r3, #48	; 0x30
 8004764:	d10a      	bne.n	800477c <__cvt+0x8c>
 8004766:	2200      	movs	r2, #0
 8004768:	2300      	movs	r3, #0
 800476a:	4620      	mov	r0, r4
 800476c:	4629      	mov	r1, r5
 800476e:	f7fc f9bb 	bl	8000ae8 <__aeabi_dcmpeq>
 8004772:	b918      	cbnz	r0, 800477c <__cvt+0x8c>
 8004774:	f1c6 0601 	rsb	r6, r6, #1
 8004778:	f8ca 6000 	str.w	r6, [sl]
 800477c:	f8da 3000 	ldr.w	r3, [sl]
 8004780:	4499      	add	r9, r3
 8004782:	2200      	movs	r2, #0
 8004784:	2300      	movs	r3, #0
 8004786:	4620      	mov	r0, r4
 8004788:	4629      	mov	r1, r5
 800478a:	f7fc f9ad 	bl	8000ae8 <__aeabi_dcmpeq>
 800478e:	b108      	cbz	r0, 8004794 <__cvt+0xa4>
 8004790:	f8cd 900c 	str.w	r9, [sp, #12]
 8004794:	2230      	movs	r2, #48	; 0x30
 8004796:	9b03      	ldr	r3, [sp, #12]
 8004798:	454b      	cmp	r3, r9
 800479a:	d307      	bcc.n	80047ac <__cvt+0xbc>
 800479c:	9b03      	ldr	r3, [sp, #12]
 800479e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047a0:	1bdb      	subs	r3, r3, r7
 80047a2:	4638      	mov	r0, r7
 80047a4:	6013      	str	r3, [r2, #0]
 80047a6:	b004      	add	sp, #16
 80047a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047ac:	1c59      	adds	r1, r3, #1
 80047ae:	9103      	str	r1, [sp, #12]
 80047b0:	701a      	strb	r2, [r3, #0]
 80047b2:	e7f0      	b.n	8004796 <__cvt+0xa6>

080047b4 <__exponent>:
 80047b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80047b6:	4603      	mov	r3, r0
 80047b8:	2900      	cmp	r1, #0
 80047ba:	bfb8      	it	lt
 80047bc:	4249      	neglt	r1, r1
 80047be:	f803 2b02 	strb.w	r2, [r3], #2
 80047c2:	bfb4      	ite	lt
 80047c4:	222d      	movlt	r2, #45	; 0x2d
 80047c6:	222b      	movge	r2, #43	; 0x2b
 80047c8:	2909      	cmp	r1, #9
 80047ca:	7042      	strb	r2, [r0, #1]
 80047cc:	dd2a      	ble.n	8004824 <__exponent+0x70>
 80047ce:	f10d 0407 	add.w	r4, sp, #7
 80047d2:	46a4      	mov	ip, r4
 80047d4:	270a      	movs	r7, #10
 80047d6:	46a6      	mov	lr, r4
 80047d8:	460a      	mov	r2, r1
 80047da:	fb91 f6f7 	sdiv	r6, r1, r7
 80047de:	fb07 1516 	mls	r5, r7, r6, r1
 80047e2:	3530      	adds	r5, #48	; 0x30
 80047e4:	2a63      	cmp	r2, #99	; 0x63
 80047e6:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80047ea:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80047ee:	4631      	mov	r1, r6
 80047f0:	dcf1      	bgt.n	80047d6 <__exponent+0x22>
 80047f2:	3130      	adds	r1, #48	; 0x30
 80047f4:	f1ae 0502 	sub.w	r5, lr, #2
 80047f8:	f804 1c01 	strb.w	r1, [r4, #-1]
 80047fc:	1c44      	adds	r4, r0, #1
 80047fe:	4629      	mov	r1, r5
 8004800:	4561      	cmp	r1, ip
 8004802:	d30a      	bcc.n	800481a <__exponent+0x66>
 8004804:	f10d 0209 	add.w	r2, sp, #9
 8004808:	eba2 020e 	sub.w	r2, r2, lr
 800480c:	4565      	cmp	r5, ip
 800480e:	bf88      	it	hi
 8004810:	2200      	movhi	r2, #0
 8004812:	4413      	add	r3, r2
 8004814:	1a18      	subs	r0, r3, r0
 8004816:	b003      	add	sp, #12
 8004818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800481a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800481e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004822:	e7ed      	b.n	8004800 <__exponent+0x4c>
 8004824:	2330      	movs	r3, #48	; 0x30
 8004826:	3130      	adds	r1, #48	; 0x30
 8004828:	7083      	strb	r3, [r0, #2]
 800482a:	70c1      	strb	r1, [r0, #3]
 800482c:	1d03      	adds	r3, r0, #4
 800482e:	e7f1      	b.n	8004814 <__exponent+0x60>

08004830 <_printf_float>:
 8004830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004834:	ed2d 8b02 	vpush	{d8}
 8004838:	b08d      	sub	sp, #52	; 0x34
 800483a:	460c      	mov	r4, r1
 800483c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004840:	4616      	mov	r6, r2
 8004842:	461f      	mov	r7, r3
 8004844:	4605      	mov	r5, r0
 8004846:	f001 fd5d 	bl	8006304 <_localeconv_r>
 800484a:	f8d0 a000 	ldr.w	sl, [r0]
 800484e:	4650      	mov	r0, sl
 8004850:	f7fb fcce 	bl	80001f0 <strlen>
 8004854:	2300      	movs	r3, #0
 8004856:	930a      	str	r3, [sp, #40]	; 0x28
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	9305      	str	r3, [sp, #20]
 800485c:	f8d8 3000 	ldr.w	r3, [r8]
 8004860:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004864:	3307      	adds	r3, #7
 8004866:	f023 0307 	bic.w	r3, r3, #7
 800486a:	f103 0208 	add.w	r2, r3, #8
 800486e:	f8c8 2000 	str.w	r2, [r8]
 8004872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004876:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800487a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800487e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004882:	9307      	str	r3, [sp, #28]
 8004884:	f8cd 8018 	str.w	r8, [sp, #24]
 8004888:	ee08 0a10 	vmov	s16, r0
 800488c:	4b9f      	ldr	r3, [pc, #636]	; (8004b0c <_printf_float+0x2dc>)
 800488e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004892:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004896:	f7fc f959 	bl	8000b4c <__aeabi_dcmpun>
 800489a:	bb88      	cbnz	r0, 8004900 <_printf_float+0xd0>
 800489c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80048a0:	4b9a      	ldr	r3, [pc, #616]	; (8004b0c <_printf_float+0x2dc>)
 80048a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80048a6:	f7fc f933 	bl	8000b10 <__aeabi_dcmple>
 80048aa:	bb48      	cbnz	r0, 8004900 <_printf_float+0xd0>
 80048ac:	2200      	movs	r2, #0
 80048ae:	2300      	movs	r3, #0
 80048b0:	4640      	mov	r0, r8
 80048b2:	4649      	mov	r1, r9
 80048b4:	f7fc f922 	bl	8000afc <__aeabi_dcmplt>
 80048b8:	b110      	cbz	r0, 80048c0 <_printf_float+0x90>
 80048ba:	232d      	movs	r3, #45	; 0x2d
 80048bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80048c0:	4b93      	ldr	r3, [pc, #588]	; (8004b10 <_printf_float+0x2e0>)
 80048c2:	4894      	ldr	r0, [pc, #592]	; (8004b14 <_printf_float+0x2e4>)
 80048c4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80048c8:	bf94      	ite	ls
 80048ca:	4698      	movls	r8, r3
 80048cc:	4680      	movhi	r8, r0
 80048ce:	2303      	movs	r3, #3
 80048d0:	6123      	str	r3, [r4, #16]
 80048d2:	9b05      	ldr	r3, [sp, #20]
 80048d4:	f023 0204 	bic.w	r2, r3, #4
 80048d8:	6022      	str	r2, [r4, #0]
 80048da:	f04f 0900 	mov.w	r9, #0
 80048de:	9700      	str	r7, [sp, #0]
 80048e0:	4633      	mov	r3, r6
 80048e2:	aa0b      	add	r2, sp, #44	; 0x2c
 80048e4:	4621      	mov	r1, r4
 80048e6:	4628      	mov	r0, r5
 80048e8:	f000 f9d8 	bl	8004c9c <_printf_common>
 80048ec:	3001      	adds	r0, #1
 80048ee:	f040 8090 	bne.w	8004a12 <_printf_float+0x1e2>
 80048f2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80048f6:	b00d      	add	sp, #52	; 0x34
 80048f8:	ecbd 8b02 	vpop	{d8}
 80048fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004900:	4642      	mov	r2, r8
 8004902:	464b      	mov	r3, r9
 8004904:	4640      	mov	r0, r8
 8004906:	4649      	mov	r1, r9
 8004908:	f7fc f920 	bl	8000b4c <__aeabi_dcmpun>
 800490c:	b140      	cbz	r0, 8004920 <_printf_float+0xf0>
 800490e:	464b      	mov	r3, r9
 8004910:	2b00      	cmp	r3, #0
 8004912:	bfbc      	itt	lt
 8004914:	232d      	movlt	r3, #45	; 0x2d
 8004916:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800491a:	487f      	ldr	r0, [pc, #508]	; (8004b18 <_printf_float+0x2e8>)
 800491c:	4b7f      	ldr	r3, [pc, #508]	; (8004b1c <_printf_float+0x2ec>)
 800491e:	e7d1      	b.n	80048c4 <_printf_float+0x94>
 8004920:	6863      	ldr	r3, [r4, #4]
 8004922:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004926:	9206      	str	r2, [sp, #24]
 8004928:	1c5a      	adds	r2, r3, #1
 800492a:	d13f      	bne.n	80049ac <_printf_float+0x17c>
 800492c:	2306      	movs	r3, #6
 800492e:	6063      	str	r3, [r4, #4]
 8004930:	9b05      	ldr	r3, [sp, #20]
 8004932:	6861      	ldr	r1, [r4, #4]
 8004934:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004938:	2300      	movs	r3, #0
 800493a:	9303      	str	r3, [sp, #12]
 800493c:	ab0a      	add	r3, sp, #40	; 0x28
 800493e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004942:	ab09      	add	r3, sp, #36	; 0x24
 8004944:	ec49 8b10 	vmov	d0, r8, r9
 8004948:	9300      	str	r3, [sp, #0]
 800494a:	6022      	str	r2, [r4, #0]
 800494c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004950:	4628      	mov	r0, r5
 8004952:	f7ff fecd 	bl	80046f0 <__cvt>
 8004956:	9b06      	ldr	r3, [sp, #24]
 8004958:	9909      	ldr	r1, [sp, #36]	; 0x24
 800495a:	2b47      	cmp	r3, #71	; 0x47
 800495c:	4680      	mov	r8, r0
 800495e:	d108      	bne.n	8004972 <_printf_float+0x142>
 8004960:	1cc8      	adds	r0, r1, #3
 8004962:	db02      	blt.n	800496a <_printf_float+0x13a>
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	4299      	cmp	r1, r3
 8004968:	dd41      	ble.n	80049ee <_printf_float+0x1be>
 800496a:	f1ab 0b02 	sub.w	fp, fp, #2
 800496e:	fa5f fb8b 	uxtb.w	fp, fp
 8004972:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004976:	d820      	bhi.n	80049ba <_printf_float+0x18a>
 8004978:	3901      	subs	r1, #1
 800497a:	465a      	mov	r2, fp
 800497c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004980:	9109      	str	r1, [sp, #36]	; 0x24
 8004982:	f7ff ff17 	bl	80047b4 <__exponent>
 8004986:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004988:	1813      	adds	r3, r2, r0
 800498a:	2a01      	cmp	r2, #1
 800498c:	4681      	mov	r9, r0
 800498e:	6123      	str	r3, [r4, #16]
 8004990:	dc02      	bgt.n	8004998 <_printf_float+0x168>
 8004992:	6822      	ldr	r2, [r4, #0]
 8004994:	07d2      	lsls	r2, r2, #31
 8004996:	d501      	bpl.n	800499c <_printf_float+0x16c>
 8004998:	3301      	adds	r3, #1
 800499a:	6123      	str	r3, [r4, #16]
 800499c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d09c      	beq.n	80048de <_printf_float+0xae>
 80049a4:	232d      	movs	r3, #45	; 0x2d
 80049a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80049aa:	e798      	b.n	80048de <_printf_float+0xae>
 80049ac:	9a06      	ldr	r2, [sp, #24]
 80049ae:	2a47      	cmp	r2, #71	; 0x47
 80049b0:	d1be      	bne.n	8004930 <_printf_float+0x100>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1bc      	bne.n	8004930 <_printf_float+0x100>
 80049b6:	2301      	movs	r3, #1
 80049b8:	e7b9      	b.n	800492e <_printf_float+0xfe>
 80049ba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80049be:	d118      	bne.n	80049f2 <_printf_float+0x1c2>
 80049c0:	2900      	cmp	r1, #0
 80049c2:	6863      	ldr	r3, [r4, #4]
 80049c4:	dd0b      	ble.n	80049de <_printf_float+0x1ae>
 80049c6:	6121      	str	r1, [r4, #16]
 80049c8:	b913      	cbnz	r3, 80049d0 <_printf_float+0x1a0>
 80049ca:	6822      	ldr	r2, [r4, #0]
 80049cc:	07d0      	lsls	r0, r2, #31
 80049ce:	d502      	bpl.n	80049d6 <_printf_float+0x1a6>
 80049d0:	3301      	adds	r3, #1
 80049d2:	440b      	add	r3, r1
 80049d4:	6123      	str	r3, [r4, #16]
 80049d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80049d8:	f04f 0900 	mov.w	r9, #0
 80049dc:	e7de      	b.n	800499c <_printf_float+0x16c>
 80049de:	b913      	cbnz	r3, 80049e6 <_printf_float+0x1b6>
 80049e0:	6822      	ldr	r2, [r4, #0]
 80049e2:	07d2      	lsls	r2, r2, #31
 80049e4:	d501      	bpl.n	80049ea <_printf_float+0x1ba>
 80049e6:	3302      	adds	r3, #2
 80049e8:	e7f4      	b.n	80049d4 <_printf_float+0x1a4>
 80049ea:	2301      	movs	r3, #1
 80049ec:	e7f2      	b.n	80049d4 <_printf_float+0x1a4>
 80049ee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80049f2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80049f4:	4299      	cmp	r1, r3
 80049f6:	db05      	blt.n	8004a04 <_printf_float+0x1d4>
 80049f8:	6823      	ldr	r3, [r4, #0]
 80049fa:	6121      	str	r1, [r4, #16]
 80049fc:	07d8      	lsls	r0, r3, #31
 80049fe:	d5ea      	bpl.n	80049d6 <_printf_float+0x1a6>
 8004a00:	1c4b      	adds	r3, r1, #1
 8004a02:	e7e7      	b.n	80049d4 <_printf_float+0x1a4>
 8004a04:	2900      	cmp	r1, #0
 8004a06:	bfd4      	ite	le
 8004a08:	f1c1 0202 	rsble	r2, r1, #2
 8004a0c:	2201      	movgt	r2, #1
 8004a0e:	4413      	add	r3, r2
 8004a10:	e7e0      	b.n	80049d4 <_printf_float+0x1a4>
 8004a12:	6823      	ldr	r3, [r4, #0]
 8004a14:	055a      	lsls	r2, r3, #21
 8004a16:	d407      	bmi.n	8004a28 <_printf_float+0x1f8>
 8004a18:	6923      	ldr	r3, [r4, #16]
 8004a1a:	4642      	mov	r2, r8
 8004a1c:	4631      	mov	r1, r6
 8004a1e:	4628      	mov	r0, r5
 8004a20:	47b8      	blx	r7
 8004a22:	3001      	adds	r0, #1
 8004a24:	d12c      	bne.n	8004a80 <_printf_float+0x250>
 8004a26:	e764      	b.n	80048f2 <_printf_float+0xc2>
 8004a28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004a2c:	f240 80e0 	bls.w	8004bf0 <_printf_float+0x3c0>
 8004a30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a34:	2200      	movs	r2, #0
 8004a36:	2300      	movs	r3, #0
 8004a38:	f7fc f856 	bl	8000ae8 <__aeabi_dcmpeq>
 8004a3c:	2800      	cmp	r0, #0
 8004a3e:	d034      	beq.n	8004aaa <_printf_float+0x27a>
 8004a40:	4a37      	ldr	r2, [pc, #220]	; (8004b20 <_printf_float+0x2f0>)
 8004a42:	2301      	movs	r3, #1
 8004a44:	4631      	mov	r1, r6
 8004a46:	4628      	mov	r0, r5
 8004a48:	47b8      	blx	r7
 8004a4a:	3001      	adds	r0, #1
 8004a4c:	f43f af51 	beq.w	80048f2 <_printf_float+0xc2>
 8004a50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a54:	429a      	cmp	r2, r3
 8004a56:	db02      	blt.n	8004a5e <_printf_float+0x22e>
 8004a58:	6823      	ldr	r3, [r4, #0]
 8004a5a:	07d8      	lsls	r0, r3, #31
 8004a5c:	d510      	bpl.n	8004a80 <_printf_float+0x250>
 8004a5e:	ee18 3a10 	vmov	r3, s16
 8004a62:	4652      	mov	r2, sl
 8004a64:	4631      	mov	r1, r6
 8004a66:	4628      	mov	r0, r5
 8004a68:	47b8      	blx	r7
 8004a6a:	3001      	adds	r0, #1
 8004a6c:	f43f af41 	beq.w	80048f2 <_printf_float+0xc2>
 8004a70:	f04f 0800 	mov.w	r8, #0
 8004a74:	f104 091a 	add.w	r9, r4, #26
 8004a78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004a7a:	3b01      	subs	r3, #1
 8004a7c:	4543      	cmp	r3, r8
 8004a7e:	dc09      	bgt.n	8004a94 <_printf_float+0x264>
 8004a80:	6823      	ldr	r3, [r4, #0]
 8004a82:	079b      	lsls	r3, r3, #30
 8004a84:	f100 8105 	bmi.w	8004c92 <_printf_float+0x462>
 8004a88:	68e0      	ldr	r0, [r4, #12]
 8004a8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004a8c:	4298      	cmp	r0, r3
 8004a8e:	bfb8      	it	lt
 8004a90:	4618      	movlt	r0, r3
 8004a92:	e730      	b.n	80048f6 <_printf_float+0xc6>
 8004a94:	2301      	movs	r3, #1
 8004a96:	464a      	mov	r2, r9
 8004a98:	4631      	mov	r1, r6
 8004a9a:	4628      	mov	r0, r5
 8004a9c:	47b8      	blx	r7
 8004a9e:	3001      	adds	r0, #1
 8004aa0:	f43f af27 	beq.w	80048f2 <_printf_float+0xc2>
 8004aa4:	f108 0801 	add.w	r8, r8, #1
 8004aa8:	e7e6      	b.n	8004a78 <_printf_float+0x248>
 8004aaa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	dc39      	bgt.n	8004b24 <_printf_float+0x2f4>
 8004ab0:	4a1b      	ldr	r2, [pc, #108]	; (8004b20 <_printf_float+0x2f0>)
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	4631      	mov	r1, r6
 8004ab6:	4628      	mov	r0, r5
 8004ab8:	47b8      	blx	r7
 8004aba:	3001      	adds	r0, #1
 8004abc:	f43f af19 	beq.w	80048f2 <_printf_float+0xc2>
 8004ac0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	d102      	bne.n	8004ace <_printf_float+0x29e>
 8004ac8:	6823      	ldr	r3, [r4, #0]
 8004aca:	07d9      	lsls	r1, r3, #31
 8004acc:	d5d8      	bpl.n	8004a80 <_printf_float+0x250>
 8004ace:	ee18 3a10 	vmov	r3, s16
 8004ad2:	4652      	mov	r2, sl
 8004ad4:	4631      	mov	r1, r6
 8004ad6:	4628      	mov	r0, r5
 8004ad8:	47b8      	blx	r7
 8004ada:	3001      	adds	r0, #1
 8004adc:	f43f af09 	beq.w	80048f2 <_printf_float+0xc2>
 8004ae0:	f04f 0900 	mov.w	r9, #0
 8004ae4:	f104 0a1a 	add.w	sl, r4, #26
 8004ae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aea:	425b      	negs	r3, r3
 8004aec:	454b      	cmp	r3, r9
 8004aee:	dc01      	bgt.n	8004af4 <_printf_float+0x2c4>
 8004af0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004af2:	e792      	b.n	8004a1a <_printf_float+0x1ea>
 8004af4:	2301      	movs	r3, #1
 8004af6:	4652      	mov	r2, sl
 8004af8:	4631      	mov	r1, r6
 8004afa:	4628      	mov	r0, r5
 8004afc:	47b8      	blx	r7
 8004afe:	3001      	adds	r0, #1
 8004b00:	f43f aef7 	beq.w	80048f2 <_printf_float+0xc2>
 8004b04:	f109 0901 	add.w	r9, r9, #1
 8004b08:	e7ee      	b.n	8004ae8 <_printf_float+0x2b8>
 8004b0a:	bf00      	nop
 8004b0c:	7fefffff 	.word	0x7fefffff
 8004b10:	080076a4 	.word	0x080076a4
 8004b14:	080076a8 	.word	0x080076a8
 8004b18:	080076b0 	.word	0x080076b0
 8004b1c:	080076ac 	.word	0x080076ac
 8004b20:	080076b4 	.word	0x080076b4
 8004b24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	bfa8      	it	ge
 8004b2c:	461a      	movge	r2, r3
 8004b2e:	2a00      	cmp	r2, #0
 8004b30:	4691      	mov	r9, r2
 8004b32:	dc37      	bgt.n	8004ba4 <_printf_float+0x374>
 8004b34:	f04f 0b00 	mov.w	fp, #0
 8004b38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b3c:	f104 021a 	add.w	r2, r4, #26
 8004b40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004b42:	9305      	str	r3, [sp, #20]
 8004b44:	eba3 0309 	sub.w	r3, r3, r9
 8004b48:	455b      	cmp	r3, fp
 8004b4a:	dc33      	bgt.n	8004bb4 <_printf_float+0x384>
 8004b4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b50:	429a      	cmp	r2, r3
 8004b52:	db3b      	blt.n	8004bcc <_printf_float+0x39c>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	07da      	lsls	r2, r3, #31
 8004b58:	d438      	bmi.n	8004bcc <_printf_float+0x39c>
 8004b5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b5c:	9a05      	ldr	r2, [sp, #20]
 8004b5e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b60:	1a9a      	subs	r2, r3, r2
 8004b62:	eba3 0901 	sub.w	r9, r3, r1
 8004b66:	4591      	cmp	r9, r2
 8004b68:	bfa8      	it	ge
 8004b6a:	4691      	movge	r9, r2
 8004b6c:	f1b9 0f00 	cmp.w	r9, #0
 8004b70:	dc35      	bgt.n	8004bde <_printf_float+0x3ae>
 8004b72:	f04f 0800 	mov.w	r8, #0
 8004b76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004b7a:	f104 0a1a 	add.w	sl, r4, #26
 8004b7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004b82:	1a9b      	subs	r3, r3, r2
 8004b84:	eba3 0309 	sub.w	r3, r3, r9
 8004b88:	4543      	cmp	r3, r8
 8004b8a:	f77f af79 	ble.w	8004a80 <_printf_float+0x250>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	4652      	mov	r2, sl
 8004b92:	4631      	mov	r1, r6
 8004b94:	4628      	mov	r0, r5
 8004b96:	47b8      	blx	r7
 8004b98:	3001      	adds	r0, #1
 8004b9a:	f43f aeaa 	beq.w	80048f2 <_printf_float+0xc2>
 8004b9e:	f108 0801 	add.w	r8, r8, #1
 8004ba2:	e7ec      	b.n	8004b7e <_printf_float+0x34e>
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	4631      	mov	r1, r6
 8004ba8:	4642      	mov	r2, r8
 8004baa:	4628      	mov	r0, r5
 8004bac:	47b8      	blx	r7
 8004bae:	3001      	adds	r0, #1
 8004bb0:	d1c0      	bne.n	8004b34 <_printf_float+0x304>
 8004bb2:	e69e      	b.n	80048f2 <_printf_float+0xc2>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	4631      	mov	r1, r6
 8004bb8:	4628      	mov	r0, r5
 8004bba:	9205      	str	r2, [sp, #20]
 8004bbc:	47b8      	blx	r7
 8004bbe:	3001      	adds	r0, #1
 8004bc0:	f43f ae97 	beq.w	80048f2 <_printf_float+0xc2>
 8004bc4:	9a05      	ldr	r2, [sp, #20]
 8004bc6:	f10b 0b01 	add.w	fp, fp, #1
 8004bca:	e7b9      	b.n	8004b40 <_printf_float+0x310>
 8004bcc:	ee18 3a10 	vmov	r3, s16
 8004bd0:	4652      	mov	r2, sl
 8004bd2:	4631      	mov	r1, r6
 8004bd4:	4628      	mov	r0, r5
 8004bd6:	47b8      	blx	r7
 8004bd8:	3001      	adds	r0, #1
 8004bda:	d1be      	bne.n	8004b5a <_printf_float+0x32a>
 8004bdc:	e689      	b.n	80048f2 <_printf_float+0xc2>
 8004bde:	9a05      	ldr	r2, [sp, #20]
 8004be0:	464b      	mov	r3, r9
 8004be2:	4442      	add	r2, r8
 8004be4:	4631      	mov	r1, r6
 8004be6:	4628      	mov	r0, r5
 8004be8:	47b8      	blx	r7
 8004bea:	3001      	adds	r0, #1
 8004bec:	d1c1      	bne.n	8004b72 <_printf_float+0x342>
 8004bee:	e680      	b.n	80048f2 <_printf_float+0xc2>
 8004bf0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004bf2:	2a01      	cmp	r2, #1
 8004bf4:	dc01      	bgt.n	8004bfa <_printf_float+0x3ca>
 8004bf6:	07db      	lsls	r3, r3, #31
 8004bf8:	d538      	bpl.n	8004c6c <_printf_float+0x43c>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	4642      	mov	r2, r8
 8004bfe:	4631      	mov	r1, r6
 8004c00:	4628      	mov	r0, r5
 8004c02:	47b8      	blx	r7
 8004c04:	3001      	adds	r0, #1
 8004c06:	f43f ae74 	beq.w	80048f2 <_printf_float+0xc2>
 8004c0a:	ee18 3a10 	vmov	r3, s16
 8004c0e:	4652      	mov	r2, sl
 8004c10:	4631      	mov	r1, r6
 8004c12:	4628      	mov	r0, r5
 8004c14:	47b8      	blx	r7
 8004c16:	3001      	adds	r0, #1
 8004c18:	f43f ae6b 	beq.w	80048f2 <_printf_float+0xc2>
 8004c1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c20:	2200      	movs	r2, #0
 8004c22:	2300      	movs	r3, #0
 8004c24:	f7fb ff60 	bl	8000ae8 <__aeabi_dcmpeq>
 8004c28:	b9d8      	cbnz	r0, 8004c62 <_printf_float+0x432>
 8004c2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c2c:	f108 0201 	add.w	r2, r8, #1
 8004c30:	3b01      	subs	r3, #1
 8004c32:	4631      	mov	r1, r6
 8004c34:	4628      	mov	r0, r5
 8004c36:	47b8      	blx	r7
 8004c38:	3001      	adds	r0, #1
 8004c3a:	d10e      	bne.n	8004c5a <_printf_float+0x42a>
 8004c3c:	e659      	b.n	80048f2 <_printf_float+0xc2>
 8004c3e:	2301      	movs	r3, #1
 8004c40:	4652      	mov	r2, sl
 8004c42:	4631      	mov	r1, r6
 8004c44:	4628      	mov	r0, r5
 8004c46:	47b8      	blx	r7
 8004c48:	3001      	adds	r0, #1
 8004c4a:	f43f ae52 	beq.w	80048f2 <_printf_float+0xc2>
 8004c4e:	f108 0801 	add.w	r8, r8, #1
 8004c52:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c54:	3b01      	subs	r3, #1
 8004c56:	4543      	cmp	r3, r8
 8004c58:	dcf1      	bgt.n	8004c3e <_printf_float+0x40e>
 8004c5a:	464b      	mov	r3, r9
 8004c5c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004c60:	e6dc      	b.n	8004a1c <_printf_float+0x1ec>
 8004c62:	f04f 0800 	mov.w	r8, #0
 8004c66:	f104 0a1a 	add.w	sl, r4, #26
 8004c6a:	e7f2      	b.n	8004c52 <_printf_float+0x422>
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	4642      	mov	r2, r8
 8004c70:	e7df      	b.n	8004c32 <_printf_float+0x402>
 8004c72:	2301      	movs	r3, #1
 8004c74:	464a      	mov	r2, r9
 8004c76:	4631      	mov	r1, r6
 8004c78:	4628      	mov	r0, r5
 8004c7a:	47b8      	blx	r7
 8004c7c:	3001      	adds	r0, #1
 8004c7e:	f43f ae38 	beq.w	80048f2 <_printf_float+0xc2>
 8004c82:	f108 0801 	add.w	r8, r8, #1
 8004c86:	68e3      	ldr	r3, [r4, #12]
 8004c88:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004c8a:	1a5b      	subs	r3, r3, r1
 8004c8c:	4543      	cmp	r3, r8
 8004c8e:	dcf0      	bgt.n	8004c72 <_printf_float+0x442>
 8004c90:	e6fa      	b.n	8004a88 <_printf_float+0x258>
 8004c92:	f04f 0800 	mov.w	r8, #0
 8004c96:	f104 0919 	add.w	r9, r4, #25
 8004c9a:	e7f4      	b.n	8004c86 <_printf_float+0x456>

08004c9c <_printf_common>:
 8004c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ca0:	4616      	mov	r6, r2
 8004ca2:	4699      	mov	r9, r3
 8004ca4:	688a      	ldr	r2, [r1, #8]
 8004ca6:	690b      	ldr	r3, [r1, #16]
 8004ca8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004cac:	4293      	cmp	r3, r2
 8004cae:	bfb8      	it	lt
 8004cb0:	4613      	movlt	r3, r2
 8004cb2:	6033      	str	r3, [r6, #0]
 8004cb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004cb8:	4607      	mov	r7, r0
 8004cba:	460c      	mov	r4, r1
 8004cbc:	b10a      	cbz	r2, 8004cc2 <_printf_common+0x26>
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	6033      	str	r3, [r6, #0]
 8004cc2:	6823      	ldr	r3, [r4, #0]
 8004cc4:	0699      	lsls	r1, r3, #26
 8004cc6:	bf42      	ittt	mi
 8004cc8:	6833      	ldrmi	r3, [r6, #0]
 8004cca:	3302      	addmi	r3, #2
 8004ccc:	6033      	strmi	r3, [r6, #0]
 8004cce:	6825      	ldr	r5, [r4, #0]
 8004cd0:	f015 0506 	ands.w	r5, r5, #6
 8004cd4:	d106      	bne.n	8004ce4 <_printf_common+0x48>
 8004cd6:	f104 0a19 	add.w	sl, r4, #25
 8004cda:	68e3      	ldr	r3, [r4, #12]
 8004cdc:	6832      	ldr	r2, [r6, #0]
 8004cde:	1a9b      	subs	r3, r3, r2
 8004ce0:	42ab      	cmp	r3, r5
 8004ce2:	dc26      	bgt.n	8004d32 <_printf_common+0x96>
 8004ce4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ce8:	1e13      	subs	r3, r2, #0
 8004cea:	6822      	ldr	r2, [r4, #0]
 8004cec:	bf18      	it	ne
 8004cee:	2301      	movne	r3, #1
 8004cf0:	0692      	lsls	r2, r2, #26
 8004cf2:	d42b      	bmi.n	8004d4c <_printf_common+0xb0>
 8004cf4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	4638      	mov	r0, r7
 8004cfc:	47c0      	blx	r8
 8004cfe:	3001      	adds	r0, #1
 8004d00:	d01e      	beq.n	8004d40 <_printf_common+0xa4>
 8004d02:	6823      	ldr	r3, [r4, #0]
 8004d04:	68e5      	ldr	r5, [r4, #12]
 8004d06:	6832      	ldr	r2, [r6, #0]
 8004d08:	f003 0306 	and.w	r3, r3, #6
 8004d0c:	2b04      	cmp	r3, #4
 8004d0e:	bf08      	it	eq
 8004d10:	1aad      	subeq	r5, r5, r2
 8004d12:	68a3      	ldr	r3, [r4, #8]
 8004d14:	6922      	ldr	r2, [r4, #16]
 8004d16:	bf0c      	ite	eq
 8004d18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004d1c:	2500      	movne	r5, #0
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	bfc4      	itt	gt
 8004d22:	1a9b      	subgt	r3, r3, r2
 8004d24:	18ed      	addgt	r5, r5, r3
 8004d26:	2600      	movs	r6, #0
 8004d28:	341a      	adds	r4, #26
 8004d2a:	42b5      	cmp	r5, r6
 8004d2c:	d11a      	bne.n	8004d64 <_printf_common+0xc8>
 8004d2e:	2000      	movs	r0, #0
 8004d30:	e008      	b.n	8004d44 <_printf_common+0xa8>
 8004d32:	2301      	movs	r3, #1
 8004d34:	4652      	mov	r2, sl
 8004d36:	4649      	mov	r1, r9
 8004d38:	4638      	mov	r0, r7
 8004d3a:	47c0      	blx	r8
 8004d3c:	3001      	adds	r0, #1
 8004d3e:	d103      	bne.n	8004d48 <_printf_common+0xac>
 8004d40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d48:	3501      	adds	r5, #1
 8004d4a:	e7c6      	b.n	8004cda <_printf_common+0x3e>
 8004d4c:	18e1      	adds	r1, r4, r3
 8004d4e:	1c5a      	adds	r2, r3, #1
 8004d50:	2030      	movs	r0, #48	; 0x30
 8004d52:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d56:	4422      	add	r2, r4
 8004d58:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d5c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d60:	3302      	adds	r3, #2
 8004d62:	e7c7      	b.n	8004cf4 <_printf_common+0x58>
 8004d64:	2301      	movs	r3, #1
 8004d66:	4622      	mov	r2, r4
 8004d68:	4649      	mov	r1, r9
 8004d6a:	4638      	mov	r0, r7
 8004d6c:	47c0      	blx	r8
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d0e6      	beq.n	8004d40 <_printf_common+0xa4>
 8004d72:	3601      	adds	r6, #1
 8004d74:	e7d9      	b.n	8004d2a <_printf_common+0x8e>
	...

08004d78 <_printf_i>:
 8004d78:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7c:	7e0f      	ldrb	r7, [r1, #24]
 8004d7e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d80:	2f78      	cmp	r7, #120	; 0x78
 8004d82:	4691      	mov	r9, r2
 8004d84:	4680      	mov	r8, r0
 8004d86:	460c      	mov	r4, r1
 8004d88:	469a      	mov	sl, r3
 8004d8a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d8e:	d807      	bhi.n	8004da0 <_printf_i+0x28>
 8004d90:	2f62      	cmp	r7, #98	; 0x62
 8004d92:	d80a      	bhi.n	8004daa <_printf_i+0x32>
 8004d94:	2f00      	cmp	r7, #0
 8004d96:	f000 80d8 	beq.w	8004f4a <_printf_i+0x1d2>
 8004d9a:	2f58      	cmp	r7, #88	; 0x58
 8004d9c:	f000 80a3 	beq.w	8004ee6 <_printf_i+0x16e>
 8004da0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004da4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004da8:	e03a      	b.n	8004e20 <_printf_i+0xa8>
 8004daa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004dae:	2b15      	cmp	r3, #21
 8004db0:	d8f6      	bhi.n	8004da0 <_printf_i+0x28>
 8004db2:	a101      	add	r1, pc, #4	; (adr r1, 8004db8 <_printf_i+0x40>)
 8004db4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004db8:	08004e11 	.word	0x08004e11
 8004dbc:	08004e25 	.word	0x08004e25
 8004dc0:	08004da1 	.word	0x08004da1
 8004dc4:	08004da1 	.word	0x08004da1
 8004dc8:	08004da1 	.word	0x08004da1
 8004dcc:	08004da1 	.word	0x08004da1
 8004dd0:	08004e25 	.word	0x08004e25
 8004dd4:	08004da1 	.word	0x08004da1
 8004dd8:	08004da1 	.word	0x08004da1
 8004ddc:	08004da1 	.word	0x08004da1
 8004de0:	08004da1 	.word	0x08004da1
 8004de4:	08004f31 	.word	0x08004f31
 8004de8:	08004e55 	.word	0x08004e55
 8004dec:	08004f13 	.word	0x08004f13
 8004df0:	08004da1 	.word	0x08004da1
 8004df4:	08004da1 	.word	0x08004da1
 8004df8:	08004f53 	.word	0x08004f53
 8004dfc:	08004da1 	.word	0x08004da1
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004da1 	.word	0x08004da1
 8004e08:	08004da1 	.word	0x08004da1
 8004e0c:	08004f1b 	.word	0x08004f1b
 8004e10:	682b      	ldr	r3, [r5, #0]
 8004e12:	1d1a      	adds	r2, r3, #4
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	602a      	str	r2, [r5, #0]
 8004e18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e1c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e20:	2301      	movs	r3, #1
 8004e22:	e0a3      	b.n	8004f6c <_printf_i+0x1f4>
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	6829      	ldr	r1, [r5, #0]
 8004e28:	0606      	lsls	r6, r0, #24
 8004e2a:	f101 0304 	add.w	r3, r1, #4
 8004e2e:	d50a      	bpl.n	8004e46 <_printf_i+0xce>
 8004e30:	680e      	ldr	r6, [r1, #0]
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	2e00      	cmp	r6, #0
 8004e36:	da03      	bge.n	8004e40 <_printf_i+0xc8>
 8004e38:	232d      	movs	r3, #45	; 0x2d
 8004e3a:	4276      	negs	r6, r6
 8004e3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e40:	485e      	ldr	r0, [pc, #376]	; (8004fbc <_printf_i+0x244>)
 8004e42:	230a      	movs	r3, #10
 8004e44:	e019      	b.n	8004e7a <_printf_i+0x102>
 8004e46:	680e      	ldr	r6, [r1, #0]
 8004e48:	602b      	str	r3, [r5, #0]
 8004e4a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004e4e:	bf18      	it	ne
 8004e50:	b236      	sxthne	r6, r6
 8004e52:	e7ef      	b.n	8004e34 <_printf_i+0xbc>
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	6820      	ldr	r0, [r4, #0]
 8004e58:	1d19      	adds	r1, r3, #4
 8004e5a:	6029      	str	r1, [r5, #0]
 8004e5c:	0601      	lsls	r1, r0, #24
 8004e5e:	d501      	bpl.n	8004e64 <_printf_i+0xec>
 8004e60:	681e      	ldr	r6, [r3, #0]
 8004e62:	e002      	b.n	8004e6a <_printf_i+0xf2>
 8004e64:	0646      	lsls	r6, r0, #25
 8004e66:	d5fb      	bpl.n	8004e60 <_printf_i+0xe8>
 8004e68:	881e      	ldrh	r6, [r3, #0]
 8004e6a:	4854      	ldr	r0, [pc, #336]	; (8004fbc <_printf_i+0x244>)
 8004e6c:	2f6f      	cmp	r7, #111	; 0x6f
 8004e6e:	bf0c      	ite	eq
 8004e70:	2308      	moveq	r3, #8
 8004e72:	230a      	movne	r3, #10
 8004e74:	2100      	movs	r1, #0
 8004e76:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e7a:	6865      	ldr	r5, [r4, #4]
 8004e7c:	60a5      	str	r5, [r4, #8]
 8004e7e:	2d00      	cmp	r5, #0
 8004e80:	bfa2      	ittt	ge
 8004e82:	6821      	ldrge	r1, [r4, #0]
 8004e84:	f021 0104 	bicge.w	r1, r1, #4
 8004e88:	6021      	strge	r1, [r4, #0]
 8004e8a:	b90e      	cbnz	r6, 8004e90 <_printf_i+0x118>
 8004e8c:	2d00      	cmp	r5, #0
 8004e8e:	d04d      	beq.n	8004f2c <_printf_i+0x1b4>
 8004e90:	4615      	mov	r5, r2
 8004e92:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e96:	fb03 6711 	mls	r7, r3, r1, r6
 8004e9a:	5dc7      	ldrb	r7, [r0, r7]
 8004e9c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004ea0:	4637      	mov	r7, r6
 8004ea2:	42bb      	cmp	r3, r7
 8004ea4:	460e      	mov	r6, r1
 8004ea6:	d9f4      	bls.n	8004e92 <_printf_i+0x11a>
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d10b      	bne.n	8004ec4 <_printf_i+0x14c>
 8004eac:	6823      	ldr	r3, [r4, #0]
 8004eae:	07de      	lsls	r6, r3, #31
 8004eb0:	d508      	bpl.n	8004ec4 <_printf_i+0x14c>
 8004eb2:	6923      	ldr	r3, [r4, #16]
 8004eb4:	6861      	ldr	r1, [r4, #4]
 8004eb6:	4299      	cmp	r1, r3
 8004eb8:	bfde      	ittt	le
 8004eba:	2330      	movle	r3, #48	; 0x30
 8004ebc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ec0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004ec4:	1b52      	subs	r2, r2, r5
 8004ec6:	6122      	str	r2, [r4, #16]
 8004ec8:	f8cd a000 	str.w	sl, [sp]
 8004ecc:	464b      	mov	r3, r9
 8004ece:	aa03      	add	r2, sp, #12
 8004ed0:	4621      	mov	r1, r4
 8004ed2:	4640      	mov	r0, r8
 8004ed4:	f7ff fee2 	bl	8004c9c <_printf_common>
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d14c      	bne.n	8004f76 <_printf_i+0x1fe>
 8004edc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004ee0:	b004      	add	sp, #16
 8004ee2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ee6:	4835      	ldr	r0, [pc, #212]	; (8004fbc <_printf_i+0x244>)
 8004ee8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004eec:	6829      	ldr	r1, [r5, #0]
 8004eee:	6823      	ldr	r3, [r4, #0]
 8004ef0:	f851 6b04 	ldr.w	r6, [r1], #4
 8004ef4:	6029      	str	r1, [r5, #0]
 8004ef6:	061d      	lsls	r5, r3, #24
 8004ef8:	d514      	bpl.n	8004f24 <_printf_i+0x1ac>
 8004efa:	07df      	lsls	r7, r3, #31
 8004efc:	bf44      	itt	mi
 8004efe:	f043 0320 	orrmi.w	r3, r3, #32
 8004f02:	6023      	strmi	r3, [r4, #0]
 8004f04:	b91e      	cbnz	r6, 8004f0e <_printf_i+0x196>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	f023 0320 	bic.w	r3, r3, #32
 8004f0c:	6023      	str	r3, [r4, #0]
 8004f0e:	2310      	movs	r3, #16
 8004f10:	e7b0      	b.n	8004e74 <_printf_i+0xfc>
 8004f12:	6823      	ldr	r3, [r4, #0]
 8004f14:	f043 0320 	orr.w	r3, r3, #32
 8004f18:	6023      	str	r3, [r4, #0]
 8004f1a:	2378      	movs	r3, #120	; 0x78
 8004f1c:	4828      	ldr	r0, [pc, #160]	; (8004fc0 <_printf_i+0x248>)
 8004f1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004f22:	e7e3      	b.n	8004eec <_printf_i+0x174>
 8004f24:	0659      	lsls	r1, r3, #25
 8004f26:	bf48      	it	mi
 8004f28:	b2b6      	uxthmi	r6, r6
 8004f2a:	e7e6      	b.n	8004efa <_printf_i+0x182>
 8004f2c:	4615      	mov	r5, r2
 8004f2e:	e7bb      	b.n	8004ea8 <_printf_i+0x130>
 8004f30:	682b      	ldr	r3, [r5, #0]
 8004f32:	6826      	ldr	r6, [r4, #0]
 8004f34:	6961      	ldr	r1, [r4, #20]
 8004f36:	1d18      	adds	r0, r3, #4
 8004f38:	6028      	str	r0, [r5, #0]
 8004f3a:	0635      	lsls	r5, r6, #24
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	d501      	bpl.n	8004f44 <_printf_i+0x1cc>
 8004f40:	6019      	str	r1, [r3, #0]
 8004f42:	e002      	b.n	8004f4a <_printf_i+0x1d2>
 8004f44:	0670      	lsls	r0, r6, #25
 8004f46:	d5fb      	bpl.n	8004f40 <_printf_i+0x1c8>
 8004f48:	8019      	strh	r1, [r3, #0]
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	6123      	str	r3, [r4, #16]
 8004f4e:	4615      	mov	r5, r2
 8004f50:	e7ba      	b.n	8004ec8 <_printf_i+0x150>
 8004f52:	682b      	ldr	r3, [r5, #0]
 8004f54:	1d1a      	adds	r2, r3, #4
 8004f56:	602a      	str	r2, [r5, #0]
 8004f58:	681d      	ldr	r5, [r3, #0]
 8004f5a:	6862      	ldr	r2, [r4, #4]
 8004f5c:	2100      	movs	r1, #0
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f7fb f94e 	bl	8000200 <memchr>
 8004f64:	b108      	cbz	r0, 8004f6a <_printf_i+0x1f2>
 8004f66:	1b40      	subs	r0, r0, r5
 8004f68:	6060      	str	r0, [r4, #4]
 8004f6a:	6863      	ldr	r3, [r4, #4]
 8004f6c:	6123      	str	r3, [r4, #16]
 8004f6e:	2300      	movs	r3, #0
 8004f70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f74:	e7a8      	b.n	8004ec8 <_printf_i+0x150>
 8004f76:	6923      	ldr	r3, [r4, #16]
 8004f78:	462a      	mov	r2, r5
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	4640      	mov	r0, r8
 8004f7e:	47d0      	blx	sl
 8004f80:	3001      	adds	r0, #1
 8004f82:	d0ab      	beq.n	8004edc <_printf_i+0x164>
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	079b      	lsls	r3, r3, #30
 8004f88:	d413      	bmi.n	8004fb2 <_printf_i+0x23a>
 8004f8a:	68e0      	ldr	r0, [r4, #12]
 8004f8c:	9b03      	ldr	r3, [sp, #12]
 8004f8e:	4298      	cmp	r0, r3
 8004f90:	bfb8      	it	lt
 8004f92:	4618      	movlt	r0, r3
 8004f94:	e7a4      	b.n	8004ee0 <_printf_i+0x168>
 8004f96:	2301      	movs	r3, #1
 8004f98:	4632      	mov	r2, r6
 8004f9a:	4649      	mov	r1, r9
 8004f9c:	4640      	mov	r0, r8
 8004f9e:	47d0      	blx	sl
 8004fa0:	3001      	adds	r0, #1
 8004fa2:	d09b      	beq.n	8004edc <_printf_i+0x164>
 8004fa4:	3501      	adds	r5, #1
 8004fa6:	68e3      	ldr	r3, [r4, #12]
 8004fa8:	9903      	ldr	r1, [sp, #12]
 8004faa:	1a5b      	subs	r3, r3, r1
 8004fac:	42ab      	cmp	r3, r5
 8004fae:	dcf2      	bgt.n	8004f96 <_printf_i+0x21e>
 8004fb0:	e7eb      	b.n	8004f8a <_printf_i+0x212>
 8004fb2:	2500      	movs	r5, #0
 8004fb4:	f104 0619 	add.w	r6, r4, #25
 8004fb8:	e7f5      	b.n	8004fa6 <_printf_i+0x22e>
 8004fba:	bf00      	nop
 8004fbc:	080076b6 	.word	0x080076b6
 8004fc0:	080076c7 	.word	0x080076c7

08004fc4 <iprintf>:
 8004fc4:	b40f      	push	{r0, r1, r2, r3}
 8004fc6:	4b0a      	ldr	r3, [pc, #40]	; (8004ff0 <iprintf+0x2c>)
 8004fc8:	b513      	push	{r0, r1, r4, lr}
 8004fca:	681c      	ldr	r4, [r3, #0]
 8004fcc:	b124      	cbz	r4, 8004fd8 <iprintf+0x14>
 8004fce:	69a3      	ldr	r3, [r4, #24]
 8004fd0:	b913      	cbnz	r3, 8004fd8 <iprintf+0x14>
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	f001 f8f8 	bl	80061c8 <__sinit>
 8004fd8:	ab05      	add	r3, sp, #20
 8004fda:	9a04      	ldr	r2, [sp, #16]
 8004fdc:	68a1      	ldr	r1, [r4, #8]
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f002 f803 	bl	8006fec <_vfiprintf_r>
 8004fe6:	b002      	add	sp, #8
 8004fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004fec:	b004      	add	sp, #16
 8004fee:	4770      	bx	lr
 8004ff0:	20000010 	.word	0x20000010

08004ff4 <_puts_r>:
 8004ff4:	b570      	push	{r4, r5, r6, lr}
 8004ff6:	460e      	mov	r6, r1
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	b118      	cbz	r0, 8005004 <_puts_r+0x10>
 8004ffc:	6983      	ldr	r3, [r0, #24]
 8004ffe:	b90b      	cbnz	r3, 8005004 <_puts_r+0x10>
 8005000:	f001 f8e2 	bl	80061c8 <__sinit>
 8005004:	69ab      	ldr	r3, [r5, #24]
 8005006:	68ac      	ldr	r4, [r5, #8]
 8005008:	b913      	cbnz	r3, 8005010 <_puts_r+0x1c>
 800500a:	4628      	mov	r0, r5
 800500c:	f001 f8dc 	bl	80061c8 <__sinit>
 8005010:	4b2c      	ldr	r3, [pc, #176]	; (80050c4 <_puts_r+0xd0>)
 8005012:	429c      	cmp	r4, r3
 8005014:	d120      	bne.n	8005058 <_puts_r+0x64>
 8005016:	686c      	ldr	r4, [r5, #4]
 8005018:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800501a:	07db      	lsls	r3, r3, #31
 800501c:	d405      	bmi.n	800502a <_puts_r+0x36>
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	0598      	lsls	r0, r3, #22
 8005022:	d402      	bmi.n	800502a <_puts_r+0x36>
 8005024:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005026:	f001 f972 	bl	800630e <__retarget_lock_acquire_recursive>
 800502a:	89a3      	ldrh	r3, [r4, #12]
 800502c:	0719      	lsls	r1, r3, #28
 800502e:	d51d      	bpl.n	800506c <_puts_r+0x78>
 8005030:	6923      	ldr	r3, [r4, #16]
 8005032:	b1db      	cbz	r3, 800506c <_puts_r+0x78>
 8005034:	3e01      	subs	r6, #1
 8005036:	68a3      	ldr	r3, [r4, #8]
 8005038:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800503c:	3b01      	subs	r3, #1
 800503e:	60a3      	str	r3, [r4, #8]
 8005040:	bb39      	cbnz	r1, 8005092 <_puts_r+0x9e>
 8005042:	2b00      	cmp	r3, #0
 8005044:	da38      	bge.n	80050b8 <_puts_r+0xc4>
 8005046:	4622      	mov	r2, r4
 8005048:	210a      	movs	r1, #10
 800504a:	4628      	mov	r0, r5
 800504c:	f000 f868 	bl	8005120 <__swbuf_r>
 8005050:	3001      	adds	r0, #1
 8005052:	d011      	beq.n	8005078 <_puts_r+0x84>
 8005054:	250a      	movs	r5, #10
 8005056:	e011      	b.n	800507c <_puts_r+0x88>
 8005058:	4b1b      	ldr	r3, [pc, #108]	; (80050c8 <_puts_r+0xd4>)
 800505a:	429c      	cmp	r4, r3
 800505c:	d101      	bne.n	8005062 <_puts_r+0x6e>
 800505e:	68ac      	ldr	r4, [r5, #8]
 8005060:	e7da      	b.n	8005018 <_puts_r+0x24>
 8005062:	4b1a      	ldr	r3, [pc, #104]	; (80050cc <_puts_r+0xd8>)
 8005064:	429c      	cmp	r4, r3
 8005066:	bf08      	it	eq
 8005068:	68ec      	ldreq	r4, [r5, #12]
 800506a:	e7d5      	b.n	8005018 <_puts_r+0x24>
 800506c:	4621      	mov	r1, r4
 800506e:	4628      	mov	r0, r5
 8005070:	f000 f8a8 	bl	80051c4 <__swsetup_r>
 8005074:	2800      	cmp	r0, #0
 8005076:	d0dd      	beq.n	8005034 <_puts_r+0x40>
 8005078:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 800507c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800507e:	07da      	lsls	r2, r3, #31
 8005080:	d405      	bmi.n	800508e <_puts_r+0x9a>
 8005082:	89a3      	ldrh	r3, [r4, #12]
 8005084:	059b      	lsls	r3, r3, #22
 8005086:	d402      	bmi.n	800508e <_puts_r+0x9a>
 8005088:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800508a:	f001 f941 	bl	8006310 <__retarget_lock_release_recursive>
 800508e:	4628      	mov	r0, r5
 8005090:	bd70      	pop	{r4, r5, r6, pc}
 8005092:	2b00      	cmp	r3, #0
 8005094:	da04      	bge.n	80050a0 <_puts_r+0xac>
 8005096:	69a2      	ldr	r2, [r4, #24]
 8005098:	429a      	cmp	r2, r3
 800509a:	dc06      	bgt.n	80050aa <_puts_r+0xb6>
 800509c:	290a      	cmp	r1, #10
 800509e:	d004      	beq.n	80050aa <_puts_r+0xb6>
 80050a0:	6823      	ldr	r3, [r4, #0]
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	6022      	str	r2, [r4, #0]
 80050a6:	7019      	strb	r1, [r3, #0]
 80050a8:	e7c5      	b.n	8005036 <_puts_r+0x42>
 80050aa:	4622      	mov	r2, r4
 80050ac:	4628      	mov	r0, r5
 80050ae:	f000 f837 	bl	8005120 <__swbuf_r>
 80050b2:	3001      	adds	r0, #1
 80050b4:	d1bf      	bne.n	8005036 <_puts_r+0x42>
 80050b6:	e7df      	b.n	8005078 <_puts_r+0x84>
 80050b8:	6823      	ldr	r3, [r4, #0]
 80050ba:	250a      	movs	r5, #10
 80050bc:	1c5a      	adds	r2, r3, #1
 80050be:	6022      	str	r2, [r4, #0]
 80050c0:	701d      	strb	r5, [r3, #0]
 80050c2:	e7db      	b.n	800507c <_puts_r+0x88>
 80050c4:	08007788 	.word	0x08007788
 80050c8:	080077a8 	.word	0x080077a8
 80050cc:	08007768 	.word	0x08007768

080050d0 <puts>:
 80050d0:	4b02      	ldr	r3, [pc, #8]	; (80050dc <puts+0xc>)
 80050d2:	4601      	mov	r1, r0
 80050d4:	6818      	ldr	r0, [r3, #0]
 80050d6:	f7ff bf8d 	b.w	8004ff4 <_puts_r>
 80050da:	bf00      	nop
 80050dc:	20000010 	.word	0x20000010

080050e0 <siprintf>:
 80050e0:	b40e      	push	{r1, r2, r3}
 80050e2:	b500      	push	{lr}
 80050e4:	b09c      	sub	sp, #112	; 0x70
 80050e6:	ab1d      	add	r3, sp, #116	; 0x74
 80050e8:	9002      	str	r0, [sp, #8]
 80050ea:	9006      	str	r0, [sp, #24]
 80050ec:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80050f0:	4809      	ldr	r0, [pc, #36]	; (8005118 <siprintf+0x38>)
 80050f2:	9107      	str	r1, [sp, #28]
 80050f4:	9104      	str	r1, [sp, #16]
 80050f6:	4909      	ldr	r1, [pc, #36]	; (800511c <siprintf+0x3c>)
 80050f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80050fc:	9105      	str	r1, [sp, #20]
 80050fe:	6800      	ldr	r0, [r0, #0]
 8005100:	9301      	str	r3, [sp, #4]
 8005102:	a902      	add	r1, sp, #8
 8005104:	f001 fe48 	bl	8006d98 <_svfiprintf_r>
 8005108:	9b02      	ldr	r3, [sp, #8]
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
 800510e:	b01c      	add	sp, #112	; 0x70
 8005110:	f85d eb04 	ldr.w	lr, [sp], #4
 8005114:	b003      	add	sp, #12
 8005116:	4770      	bx	lr
 8005118:	20000010 	.word	0x20000010
 800511c:	ffff0208 	.word	0xffff0208

08005120 <__swbuf_r>:
 8005120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005122:	460e      	mov	r6, r1
 8005124:	4614      	mov	r4, r2
 8005126:	4605      	mov	r5, r0
 8005128:	b118      	cbz	r0, 8005132 <__swbuf_r+0x12>
 800512a:	6983      	ldr	r3, [r0, #24]
 800512c:	b90b      	cbnz	r3, 8005132 <__swbuf_r+0x12>
 800512e:	f001 f84b 	bl	80061c8 <__sinit>
 8005132:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <__swbuf_r+0x98>)
 8005134:	429c      	cmp	r4, r3
 8005136:	d12b      	bne.n	8005190 <__swbuf_r+0x70>
 8005138:	686c      	ldr	r4, [r5, #4]
 800513a:	69a3      	ldr	r3, [r4, #24]
 800513c:	60a3      	str	r3, [r4, #8]
 800513e:	89a3      	ldrh	r3, [r4, #12]
 8005140:	071a      	lsls	r2, r3, #28
 8005142:	d52f      	bpl.n	80051a4 <__swbuf_r+0x84>
 8005144:	6923      	ldr	r3, [r4, #16]
 8005146:	b36b      	cbz	r3, 80051a4 <__swbuf_r+0x84>
 8005148:	6923      	ldr	r3, [r4, #16]
 800514a:	6820      	ldr	r0, [r4, #0]
 800514c:	1ac0      	subs	r0, r0, r3
 800514e:	6963      	ldr	r3, [r4, #20]
 8005150:	b2f6      	uxtb	r6, r6
 8005152:	4283      	cmp	r3, r0
 8005154:	4637      	mov	r7, r6
 8005156:	dc04      	bgt.n	8005162 <__swbuf_r+0x42>
 8005158:	4621      	mov	r1, r4
 800515a:	4628      	mov	r0, r5
 800515c:	f000 ffa0 	bl	80060a0 <_fflush_r>
 8005160:	bb30      	cbnz	r0, 80051b0 <__swbuf_r+0x90>
 8005162:	68a3      	ldr	r3, [r4, #8]
 8005164:	3b01      	subs	r3, #1
 8005166:	60a3      	str	r3, [r4, #8]
 8005168:	6823      	ldr	r3, [r4, #0]
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	6022      	str	r2, [r4, #0]
 800516e:	701e      	strb	r6, [r3, #0]
 8005170:	6963      	ldr	r3, [r4, #20]
 8005172:	3001      	adds	r0, #1
 8005174:	4283      	cmp	r3, r0
 8005176:	d004      	beq.n	8005182 <__swbuf_r+0x62>
 8005178:	89a3      	ldrh	r3, [r4, #12]
 800517a:	07db      	lsls	r3, r3, #31
 800517c:	d506      	bpl.n	800518c <__swbuf_r+0x6c>
 800517e:	2e0a      	cmp	r6, #10
 8005180:	d104      	bne.n	800518c <__swbuf_r+0x6c>
 8005182:	4621      	mov	r1, r4
 8005184:	4628      	mov	r0, r5
 8005186:	f000 ff8b 	bl	80060a0 <_fflush_r>
 800518a:	b988      	cbnz	r0, 80051b0 <__swbuf_r+0x90>
 800518c:	4638      	mov	r0, r7
 800518e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005190:	4b0a      	ldr	r3, [pc, #40]	; (80051bc <__swbuf_r+0x9c>)
 8005192:	429c      	cmp	r4, r3
 8005194:	d101      	bne.n	800519a <__swbuf_r+0x7a>
 8005196:	68ac      	ldr	r4, [r5, #8]
 8005198:	e7cf      	b.n	800513a <__swbuf_r+0x1a>
 800519a:	4b09      	ldr	r3, [pc, #36]	; (80051c0 <__swbuf_r+0xa0>)
 800519c:	429c      	cmp	r4, r3
 800519e:	bf08      	it	eq
 80051a0:	68ec      	ldreq	r4, [r5, #12]
 80051a2:	e7ca      	b.n	800513a <__swbuf_r+0x1a>
 80051a4:	4621      	mov	r1, r4
 80051a6:	4628      	mov	r0, r5
 80051a8:	f000 f80c 	bl	80051c4 <__swsetup_r>
 80051ac:	2800      	cmp	r0, #0
 80051ae:	d0cb      	beq.n	8005148 <__swbuf_r+0x28>
 80051b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80051b4:	e7ea      	b.n	800518c <__swbuf_r+0x6c>
 80051b6:	bf00      	nop
 80051b8:	08007788 	.word	0x08007788
 80051bc:	080077a8 	.word	0x080077a8
 80051c0:	08007768 	.word	0x08007768

080051c4 <__swsetup_r>:
 80051c4:	4b32      	ldr	r3, [pc, #200]	; (8005290 <__swsetup_r+0xcc>)
 80051c6:	b570      	push	{r4, r5, r6, lr}
 80051c8:	681d      	ldr	r5, [r3, #0]
 80051ca:	4606      	mov	r6, r0
 80051cc:	460c      	mov	r4, r1
 80051ce:	b125      	cbz	r5, 80051da <__swsetup_r+0x16>
 80051d0:	69ab      	ldr	r3, [r5, #24]
 80051d2:	b913      	cbnz	r3, 80051da <__swsetup_r+0x16>
 80051d4:	4628      	mov	r0, r5
 80051d6:	f000 fff7 	bl	80061c8 <__sinit>
 80051da:	4b2e      	ldr	r3, [pc, #184]	; (8005294 <__swsetup_r+0xd0>)
 80051dc:	429c      	cmp	r4, r3
 80051de:	d10f      	bne.n	8005200 <__swsetup_r+0x3c>
 80051e0:	686c      	ldr	r4, [r5, #4]
 80051e2:	89a3      	ldrh	r3, [r4, #12]
 80051e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80051e8:	0719      	lsls	r1, r3, #28
 80051ea:	d42c      	bmi.n	8005246 <__swsetup_r+0x82>
 80051ec:	06dd      	lsls	r5, r3, #27
 80051ee:	d411      	bmi.n	8005214 <__swsetup_r+0x50>
 80051f0:	2309      	movs	r3, #9
 80051f2:	6033      	str	r3, [r6, #0]
 80051f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80051f8:	81a3      	strh	r3, [r4, #12]
 80051fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80051fe:	e03e      	b.n	800527e <__swsetup_r+0xba>
 8005200:	4b25      	ldr	r3, [pc, #148]	; (8005298 <__swsetup_r+0xd4>)
 8005202:	429c      	cmp	r4, r3
 8005204:	d101      	bne.n	800520a <__swsetup_r+0x46>
 8005206:	68ac      	ldr	r4, [r5, #8]
 8005208:	e7eb      	b.n	80051e2 <__swsetup_r+0x1e>
 800520a:	4b24      	ldr	r3, [pc, #144]	; (800529c <__swsetup_r+0xd8>)
 800520c:	429c      	cmp	r4, r3
 800520e:	bf08      	it	eq
 8005210:	68ec      	ldreq	r4, [r5, #12]
 8005212:	e7e6      	b.n	80051e2 <__swsetup_r+0x1e>
 8005214:	0758      	lsls	r0, r3, #29
 8005216:	d512      	bpl.n	800523e <__swsetup_r+0x7a>
 8005218:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800521a:	b141      	cbz	r1, 800522e <__swsetup_r+0x6a>
 800521c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005220:	4299      	cmp	r1, r3
 8005222:	d002      	beq.n	800522a <__swsetup_r+0x66>
 8005224:	4630      	mov	r0, r6
 8005226:	f001 fc7b 	bl	8006b20 <_free_r>
 800522a:	2300      	movs	r3, #0
 800522c:	6363      	str	r3, [r4, #52]	; 0x34
 800522e:	89a3      	ldrh	r3, [r4, #12]
 8005230:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005234:	81a3      	strh	r3, [r4, #12]
 8005236:	2300      	movs	r3, #0
 8005238:	6063      	str	r3, [r4, #4]
 800523a:	6923      	ldr	r3, [r4, #16]
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	89a3      	ldrh	r3, [r4, #12]
 8005240:	f043 0308 	orr.w	r3, r3, #8
 8005244:	81a3      	strh	r3, [r4, #12]
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	b94b      	cbnz	r3, 800525e <__swsetup_r+0x9a>
 800524a:	89a3      	ldrh	r3, [r4, #12]
 800524c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005250:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005254:	d003      	beq.n	800525e <__swsetup_r+0x9a>
 8005256:	4621      	mov	r1, r4
 8005258:	4630      	mov	r0, r6
 800525a:	f001 f87f 	bl	800635c <__smakebuf_r>
 800525e:	89a0      	ldrh	r0, [r4, #12]
 8005260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005264:	f010 0301 	ands.w	r3, r0, #1
 8005268:	d00a      	beq.n	8005280 <__swsetup_r+0xbc>
 800526a:	2300      	movs	r3, #0
 800526c:	60a3      	str	r3, [r4, #8]
 800526e:	6963      	ldr	r3, [r4, #20]
 8005270:	425b      	negs	r3, r3
 8005272:	61a3      	str	r3, [r4, #24]
 8005274:	6923      	ldr	r3, [r4, #16]
 8005276:	b943      	cbnz	r3, 800528a <__swsetup_r+0xc6>
 8005278:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800527c:	d1ba      	bne.n	80051f4 <__swsetup_r+0x30>
 800527e:	bd70      	pop	{r4, r5, r6, pc}
 8005280:	0781      	lsls	r1, r0, #30
 8005282:	bf58      	it	pl
 8005284:	6963      	ldrpl	r3, [r4, #20]
 8005286:	60a3      	str	r3, [r4, #8]
 8005288:	e7f4      	b.n	8005274 <__swsetup_r+0xb0>
 800528a:	2000      	movs	r0, #0
 800528c:	e7f7      	b.n	800527e <__swsetup_r+0xba>
 800528e:	bf00      	nop
 8005290:	20000010 	.word	0x20000010
 8005294:	08007788 	.word	0x08007788
 8005298:	080077a8 	.word	0x080077a8
 800529c:	08007768 	.word	0x08007768

080052a0 <quorem>:
 80052a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052a4:	6903      	ldr	r3, [r0, #16]
 80052a6:	690c      	ldr	r4, [r1, #16]
 80052a8:	42a3      	cmp	r3, r4
 80052aa:	4607      	mov	r7, r0
 80052ac:	f2c0 8081 	blt.w	80053b2 <quorem+0x112>
 80052b0:	3c01      	subs	r4, #1
 80052b2:	f101 0814 	add.w	r8, r1, #20
 80052b6:	f100 0514 	add.w	r5, r0, #20
 80052ba:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80052be:	9301      	str	r3, [sp, #4]
 80052c0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80052c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80052c8:	3301      	adds	r3, #1
 80052ca:	429a      	cmp	r2, r3
 80052cc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80052d0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80052d4:	fbb2 f6f3 	udiv	r6, r2, r3
 80052d8:	d331      	bcc.n	800533e <quorem+0x9e>
 80052da:	f04f 0e00 	mov.w	lr, #0
 80052de:	4640      	mov	r0, r8
 80052e0:	46ac      	mov	ip, r5
 80052e2:	46f2      	mov	sl, lr
 80052e4:	f850 2b04 	ldr.w	r2, [r0], #4
 80052e8:	b293      	uxth	r3, r2
 80052ea:	fb06 e303 	mla	r3, r6, r3, lr
 80052ee:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	ebaa 0303 	sub.w	r3, sl, r3
 80052f8:	f8dc a000 	ldr.w	sl, [ip]
 80052fc:	0c12      	lsrs	r2, r2, #16
 80052fe:	fa13 f38a 	uxtah	r3, r3, sl
 8005302:	fb06 e202 	mla	r2, r6, r2, lr
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	9b00      	ldr	r3, [sp, #0]
 800530a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800530e:	b292      	uxth	r2, r2
 8005310:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005314:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005318:	f8bd 3000 	ldrh.w	r3, [sp]
 800531c:	4581      	cmp	r9, r0
 800531e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005322:	f84c 3b04 	str.w	r3, [ip], #4
 8005326:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800532a:	d2db      	bcs.n	80052e4 <quorem+0x44>
 800532c:	f855 300b 	ldr.w	r3, [r5, fp]
 8005330:	b92b      	cbnz	r3, 800533e <quorem+0x9e>
 8005332:	9b01      	ldr	r3, [sp, #4]
 8005334:	3b04      	subs	r3, #4
 8005336:	429d      	cmp	r5, r3
 8005338:	461a      	mov	r2, r3
 800533a:	d32e      	bcc.n	800539a <quorem+0xfa>
 800533c:	613c      	str	r4, [r7, #16]
 800533e:	4638      	mov	r0, r7
 8005340:	f001 fad6 	bl	80068f0 <__mcmp>
 8005344:	2800      	cmp	r0, #0
 8005346:	db24      	blt.n	8005392 <quorem+0xf2>
 8005348:	3601      	adds	r6, #1
 800534a:	4628      	mov	r0, r5
 800534c:	f04f 0c00 	mov.w	ip, #0
 8005350:	f858 2b04 	ldr.w	r2, [r8], #4
 8005354:	f8d0 e000 	ldr.w	lr, [r0]
 8005358:	b293      	uxth	r3, r2
 800535a:	ebac 0303 	sub.w	r3, ip, r3
 800535e:	0c12      	lsrs	r2, r2, #16
 8005360:	fa13 f38e 	uxtah	r3, r3, lr
 8005364:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005368:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800536c:	b29b      	uxth	r3, r3
 800536e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005372:	45c1      	cmp	r9, r8
 8005374:	f840 3b04 	str.w	r3, [r0], #4
 8005378:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800537c:	d2e8      	bcs.n	8005350 <quorem+0xb0>
 800537e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005382:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005386:	b922      	cbnz	r2, 8005392 <quorem+0xf2>
 8005388:	3b04      	subs	r3, #4
 800538a:	429d      	cmp	r5, r3
 800538c:	461a      	mov	r2, r3
 800538e:	d30a      	bcc.n	80053a6 <quorem+0x106>
 8005390:	613c      	str	r4, [r7, #16]
 8005392:	4630      	mov	r0, r6
 8005394:	b003      	add	sp, #12
 8005396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	3b04      	subs	r3, #4
 800539e:	2a00      	cmp	r2, #0
 80053a0:	d1cc      	bne.n	800533c <quorem+0x9c>
 80053a2:	3c01      	subs	r4, #1
 80053a4:	e7c7      	b.n	8005336 <quorem+0x96>
 80053a6:	6812      	ldr	r2, [r2, #0]
 80053a8:	3b04      	subs	r3, #4
 80053aa:	2a00      	cmp	r2, #0
 80053ac:	d1f0      	bne.n	8005390 <quorem+0xf0>
 80053ae:	3c01      	subs	r4, #1
 80053b0:	e7eb      	b.n	800538a <quorem+0xea>
 80053b2:	2000      	movs	r0, #0
 80053b4:	e7ee      	b.n	8005394 <quorem+0xf4>
	...

080053b8 <_dtoa_r>:
 80053b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053bc:	ed2d 8b04 	vpush	{d8-d9}
 80053c0:	ec57 6b10 	vmov	r6, r7, d0
 80053c4:	b093      	sub	sp, #76	; 0x4c
 80053c6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80053c8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80053cc:	9106      	str	r1, [sp, #24]
 80053ce:	ee10 aa10 	vmov	sl, s0
 80053d2:	4604      	mov	r4, r0
 80053d4:	9209      	str	r2, [sp, #36]	; 0x24
 80053d6:	930c      	str	r3, [sp, #48]	; 0x30
 80053d8:	46bb      	mov	fp, r7
 80053da:	b975      	cbnz	r5, 80053fa <_dtoa_r+0x42>
 80053dc:	2010      	movs	r0, #16
 80053de:	f000 fffd 	bl	80063dc <malloc>
 80053e2:	4602      	mov	r2, r0
 80053e4:	6260      	str	r0, [r4, #36]	; 0x24
 80053e6:	b920      	cbnz	r0, 80053f2 <_dtoa_r+0x3a>
 80053e8:	4ba7      	ldr	r3, [pc, #668]	; (8005688 <_dtoa_r+0x2d0>)
 80053ea:	21ea      	movs	r1, #234	; 0xea
 80053ec:	48a7      	ldr	r0, [pc, #668]	; (800568c <_dtoa_r+0x2d4>)
 80053ee:	f001 ff93 	bl	8007318 <__assert_func>
 80053f2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80053f6:	6005      	str	r5, [r0, #0]
 80053f8:	60c5      	str	r5, [r0, #12]
 80053fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80053fc:	6819      	ldr	r1, [r3, #0]
 80053fe:	b151      	cbz	r1, 8005416 <_dtoa_r+0x5e>
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	604a      	str	r2, [r1, #4]
 8005404:	2301      	movs	r3, #1
 8005406:	4093      	lsls	r3, r2
 8005408:	608b      	str	r3, [r1, #8]
 800540a:	4620      	mov	r0, r4
 800540c:	f001 f82e 	bl	800646c <_Bfree>
 8005410:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005412:	2200      	movs	r2, #0
 8005414:	601a      	str	r2, [r3, #0]
 8005416:	1e3b      	subs	r3, r7, #0
 8005418:	bfaa      	itet	ge
 800541a:	2300      	movge	r3, #0
 800541c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8005420:	f8c8 3000 	strge.w	r3, [r8]
 8005424:	4b9a      	ldr	r3, [pc, #616]	; (8005690 <_dtoa_r+0x2d8>)
 8005426:	bfbc      	itt	lt
 8005428:	2201      	movlt	r2, #1
 800542a:	f8c8 2000 	strlt.w	r2, [r8]
 800542e:	ea33 030b 	bics.w	r3, r3, fp
 8005432:	d11b      	bne.n	800546c <_dtoa_r+0xb4>
 8005434:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005436:	f242 730f 	movw	r3, #9999	; 0x270f
 800543a:	6013      	str	r3, [r2, #0]
 800543c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005440:	4333      	orrs	r3, r6
 8005442:	f000 8592 	beq.w	8005f6a <_dtoa_r+0xbb2>
 8005446:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005448:	b963      	cbnz	r3, 8005464 <_dtoa_r+0xac>
 800544a:	4b92      	ldr	r3, [pc, #584]	; (8005694 <_dtoa_r+0x2dc>)
 800544c:	e022      	b.n	8005494 <_dtoa_r+0xdc>
 800544e:	4b92      	ldr	r3, [pc, #584]	; (8005698 <_dtoa_r+0x2e0>)
 8005450:	9301      	str	r3, [sp, #4]
 8005452:	3308      	adds	r3, #8
 8005454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005456:	6013      	str	r3, [r2, #0]
 8005458:	9801      	ldr	r0, [sp, #4]
 800545a:	b013      	add	sp, #76	; 0x4c
 800545c:	ecbd 8b04 	vpop	{d8-d9}
 8005460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005464:	4b8b      	ldr	r3, [pc, #556]	; (8005694 <_dtoa_r+0x2dc>)
 8005466:	9301      	str	r3, [sp, #4]
 8005468:	3303      	adds	r3, #3
 800546a:	e7f3      	b.n	8005454 <_dtoa_r+0x9c>
 800546c:	2200      	movs	r2, #0
 800546e:	2300      	movs	r3, #0
 8005470:	4650      	mov	r0, sl
 8005472:	4659      	mov	r1, fp
 8005474:	f7fb fb38 	bl	8000ae8 <__aeabi_dcmpeq>
 8005478:	ec4b ab19 	vmov	d9, sl, fp
 800547c:	4680      	mov	r8, r0
 800547e:	b158      	cbz	r0, 8005498 <_dtoa_r+0xe0>
 8005480:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005482:	2301      	movs	r3, #1
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005488:	2b00      	cmp	r3, #0
 800548a:	f000 856b 	beq.w	8005f64 <_dtoa_r+0xbac>
 800548e:	4883      	ldr	r0, [pc, #524]	; (800569c <_dtoa_r+0x2e4>)
 8005490:	6018      	str	r0, [r3, #0]
 8005492:	1e43      	subs	r3, r0, #1
 8005494:	9301      	str	r3, [sp, #4]
 8005496:	e7df      	b.n	8005458 <_dtoa_r+0xa0>
 8005498:	ec4b ab10 	vmov	d0, sl, fp
 800549c:	aa10      	add	r2, sp, #64	; 0x40
 800549e:	a911      	add	r1, sp, #68	; 0x44
 80054a0:	4620      	mov	r0, r4
 80054a2:	f001 facb 	bl	8006a3c <__d2b>
 80054a6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 80054aa:	ee08 0a10 	vmov	s16, r0
 80054ae:	2d00      	cmp	r5, #0
 80054b0:	f000 8084 	beq.w	80055bc <_dtoa_r+0x204>
 80054b4:	ee19 3a90 	vmov	r3, s19
 80054b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054bc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 80054c0:	4656      	mov	r6, sl
 80054c2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 80054c6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80054ca:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 80054ce:	4b74      	ldr	r3, [pc, #464]	; (80056a0 <_dtoa_r+0x2e8>)
 80054d0:	2200      	movs	r2, #0
 80054d2:	4630      	mov	r0, r6
 80054d4:	4639      	mov	r1, r7
 80054d6:	f7fa fee7 	bl	80002a8 <__aeabi_dsub>
 80054da:	a365      	add	r3, pc, #404	; (adr r3, 8005670 <_dtoa_r+0x2b8>)
 80054dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e0:	f7fb f89a 	bl	8000618 <__aeabi_dmul>
 80054e4:	a364      	add	r3, pc, #400	; (adr r3, 8005678 <_dtoa_r+0x2c0>)
 80054e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ea:	f7fa fedf 	bl	80002ac <__adddf3>
 80054ee:	4606      	mov	r6, r0
 80054f0:	4628      	mov	r0, r5
 80054f2:	460f      	mov	r7, r1
 80054f4:	f7fb f826 	bl	8000544 <__aeabi_i2d>
 80054f8:	a361      	add	r3, pc, #388	; (adr r3, 8005680 <_dtoa_r+0x2c8>)
 80054fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fe:	f7fb f88b 	bl	8000618 <__aeabi_dmul>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4630      	mov	r0, r6
 8005508:	4639      	mov	r1, r7
 800550a:	f7fa fecf 	bl	80002ac <__adddf3>
 800550e:	4606      	mov	r6, r0
 8005510:	460f      	mov	r7, r1
 8005512:	f7fb fb31 	bl	8000b78 <__aeabi_d2iz>
 8005516:	2200      	movs	r2, #0
 8005518:	9000      	str	r0, [sp, #0]
 800551a:	2300      	movs	r3, #0
 800551c:	4630      	mov	r0, r6
 800551e:	4639      	mov	r1, r7
 8005520:	f7fb faec 	bl	8000afc <__aeabi_dcmplt>
 8005524:	b150      	cbz	r0, 800553c <_dtoa_r+0x184>
 8005526:	9800      	ldr	r0, [sp, #0]
 8005528:	f7fb f80c 	bl	8000544 <__aeabi_i2d>
 800552c:	4632      	mov	r2, r6
 800552e:	463b      	mov	r3, r7
 8005530:	f7fb fada 	bl	8000ae8 <__aeabi_dcmpeq>
 8005534:	b910      	cbnz	r0, 800553c <_dtoa_r+0x184>
 8005536:	9b00      	ldr	r3, [sp, #0]
 8005538:	3b01      	subs	r3, #1
 800553a:	9300      	str	r3, [sp, #0]
 800553c:	9b00      	ldr	r3, [sp, #0]
 800553e:	2b16      	cmp	r3, #22
 8005540:	d85a      	bhi.n	80055f8 <_dtoa_r+0x240>
 8005542:	9a00      	ldr	r2, [sp, #0]
 8005544:	4b57      	ldr	r3, [pc, #348]	; (80056a4 <_dtoa_r+0x2ec>)
 8005546:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	ec51 0b19 	vmov	r0, r1, d9
 8005552:	f7fb fad3 	bl	8000afc <__aeabi_dcmplt>
 8005556:	2800      	cmp	r0, #0
 8005558:	d050      	beq.n	80055fc <_dtoa_r+0x244>
 800555a:	9b00      	ldr	r3, [sp, #0]
 800555c:	3b01      	subs	r3, #1
 800555e:	9300      	str	r3, [sp, #0]
 8005560:	2300      	movs	r3, #0
 8005562:	930b      	str	r3, [sp, #44]	; 0x2c
 8005564:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005566:	1b5d      	subs	r5, r3, r5
 8005568:	1e6b      	subs	r3, r5, #1
 800556a:	9305      	str	r3, [sp, #20]
 800556c:	bf45      	ittet	mi
 800556e:	f1c5 0301 	rsbmi	r3, r5, #1
 8005572:	9304      	strmi	r3, [sp, #16]
 8005574:	2300      	movpl	r3, #0
 8005576:	2300      	movmi	r3, #0
 8005578:	bf4c      	ite	mi
 800557a:	9305      	strmi	r3, [sp, #20]
 800557c:	9304      	strpl	r3, [sp, #16]
 800557e:	9b00      	ldr	r3, [sp, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	db3d      	blt.n	8005600 <_dtoa_r+0x248>
 8005584:	9b05      	ldr	r3, [sp, #20]
 8005586:	9a00      	ldr	r2, [sp, #0]
 8005588:	920a      	str	r2, [sp, #40]	; 0x28
 800558a:	4413      	add	r3, r2
 800558c:	9305      	str	r3, [sp, #20]
 800558e:	2300      	movs	r3, #0
 8005590:	9307      	str	r3, [sp, #28]
 8005592:	9b06      	ldr	r3, [sp, #24]
 8005594:	2b09      	cmp	r3, #9
 8005596:	f200 8089 	bhi.w	80056ac <_dtoa_r+0x2f4>
 800559a:	2b05      	cmp	r3, #5
 800559c:	bfc4      	itt	gt
 800559e:	3b04      	subgt	r3, #4
 80055a0:	9306      	strgt	r3, [sp, #24]
 80055a2:	9b06      	ldr	r3, [sp, #24]
 80055a4:	f1a3 0302 	sub.w	r3, r3, #2
 80055a8:	bfcc      	ite	gt
 80055aa:	2500      	movgt	r5, #0
 80055ac:	2501      	movle	r5, #1
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	f200 8087 	bhi.w	80056c2 <_dtoa_r+0x30a>
 80055b4:	e8df f003 	tbb	[pc, r3]
 80055b8:	59383a2d 	.word	0x59383a2d
 80055bc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 80055c0:	441d      	add	r5, r3
 80055c2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	bfc1      	itttt	gt
 80055ca:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80055ce:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 80055d2:	fa0b f303 	lslgt.w	r3, fp, r3
 80055d6:	fa26 f000 	lsrgt.w	r0, r6, r0
 80055da:	bfda      	itte	le
 80055dc:	f1c3 0320 	rsble	r3, r3, #32
 80055e0:	fa06 f003 	lslle.w	r0, r6, r3
 80055e4:	4318      	orrgt	r0, r3
 80055e6:	f7fa ff9d 	bl	8000524 <__aeabi_ui2d>
 80055ea:	2301      	movs	r3, #1
 80055ec:	4606      	mov	r6, r0
 80055ee:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80055f2:	3d01      	subs	r5, #1
 80055f4:	930e      	str	r3, [sp, #56]	; 0x38
 80055f6:	e76a      	b.n	80054ce <_dtoa_r+0x116>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e7b2      	b.n	8005562 <_dtoa_r+0x1aa>
 80055fc:	900b      	str	r0, [sp, #44]	; 0x2c
 80055fe:	e7b1      	b.n	8005564 <_dtoa_r+0x1ac>
 8005600:	9b04      	ldr	r3, [sp, #16]
 8005602:	9a00      	ldr	r2, [sp, #0]
 8005604:	1a9b      	subs	r3, r3, r2
 8005606:	9304      	str	r3, [sp, #16]
 8005608:	4253      	negs	r3, r2
 800560a:	9307      	str	r3, [sp, #28]
 800560c:	2300      	movs	r3, #0
 800560e:	930a      	str	r3, [sp, #40]	; 0x28
 8005610:	e7bf      	b.n	8005592 <_dtoa_r+0x1da>
 8005612:	2300      	movs	r3, #0
 8005614:	9308      	str	r3, [sp, #32]
 8005616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005618:	2b00      	cmp	r3, #0
 800561a:	dc55      	bgt.n	80056c8 <_dtoa_r+0x310>
 800561c:	2301      	movs	r3, #1
 800561e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8005622:	461a      	mov	r2, r3
 8005624:	9209      	str	r2, [sp, #36]	; 0x24
 8005626:	e00c      	b.n	8005642 <_dtoa_r+0x28a>
 8005628:	2301      	movs	r3, #1
 800562a:	e7f3      	b.n	8005614 <_dtoa_r+0x25c>
 800562c:	2300      	movs	r3, #0
 800562e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005630:	9308      	str	r3, [sp, #32]
 8005632:	9b00      	ldr	r3, [sp, #0]
 8005634:	4413      	add	r3, r2
 8005636:	9302      	str	r3, [sp, #8]
 8005638:	3301      	adds	r3, #1
 800563a:	2b01      	cmp	r3, #1
 800563c:	9303      	str	r3, [sp, #12]
 800563e:	bfb8      	it	lt
 8005640:	2301      	movlt	r3, #1
 8005642:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8005644:	2200      	movs	r2, #0
 8005646:	6042      	str	r2, [r0, #4]
 8005648:	2204      	movs	r2, #4
 800564a:	f102 0614 	add.w	r6, r2, #20
 800564e:	429e      	cmp	r6, r3
 8005650:	6841      	ldr	r1, [r0, #4]
 8005652:	d93d      	bls.n	80056d0 <_dtoa_r+0x318>
 8005654:	4620      	mov	r0, r4
 8005656:	f000 fec9 	bl	80063ec <_Balloc>
 800565a:	9001      	str	r0, [sp, #4]
 800565c:	2800      	cmp	r0, #0
 800565e:	d13b      	bne.n	80056d8 <_dtoa_r+0x320>
 8005660:	4b11      	ldr	r3, [pc, #68]	; (80056a8 <_dtoa_r+0x2f0>)
 8005662:	4602      	mov	r2, r0
 8005664:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005668:	e6c0      	b.n	80053ec <_dtoa_r+0x34>
 800566a:	2301      	movs	r3, #1
 800566c:	e7df      	b.n	800562e <_dtoa_r+0x276>
 800566e:	bf00      	nop
 8005670:	636f4361 	.word	0x636f4361
 8005674:	3fd287a7 	.word	0x3fd287a7
 8005678:	8b60c8b3 	.word	0x8b60c8b3
 800567c:	3fc68a28 	.word	0x3fc68a28
 8005680:	509f79fb 	.word	0x509f79fb
 8005684:	3fd34413 	.word	0x3fd34413
 8005688:	080076e5 	.word	0x080076e5
 800568c:	080076fc 	.word	0x080076fc
 8005690:	7ff00000 	.word	0x7ff00000
 8005694:	080076e1 	.word	0x080076e1
 8005698:	080076d8 	.word	0x080076d8
 800569c:	080076b5 	.word	0x080076b5
 80056a0:	3ff80000 	.word	0x3ff80000
 80056a4:	08007850 	.word	0x08007850
 80056a8:	08007757 	.word	0x08007757
 80056ac:	2501      	movs	r5, #1
 80056ae:	2300      	movs	r3, #0
 80056b0:	9306      	str	r3, [sp, #24]
 80056b2:	9508      	str	r5, [sp, #32]
 80056b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80056b8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056bc:	2200      	movs	r2, #0
 80056be:	2312      	movs	r3, #18
 80056c0:	e7b0      	b.n	8005624 <_dtoa_r+0x26c>
 80056c2:	2301      	movs	r3, #1
 80056c4:	9308      	str	r3, [sp, #32]
 80056c6:	e7f5      	b.n	80056b4 <_dtoa_r+0x2fc>
 80056c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056ca:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80056ce:	e7b8      	b.n	8005642 <_dtoa_r+0x28a>
 80056d0:	3101      	adds	r1, #1
 80056d2:	6041      	str	r1, [r0, #4]
 80056d4:	0052      	lsls	r2, r2, #1
 80056d6:	e7b8      	b.n	800564a <_dtoa_r+0x292>
 80056d8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80056da:	9a01      	ldr	r2, [sp, #4]
 80056dc:	601a      	str	r2, [r3, #0]
 80056de:	9b03      	ldr	r3, [sp, #12]
 80056e0:	2b0e      	cmp	r3, #14
 80056e2:	f200 809d 	bhi.w	8005820 <_dtoa_r+0x468>
 80056e6:	2d00      	cmp	r5, #0
 80056e8:	f000 809a 	beq.w	8005820 <_dtoa_r+0x468>
 80056ec:	9b00      	ldr	r3, [sp, #0]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	dd32      	ble.n	8005758 <_dtoa_r+0x3a0>
 80056f2:	4ab7      	ldr	r2, [pc, #732]	; (80059d0 <_dtoa_r+0x618>)
 80056f4:	f003 030f 	and.w	r3, r3, #15
 80056f8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80056fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005700:	9b00      	ldr	r3, [sp, #0]
 8005702:	05d8      	lsls	r0, r3, #23
 8005704:	ea4f 1723 	mov.w	r7, r3, asr #4
 8005708:	d516      	bpl.n	8005738 <_dtoa_r+0x380>
 800570a:	4bb2      	ldr	r3, [pc, #712]	; (80059d4 <_dtoa_r+0x61c>)
 800570c:	ec51 0b19 	vmov	r0, r1, d9
 8005710:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005714:	f7fb f8aa 	bl	800086c <__aeabi_ddiv>
 8005718:	f007 070f 	and.w	r7, r7, #15
 800571c:	4682      	mov	sl, r0
 800571e:	468b      	mov	fp, r1
 8005720:	2503      	movs	r5, #3
 8005722:	4eac      	ldr	r6, [pc, #688]	; (80059d4 <_dtoa_r+0x61c>)
 8005724:	b957      	cbnz	r7, 800573c <_dtoa_r+0x384>
 8005726:	4642      	mov	r2, r8
 8005728:	464b      	mov	r3, r9
 800572a:	4650      	mov	r0, sl
 800572c:	4659      	mov	r1, fp
 800572e:	f7fb f89d 	bl	800086c <__aeabi_ddiv>
 8005732:	4682      	mov	sl, r0
 8005734:	468b      	mov	fp, r1
 8005736:	e028      	b.n	800578a <_dtoa_r+0x3d2>
 8005738:	2502      	movs	r5, #2
 800573a:	e7f2      	b.n	8005722 <_dtoa_r+0x36a>
 800573c:	07f9      	lsls	r1, r7, #31
 800573e:	d508      	bpl.n	8005752 <_dtoa_r+0x39a>
 8005740:	4640      	mov	r0, r8
 8005742:	4649      	mov	r1, r9
 8005744:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005748:	f7fa ff66 	bl	8000618 <__aeabi_dmul>
 800574c:	3501      	adds	r5, #1
 800574e:	4680      	mov	r8, r0
 8005750:	4689      	mov	r9, r1
 8005752:	107f      	asrs	r7, r7, #1
 8005754:	3608      	adds	r6, #8
 8005756:	e7e5      	b.n	8005724 <_dtoa_r+0x36c>
 8005758:	f000 809b 	beq.w	8005892 <_dtoa_r+0x4da>
 800575c:	9b00      	ldr	r3, [sp, #0]
 800575e:	4f9d      	ldr	r7, [pc, #628]	; (80059d4 <_dtoa_r+0x61c>)
 8005760:	425e      	negs	r6, r3
 8005762:	4b9b      	ldr	r3, [pc, #620]	; (80059d0 <_dtoa_r+0x618>)
 8005764:	f006 020f 	and.w	r2, r6, #15
 8005768:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800576c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005770:	ec51 0b19 	vmov	r0, r1, d9
 8005774:	f7fa ff50 	bl	8000618 <__aeabi_dmul>
 8005778:	1136      	asrs	r6, r6, #4
 800577a:	4682      	mov	sl, r0
 800577c:	468b      	mov	fp, r1
 800577e:	2300      	movs	r3, #0
 8005780:	2502      	movs	r5, #2
 8005782:	2e00      	cmp	r6, #0
 8005784:	d17a      	bne.n	800587c <_dtoa_r+0x4c4>
 8005786:	2b00      	cmp	r3, #0
 8005788:	d1d3      	bne.n	8005732 <_dtoa_r+0x37a>
 800578a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8082 	beq.w	8005896 <_dtoa_r+0x4de>
 8005792:	4b91      	ldr	r3, [pc, #580]	; (80059d8 <_dtoa_r+0x620>)
 8005794:	2200      	movs	r2, #0
 8005796:	4650      	mov	r0, sl
 8005798:	4659      	mov	r1, fp
 800579a:	f7fb f9af 	bl	8000afc <__aeabi_dcmplt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d079      	beq.n	8005896 <_dtoa_r+0x4de>
 80057a2:	9b03      	ldr	r3, [sp, #12]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d076      	beq.n	8005896 <_dtoa_r+0x4de>
 80057a8:	9b02      	ldr	r3, [sp, #8]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	dd36      	ble.n	800581c <_dtoa_r+0x464>
 80057ae:	9b00      	ldr	r3, [sp, #0]
 80057b0:	4650      	mov	r0, sl
 80057b2:	4659      	mov	r1, fp
 80057b4:	1e5f      	subs	r7, r3, #1
 80057b6:	2200      	movs	r2, #0
 80057b8:	4b88      	ldr	r3, [pc, #544]	; (80059dc <_dtoa_r+0x624>)
 80057ba:	f7fa ff2d 	bl	8000618 <__aeabi_dmul>
 80057be:	9e02      	ldr	r6, [sp, #8]
 80057c0:	4682      	mov	sl, r0
 80057c2:	468b      	mov	fp, r1
 80057c4:	3501      	adds	r5, #1
 80057c6:	4628      	mov	r0, r5
 80057c8:	f7fa febc 	bl	8000544 <__aeabi_i2d>
 80057cc:	4652      	mov	r2, sl
 80057ce:	465b      	mov	r3, fp
 80057d0:	f7fa ff22 	bl	8000618 <__aeabi_dmul>
 80057d4:	4b82      	ldr	r3, [pc, #520]	; (80059e0 <_dtoa_r+0x628>)
 80057d6:	2200      	movs	r2, #0
 80057d8:	f7fa fd68 	bl	80002ac <__adddf3>
 80057dc:	46d0      	mov	r8, sl
 80057de:	46d9      	mov	r9, fp
 80057e0:	4682      	mov	sl, r0
 80057e2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80057e6:	2e00      	cmp	r6, #0
 80057e8:	d158      	bne.n	800589c <_dtoa_r+0x4e4>
 80057ea:	4b7e      	ldr	r3, [pc, #504]	; (80059e4 <_dtoa_r+0x62c>)
 80057ec:	2200      	movs	r2, #0
 80057ee:	4640      	mov	r0, r8
 80057f0:	4649      	mov	r1, r9
 80057f2:	f7fa fd59 	bl	80002a8 <__aeabi_dsub>
 80057f6:	4652      	mov	r2, sl
 80057f8:	465b      	mov	r3, fp
 80057fa:	4680      	mov	r8, r0
 80057fc:	4689      	mov	r9, r1
 80057fe:	f7fb f99b 	bl	8000b38 <__aeabi_dcmpgt>
 8005802:	2800      	cmp	r0, #0
 8005804:	f040 8295 	bne.w	8005d32 <_dtoa_r+0x97a>
 8005808:	4652      	mov	r2, sl
 800580a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800580e:	4640      	mov	r0, r8
 8005810:	4649      	mov	r1, r9
 8005812:	f7fb f973 	bl	8000afc <__aeabi_dcmplt>
 8005816:	2800      	cmp	r0, #0
 8005818:	f040 8289 	bne.w	8005d2e <_dtoa_r+0x976>
 800581c:	ec5b ab19 	vmov	sl, fp, d9
 8005820:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005822:	2b00      	cmp	r3, #0
 8005824:	f2c0 8148 	blt.w	8005ab8 <_dtoa_r+0x700>
 8005828:	9a00      	ldr	r2, [sp, #0]
 800582a:	2a0e      	cmp	r2, #14
 800582c:	f300 8144 	bgt.w	8005ab8 <_dtoa_r+0x700>
 8005830:	4b67      	ldr	r3, [pc, #412]	; (80059d0 <_dtoa_r+0x618>)
 8005832:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005836:	e9d3 8900 	ldrd	r8, r9, [r3]
 800583a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583c:	2b00      	cmp	r3, #0
 800583e:	f280 80d5 	bge.w	80059ec <_dtoa_r+0x634>
 8005842:	9b03      	ldr	r3, [sp, #12]
 8005844:	2b00      	cmp	r3, #0
 8005846:	f300 80d1 	bgt.w	80059ec <_dtoa_r+0x634>
 800584a:	f040 826f 	bne.w	8005d2c <_dtoa_r+0x974>
 800584e:	4b65      	ldr	r3, [pc, #404]	; (80059e4 <_dtoa_r+0x62c>)
 8005850:	2200      	movs	r2, #0
 8005852:	4640      	mov	r0, r8
 8005854:	4649      	mov	r1, r9
 8005856:	f7fa fedf 	bl	8000618 <__aeabi_dmul>
 800585a:	4652      	mov	r2, sl
 800585c:	465b      	mov	r3, fp
 800585e:	f7fb f961 	bl	8000b24 <__aeabi_dcmpge>
 8005862:	9e03      	ldr	r6, [sp, #12]
 8005864:	4637      	mov	r7, r6
 8005866:	2800      	cmp	r0, #0
 8005868:	f040 8245 	bne.w	8005cf6 <_dtoa_r+0x93e>
 800586c:	9d01      	ldr	r5, [sp, #4]
 800586e:	2331      	movs	r3, #49	; 0x31
 8005870:	f805 3b01 	strb.w	r3, [r5], #1
 8005874:	9b00      	ldr	r3, [sp, #0]
 8005876:	3301      	adds	r3, #1
 8005878:	9300      	str	r3, [sp, #0]
 800587a:	e240      	b.n	8005cfe <_dtoa_r+0x946>
 800587c:	07f2      	lsls	r2, r6, #31
 800587e:	d505      	bpl.n	800588c <_dtoa_r+0x4d4>
 8005880:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005884:	f7fa fec8 	bl	8000618 <__aeabi_dmul>
 8005888:	3501      	adds	r5, #1
 800588a:	2301      	movs	r3, #1
 800588c:	1076      	asrs	r6, r6, #1
 800588e:	3708      	adds	r7, #8
 8005890:	e777      	b.n	8005782 <_dtoa_r+0x3ca>
 8005892:	2502      	movs	r5, #2
 8005894:	e779      	b.n	800578a <_dtoa_r+0x3d2>
 8005896:	9f00      	ldr	r7, [sp, #0]
 8005898:	9e03      	ldr	r6, [sp, #12]
 800589a:	e794      	b.n	80057c6 <_dtoa_r+0x40e>
 800589c:	9901      	ldr	r1, [sp, #4]
 800589e:	4b4c      	ldr	r3, [pc, #304]	; (80059d0 <_dtoa_r+0x618>)
 80058a0:	4431      	add	r1, r6
 80058a2:	910d      	str	r1, [sp, #52]	; 0x34
 80058a4:	9908      	ldr	r1, [sp, #32]
 80058a6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80058aa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80058ae:	2900      	cmp	r1, #0
 80058b0:	d043      	beq.n	800593a <_dtoa_r+0x582>
 80058b2:	494d      	ldr	r1, [pc, #308]	; (80059e8 <_dtoa_r+0x630>)
 80058b4:	2000      	movs	r0, #0
 80058b6:	f7fa ffd9 	bl	800086c <__aeabi_ddiv>
 80058ba:	4652      	mov	r2, sl
 80058bc:	465b      	mov	r3, fp
 80058be:	f7fa fcf3 	bl	80002a8 <__aeabi_dsub>
 80058c2:	9d01      	ldr	r5, [sp, #4]
 80058c4:	4682      	mov	sl, r0
 80058c6:	468b      	mov	fp, r1
 80058c8:	4649      	mov	r1, r9
 80058ca:	4640      	mov	r0, r8
 80058cc:	f7fb f954 	bl	8000b78 <__aeabi_d2iz>
 80058d0:	4606      	mov	r6, r0
 80058d2:	f7fa fe37 	bl	8000544 <__aeabi_i2d>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4640      	mov	r0, r8
 80058dc:	4649      	mov	r1, r9
 80058de:	f7fa fce3 	bl	80002a8 <__aeabi_dsub>
 80058e2:	3630      	adds	r6, #48	; 0x30
 80058e4:	f805 6b01 	strb.w	r6, [r5], #1
 80058e8:	4652      	mov	r2, sl
 80058ea:	465b      	mov	r3, fp
 80058ec:	4680      	mov	r8, r0
 80058ee:	4689      	mov	r9, r1
 80058f0:	f7fb f904 	bl	8000afc <__aeabi_dcmplt>
 80058f4:	2800      	cmp	r0, #0
 80058f6:	d163      	bne.n	80059c0 <_dtoa_r+0x608>
 80058f8:	4642      	mov	r2, r8
 80058fa:	464b      	mov	r3, r9
 80058fc:	4936      	ldr	r1, [pc, #216]	; (80059d8 <_dtoa_r+0x620>)
 80058fe:	2000      	movs	r0, #0
 8005900:	f7fa fcd2 	bl	80002a8 <__aeabi_dsub>
 8005904:	4652      	mov	r2, sl
 8005906:	465b      	mov	r3, fp
 8005908:	f7fb f8f8 	bl	8000afc <__aeabi_dcmplt>
 800590c:	2800      	cmp	r0, #0
 800590e:	f040 80b5 	bne.w	8005a7c <_dtoa_r+0x6c4>
 8005912:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005914:	429d      	cmp	r5, r3
 8005916:	d081      	beq.n	800581c <_dtoa_r+0x464>
 8005918:	4b30      	ldr	r3, [pc, #192]	; (80059dc <_dtoa_r+0x624>)
 800591a:	2200      	movs	r2, #0
 800591c:	4650      	mov	r0, sl
 800591e:	4659      	mov	r1, fp
 8005920:	f7fa fe7a 	bl	8000618 <__aeabi_dmul>
 8005924:	4b2d      	ldr	r3, [pc, #180]	; (80059dc <_dtoa_r+0x624>)
 8005926:	4682      	mov	sl, r0
 8005928:	468b      	mov	fp, r1
 800592a:	4640      	mov	r0, r8
 800592c:	4649      	mov	r1, r9
 800592e:	2200      	movs	r2, #0
 8005930:	f7fa fe72 	bl	8000618 <__aeabi_dmul>
 8005934:	4680      	mov	r8, r0
 8005936:	4689      	mov	r9, r1
 8005938:	e7c6      	b.n	80058c8 <_dtoa_r+0x510>
 800593a:	4650      	mov	r0, sl
 800593c:	4659      	mov	r1, fp
 800593e:	f7fa fe6b 	bl	8000618 <__aeabi_dmul>
 8005942:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005944:	9d01      	ldr	r5, [sp, #4]
 8005946:	930f      	str	r3, [sp, #60]	; 0x3c
 8005948:	4682      	mov	sl, r0
 800594a:	468b      	mov	fp, r1
 800594c:	4649      	mov	r1, r9
 800594e:	4640      	mov	r0, r8
 8005950:	f7fb f912 	bl	8000b78 <__aeabi_d2iz>
 8005954:	4606      	mov	r6, r0
 8005956:	f7fa fdf5 	bl	8000544 <__aeabi_i2d>
 800595a:	3630      	adds	r6, #48	; 0x30
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4640      	mov	r0, r8
 8005962:	4649      	mov	r1, r9
 8005964:	f7fa fca0 	bl	80002a8 <__aeabi_dsub>
 8005968:	f805 6b01 	strb.w	r6, [r5], #1
 800596c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800596e:	429d      	cmp	r5, r3
 8005970:	4680      	mov	r8, r0
 8005972:	4689      	mov	r9, r1
 8005974:	f04f 0200 	mov.w	r2, #0
 8005978:	d124      	bne.n	80059c4 <_dtoa_r+0x60c>
 800597a:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <_dtoa_r+0x630>)
 800597c:	4650      	mov	r0, sl
 800597e:	4659      	mov	r1, fp
 8005980:	f7fa fc94 	bl	80002ac <__adddf3>
 8005984:	4602      	mov	r2, r0
 8005986:	460b      	mov	r3, r1
 8005988:	4640      	mov	r0, r8
 800598a:	4649      	mov	r1, r9
 800598c:	f7fb f8d4 	bl	8000b38 <__aeabi_dcmpgt>
 8005990:	2800      	cmp	r0, #0
 8005992:	d173      	bne.n	8005a7c <_dtoa_r+0x6c4>
 8005994:	4652      	mov	r2, sl
 8005996:	465b      	mov	r3, fp
 8005998:	4913      	ldr	r1, [pc, #76]	; (80059e8 <_dtoa_r+0x630>)
 800599a:	2000      	movs	r0, #0
 800599c:	f7fa fc84 	bl	80002a8 <__aeabi_dsub>
 80059a0:	4602      	mov	r2, r0
 80059a2:	460b      	mov	r3, r1
 80059a4:	4640      	mov	r0, r8
 80059a6:	4649      	mov	r1, r9
 80059a8:	f7fb f8a8 	bl	8000afc <__aeabi_dcmplt>
 80059ac:	2800      	cmp	r0, #0
 80059ae:	f43f af35 	beq.w	800581c <_dtoa_r+0x464>
 80059b2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80059b4:	1e6b      	subs	r3, r5, #1
 80059b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80059b8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80059bc:	2b30      	cmp	r3, #48	; 0x30
 80059be:	d0f8      	beq.n	80059b2 <_dtoa_r+0x5fa>
 80059c0:	9700      	str	r7, [sp, #0]
 80059c2:	e049      	b.n	8005a58 <_dtoa_r+0x6a0>
 80059c4:	4b05      	ldr	r3, [pc, #20]	; (80059dc <_dtoa_r+0x624>)
 80059c6:	f7fa fe27 	bl	8000618 <__aeabi_dmul>
 80059ca:	4680      	mov	r8, r0
 80059cc:	4689      	mov	r9, r1
 80059ce:	e7bd      	b.n	800594c <_dtoa_r+0x594>
 80059d0:	08007850 	.word	0x08007850
 80059d4:	08007828 	.word	0x08007828
 80059d8:	3ff00000 	.word	0x3ff00000
 80059dc:	40240000 	.word	0x40240000
 80059e0:	401c0000 	.word	0x401c0000
 80059e4:	40140000 	.word	0x40140000
 80059e8:	3fe00000 	.word	0x3fe00000
 80059ec:	9d01      	ldr	r5, [sp, #4]
 80059ee:	4656      	mov	r6, sl
 80059f0:	465f      	mov	r7, fp
 80059f2:	4642      	mov	r2, r8
 80059f4:	464b      	mov	r3, r9
 80059f6:	4630      	mov	r0, r6
 80059f8:	4639      	mov	r1, r7
 80059fa:	f7fa ff37 	bl	800086c <__aeabi_ddiv>
 80059fe:	f7fb f8bb 	bl	8000b78 <__aeabi_d2iz>
 8005a02:	4682      	mov	sl, r0
 8005a04:	f7fa fd9e 	bl	8000544 <__aeabi_i2d>
 8005a08:	4642      	mov	r2, r8
 8005a0a:	464b      	mov	r3, r9
 8005a0c:	f7fa fe04 	bl	8000618 <__aeabi_dmul>
 8005a10:	4602      	mov	r2, r0
 8005a12:	460b      	mov	r3, r1
 8005a14:	4630      	mov	r0, r6
 8005a16:	4639      	mov	r1, r7
 8005a18:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8005a1c:	f7fa fc44 	bl	80002a8 <__aeabi_dsub>
 8005a20:	f805 6b01 	strb.w	r6, [r5], #1
 8005a24:	9e01      	ldr	r6, [sp, #4]
 8005a26:	9f03      	ldr	r7, [sp, #12]
 8005a28:	1bae      	subs	r6, r5, r6
 8005a2a:	42b7      	cmp	r7, r6
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	460b      	mov	r3, r1
 8005a30:	d135      	bne.n	8005a9e <_dtoa_r+0x6e6>
 8005a32:	f7fa fc3b 	bl	80002ac <__adddf3>
 8005a36:	4642      	mov	r2, r8
 8005a38:	464b      	mov	r3, r9
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	460f      	mov	r7, r1
 8005a3e:	f7fb f87b 	bl	8000b38 <__aeabi_dcmpgt>
 8005a42:	b9d0      	cbnz	r0, 8005a7a <_dtoa_r+0x6c2>
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	4630      	mov	r0, r6
 8005a4a:	4639      	mov	r1, r7
 8005a4c:	f7fb f84c 	bl	8000ae8 <__aeabi_dcmpeq>
 8005a50:	b110      	cbz	r0, 8005a58 <_dtoa_r+0x6a0>
 8005a52:	f01a 0f01 	tst.w	sl, #1
 8005a56:	d110      	bne.n	8005a7a <_dtoa_r+0x6c2>
 8005a58:	4620      	mov	r0, r4
 8005a5a:	ee18 1a10 	vmov	r1, s16
 8005a5e:	f000 fd05 	bl	800646c <_Bfree>
 8005a62:	2300      	movs	r3, #0
 8005a64:	9800      	ldr	r0, [sp, #0]
 8005a66:	702b      	strb	r3, [r5, #0]
 8005a68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a6a:	3001      	adds	r0, #1
 8005a6c:	6018      	str	r0, [r3, #0]
 8005a6e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f43f acf1 	beq.w	8005458 <_dtoa_r+0xa0>
 8005a76:	601d      	str	r5, [r3, #0]
 8005a78:	e4ee      	b.n	8005458 <_dtoa_r+0xa0>
 8005a7a:	9f00      	ldr	r7, [sp, #0]
 8005a7c:	462b      	mov	r3, r5
 8005a7e:	461d      	mov	r5, r3
 8005a80:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005a84:	2a39      	cmp	r2, #57	; 0x39
 8005a86:	d106      	bne.n	8005a96 <_dtoa_r+0x6de>
 8005a88:	9a01      	ldr	r2, [sp, #4]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	d1f7      	bne.n	8005a7e <_dtoa_r+0x6c6>
 8005a8e:	9901      	ldr	r1, [sp, #4]
 8005a90:	2230      	movs	r2, #48	; 0x30
 8005a92:	3701      	adds	r7, #1
 8005a94:	700a      	strb	r2, [r1, #0]
 8005a96:	781a      	ldrb	r2, [r3, #0]
 8005a98:	3201      	adds	r2, #1
 8005a9a:	701a      	strb	r2, [r3, #0]
 8005a9c:	e790      	b.n	80059c0 <_dtoa_r+0x608>
 8005a9e:	4ba6      	ldr	r3, [pc, #664]	; (8005d38 <_dtoa_r+0x980>)
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	f7fa fdb9 	bl	8000618 <__aeabi_dmul>
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	4606      	mov	r6, r0
 8005aac:	460f      	mov	r7, r1
 8005aae:	f7fb f81b 	bl	8000ae8 <__aeabi_dcmpeq>
 8005ab2:	2800      	cmp	r0, #0
 8005ab4:	d09d      	beq.n	80059f2 <_dtoa_r+0x63a>
 8005ab6:	e7cf      	b.n	8005a58 <_dtoa_r+0x6a0>
 8005ab8:	9a08      	ldr	r2, [sp, #32]
 8005aba:	2a00      	cmp	r2, #0
 8005abc:	f000 80d7 	beq.w	8005c6e <_dtoa_r+0x8b6>
 8005ac0:	9a06      	ldr	r2, [sp, #24]
 8005ac2:	2a01      	cmp	r2, #1
 8005ac4:	f300 80ba 	bgt.w	8005c3c <_dtoa_r+0x884>
 8005ac8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	f000 80b2 	beq.w	8005c34 <_dtoa_r+0x87c>
 8005ad0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005ad4:	9e07      	ldr	r6, [sp, #28]
 8005ad6:	9d04      	ldr	r5, [sp, #16]
 8005ad8:	9a04      	ldr	r2, [sp, #16]
 8005ada:	441a      	add	r2, r3
 8005adc:	9204      	str	r2, [sp, #16]
 8005ade:	9a05      	ldr	r2, [sp, #20]
 8005ae0:	2101      	movs	r1, #1
 8005ae2:	441a      	add	r2, r3
 8005ae4:	4620      	mov	r0, r4
 8005ae6:	9205      	str	r2, [sp, #20]
 8005ae8:	f000 fd78 	bl	80065dc <__i2b>
 8005aec:	4607      	mov	r7, r0
 8005aee:	2d00      	cmp	r5, #0
 8005af0:	dd0c      	ble.n	8005b0c <_dtoa_r+0x754>
 8005af2:	9b05      	ldr	r3, [sp, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	dd09      	ble.n	8005b0c <_dtoa_r+0x754>
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	9a04      	ldr	r2, [sp, #16]
 8005afc:	bfa8      	it	ge
 8005afe:	462b      	movge	r3, r5
 8005b00:	1ad2      	subs	r2, r2, r3
 8005b02:	9204      	str	r2, [sp, #16]
 8005b04:	9a05      	ldr	r2, [sp, #20]
 8005b06:	1aed      	subs	r5, r5, r3
 8005b08:	1ad3      	subs	r3, r2, r3
 8005b0a:	9305      	str	r3, [sp, #20]
 8005b0c:	9b07      	ldr	r3, [sp, #28]
 8005b0e:	b31b      	cbz	r3, 8005b58 <_dtoa_r+0x7a0>
 8005b10:	9b08      	ldr	r3, [sp, #32]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	f000 80af 	beq.w	8005c76 <_dtoa_r+0x8be>
 8005b18:	2e00      	cmp	r6, #0
 8005b1a:	dd13      	ble.n	8005b44 <_dtoa_r+0x78c>
 8005b1c:	4639      	mov	r1, r7
 8005b1e:	4632      	mov	r2, r6
 8005b20:	4620      	mov	r0, r4
 8005b22:	f000 fe1b 	bl	800675c <__pow5mult>
 8005b26:	ee18 2a10 	vmov	r2, s16
 8005b2a:	4601      	mov	r1, r0
 8005b2c:	4607      	mov	r7, r0
 8005b2e:	4620      	mov	r0, r4
 8005b30:	f000 fd6a 	bl	8006608 <__multiply>
 8005b34:	ee18 1a10 	vmov	r1, s16
 8005b38:	4680      	mov	r8, r0
 8005b3a:	4620      	mov	r0, r4
 8005b3c:	f000 fc96 	bl	800646c <_Bfree>
 8005b40:	ee08 8a10 	vmov	s16, r8
 8005b44:	9b07      	ldr	r3, [sp, #28]
 8005b46:	1b9a      	subs	r2, r3, r6
 8005b48:	d006      	beq.n	8005b58 <_dtoa_r+0x7a0>
 8005b4a:	ee18 1a10 	vmov	r1, s16
 8005b4e:	4620      	mov	r0, r4
 8005b50:	f000 fe04 	bl	800675c <__pow5mult>
 8005b54:	ee08 0a10 	vmov	s16, r0
 8005b58:	2101      	movs	r1, #1
 8005b5a:	4620      	mov	r0, r4
 8005b5c:	f000 fd3e 	bl	80065dc <__i2b>
 8005b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	4606      	mov	r6, r0
 8005b66:	f340 8088 	ble.w	8005c7a <_dtoa_r+0x8c2>
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	4601      	mov	r1, r0
 8005b6e:	4620      	mov	r0, r4
 8005b70:	f000 fdf4 	bl	800675c <__pow5mult>
 8005b74:	9b06      	ldr	r3, [sp, #24]
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	4606      	mov	r6, r0
 8005b7a:	f340 8081 	ble.w	8005c80 <_dtoa_r+0x8c8>
 8005b7e:	f04f 0800 	mov.w	r8, #0
 8005b82:	6933      	ldr	r3, [r6, #16]
 8005b84:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005b88:	6918      	ldr	r0, [r3, #16]
 8005b8a:	f000 fcd7 	bl	800653c <__hi0bits>
 8005b8e:	f1c0 0020 	rsb	r0, r0, #32
 8005b92:	9b05      	ldr	r3, [sp, #20]
 8005b94:	4418      	add	r0, r3
 8005b96:	f010 001f 	ands.w	r0, r0, #31
 8005b9a:	f000 8092 	beq.w	8005cc2 <_dtoa_r+0x90a>
 8005b9e:	f1c0 0320 	rsb	r3, r0, #32
 8005ba2:	2b04      	cmp	r3, #4
 8005ba4:	f340 808a 	ble.w	8005cbc <_dtoa_r+0x904>
 8005ba8:	f1c0 001c 	rsb	r0, r0, #28
 8005bac:	9b04      	ldr	r3, [sp, #16]
 8005bae:	4403      	add	r3, r0
 8005bb0:	9304      	str	r3, [sp, #16]
 8005bb2:	9b05      	ldr	r3, [sp, #20]
 8005bb4:	4403      	add	r3, r0
 8005bb6:	4405      	add	r5, r0
 8005bb8:	9305      	str	r3, [sp, #20]
 8005bba:	9b04      	ldr	r3, [sp, #16]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	dd07      	ble.n	8005bd0 <_dtoa_r+0x818>
 8005bc0:	ee18 1a10 	vmov	r1, s16
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	4620      	mov	r0, r4
 8005bc8:	f000 fe22 	bl	8006810 <__lshift>
 8005bcc:	ee08 0a10 	vmov	s16, r0
 8005bd0:	9b05      	ldr	r3, [sp, #20]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	dd05      	ble.n	8005be2 <_dtoa_r+0x82a>
 8005bd6:	4631      	mov	r1, r6
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4620      	mov	r0, r4
 8005bdc:	f000 fe18 	bl	8006810 <__lshift>
 8005be0:	4606      	mov	r6, r0
 8005be2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d06e      	beq.n	8005cc6 <_dtoa_r+0x90e>
 8005be8:	ee18 0a10 	vmov	r0, s16
 8005bec:	4631      	mov	r1, r6
 8005bee:	f000 fe7f 	bl	80068f0 <__mcmp>
 8005bf2:	2800      	cmp	r0, #0
 8005bf4:	da67      	bge.n	8005cc6 <_dtoa_r+0x90e>
 8005bf6:	9b00      	ldr	r3, [sp, #0]
 8005bf8:	3b01      	subs	r3, #1
 8005bfa:	ee18 1a10 	vmov	r1, s16
 8005bfe:	9300      	str	r3, [sp, #0]
 8005c00:	220a      	movs	r2, #10
 8005c02:	2300      	movs	r3, #0
 8005c04:	4620      	mov	r0, r4
 8005c06:	f000 fc53 	bl	80064b0 <__multadd>
 8005c0a:	9b08      	ldr	r3, [sp, #32]
 8005c0c:	ee08 0a10 	vmov	s16, r0
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	f000 81b1 	beq.w	8005f78 <_dtoa_r+0xbc0>
 8005c16:	2300      	movs	r3, #0
 8005c18:	4639      	mov	r1, r7
 8005c1a:	220a      	movs	r2, #10
 8005c1c:	4620      	mov	r0, r4
 8005c1e:	f000 fc47 	bl	80064b0 <__multadd>
 8005c22:	9b02      	ldr	r3, [sp, #8]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	4607      	mov	r7, r0
 8005c28:	f300 808e 	bgt.w	8005d48 <_dtoa_r+0x990>
 8005c2c:	9b06      	ldr	r3, [sp, #24]
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	dc51      	bgt.n	8005cd6 <_dtoa_r+0x91e>
 8005c32:	e089      	b.n	8005d48 <_dtoa_r+0x990>
 8005c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005c36:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005c3a:	e74b      	b.n	8005ad4 <_dtoa_r+0x71c>
 8005c3c:	9b03      	ldr	r3, [sp, #12]
 8005c3e:	1e5e      	subs	r6, r3, #1
 8005c40:	9b07      	ldr	r3, [sp, #28]
 8005c42:	42b3      	cmp	r3, r6
 8005c44:	bfbf      	itttt	lt
 8005c46:	9b07      	ldrlt	r3, [sp, #28]
 8005c48:	9607      	strlt	r6, [sp, #28]
 8005c4a:	1af2      	sublt	r2, r6, r3
 8005c4c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005c4e:	bfb6      	itet	lt
 8005c50:	189b      	addlt	r3, r3, r2
 8005c52:	1b9e      	subge	r6, r3, r6
 8005c54:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005c56:	9b03      	ldr	r3, [sp, #12]
 8005c58:	bfb8      	it	lt
 8005c5a:	2600      	movlt	r6, #0
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	bfb7      	itett	lt
 8005c60:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8005c64:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8005c68:	1a9d      	sublt	r5, r3, r2
 8005c6a:	2300      	movlt	r3, #0
 8005c6c:	e734      	b.n	8005ad8 <_dtoa_r+0x720>
 8005c6e:	9e07      	ldr	r6, [sp, #28]
 8005c70:	9d04      	ldr	r5, [sp, #16]
 8005c72:	9f08      	ldr	r7, [sp, #32]
 8005c74:	e73b      	b.n	8005aee <_dtoa_r+0x736>
 8005c76:	9a07      	ldr	r2, [sp, #28]
 8005c78:	e767      	b.n	8005b4a <_dtoa_r+0x792>
 8005c7a:	9b06      	ldr	r3, [sp, #24]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	dc18      	bgt.n	8005cb2 <_dtoa_r+0x8fa>
 8005c80:	f1ba 0f00 	cmp.w	sl, #0
 8005c84:	d115      	bne.n	8005cb2 <_dtoa_r+0x8fa>
 8005c86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c8a:	b993      	cbnz	r3, 8005cb2 <_dtoa_r+0x8fa>
 8005c8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005c90:	0d1b      	lsrs	r3, r3, #20
 8005c92:	051b      	lsls	r3, r3, #20
 8005c94:	b183      	cbz	r3, 8005cb8 <_dtoa_r+0x900>
 8005c96:	9b04      	ldr	r3, [sp, #16]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	9304      	str	r3, [sp, #16]
 8005c9c:	9b05      	ldr	r3, [sp, #20]
 8005c9e:	3301      	adds	r3, #1
 8005ca0:	9305      	str	r3, [sp, #20]
 8005ca2:	f04f 0801 	mov.w	r8, #1
 8005ca6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f47f af6a 	bne.w	8005b82 <_dtoa_r+0x7ca>
 8005cae:	2001      	movs	r0, #1
 8005cb0:	e76f      	b.n	8005b92 <_dtoa_r+0x7da>
 8005cb2:	f04f 0800 	mov.w	r8, #0
 8005cb6:	e7f6      	b.n	8005ca6 <_dtoa_r+0x8ee>
 8005cb8:	4698      	mov	r8, r3
 8005cba:	e7f4      	b.n	8005ca6 <_dtoa_r+0x8ee>
 8005cbc:	f43f af7d 	beq.w	8005bba <_dtoa_r+0x802>
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	301c      	adds	r0, #28
 8005cc4:	e772      	b.n	8005bac <_dtoa_r+0x7f4>
 8005cc6:	9b03      	ldr	r3, [sp, #12]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	dc37      	bgt.n	8005d3c <_dtoa_r+0x984>
 8005ccc:	9b06      	ldr	r3, [sp, #24]
 8005cce:	2b02      	cmp	r3, #2
 8005cd0:	dd34      	ble.n	8005d3c <_dtoa_r+0x984>
 8005cd2:	9b03      	ldr	r3, [sp, #12]
 8005cd4:	9302      	str	r3, [sp, #8]
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	b96b      	cbnz	r3, 8005cf6 <_dtoa_r+0x93e>
 8005cda:	4631      	mov	r1, r6
 8005cdc:	2205      	movs	r2, #5
 8005cde:	4620      	mov	r0, r4
 8005ce0:	f000 fbe6 	bl	80064b0 <__multadd>
 8005ce4:	4601      	mov	r1, r0
 8005ce6:	4606      	mov	r6, r0
 8005ce8:	ee18 0a10 	vmov	r0, s16
 8005cec:	f000 fe00 	bl	80068f0 <__mcmp>
 8005cf0:	2800      	cmp	r0, #0
 8005cf2:	f73f adbb 	bgt.w	800586c <_dtoa_r+0x4b4>
 8005cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf8:	9d01      	ldr	r5, [sp, #4]
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	9300      	str	r3, [sp, #0]
 8005cfe:	f04f 0800 	mov.w	r8, #0
 8005d02:	4631      	mov	r1, r6
 8005d04:	4620      	mov	r0, r4
 8005d06:	f000 fbb1 	bl	800646c <_Bfree>
 8005d0a:	2f00      	cmp	r7, #0
 8005d0c:	f43f aea4 	beq.w	8005a58 <_dtoa_r+0x6a0>
 8005d10:	f1b8 0f00 	cmp.w	r8, #0
 8005d14:	d005      	beq.n	8005d22 <_dtoa_r+0x96a>
 8005d16:	45b8      	cmp	r8, r7
 8005d18:	d003      	beq.n	8005d22 <_dtoa_r+0x96a>
 8005d1a:	4641      	mov	r1, r8
 8005d1c:	4620      	mov	r0, r4
 8005d1e:	f000 fba5 	bl	800646c <_Bfree>
 8005d22:	4639      	mov	r1, r7
 8005d24:	4620      	mov	r0, r4
 8005d26:	f000 fba1 	bl	800646c <_Bfree>
 8005d2a:	e695      	b.n	8005a58 <_dtoa_r+0x6a0>
 8005d2c:	2600      	movs	r6, #0
 8005d2e:	4637      	mov	r7, r6
 8005d30:	e7e1      	b.n	8005cf6 <_dtoa_r+0x93e>
 8005d32:	9700      	str	r7, [sp, #0]
 8005d34:	4637      	mov	r7, r6
 8005d36:	e599      	b.n	800586c <_dtoa_r+0x4b4>
 8005d38:	40240000 	.word	0x40240000
 8005d3c:	9b08      	ldr	r3, [sp, #32]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	f000 80ca 	beq.w	8005ed8 <_dtoa_r+0xb20>
 8005d44:	9b03      	ldr	r3, [sp, #12]
 8005d46:	9302      	str	r3, [sp, #8]
 8005d48:	2d00      	cmp	r5, #0
 8005d4a:	dd05      	ble.n	8005d58 <_dtoa_r+0x9a0>
 8005d4c:	4639      	mov	r1, r7
 8005d4e:	462a      	mov	r2, r5
 8005d50:	4620      	mov	r0, r4
 8005d52:	f000 fd5d 	bl	8006810 <__lshift>
 8005d56:	4607      	mov	r7, r0
 8005d58:	f1b8 0f00 	cmp.w	r8, #0
 8005d5c:	d05b      	beq.n	8005e16 <_dtoa_r+0xa5e>
 8005d5e:	6879      	ldr	r1, [r7, #4]
 8005d60:	4620      	mov	r0, r4
 8005d62:	f000 fb43 	bl	80063ec <_Balloc>
 8005d66:	4605      	mov	r5, r0
 8005d68:	b928      	cbnz	r0, 8005d76 <_dtoa_r+0x9be>
 8005d6a:	4b87      	ldr	r3, [pc, #540]	; (8005f88 <_dtoa_r+0xbd0>)
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8005d72:	f7ff bb3b 	b.w	80053ec <_dtoa_r+0x34>
 8005d76:	693a      	ldr	r2, [r7, #16]
 8005d78:	3202      	adds	r2, #2
 8005d7a:	0092      	lsls	r2, r2, #2
 8005d7c:	f107 010c 	add.w	r1, r7, #12
 8005d80:	300c      	adds	r0, #12
 8005d82:	f7fe fc9f 	bl	80046c4 <memcpy>
 8005d86:	2201      	movs	r2, #1
 8005d88:	4629      	mov	r1, r5
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f000 fd40 	bl	8006810 <__lshift>
 8005d90:	9b01      	ldr	r3, [sp, #4]
 8005d92:	f103 0901 	add.w	r9, r3, #1
 8005d96:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	9305      	str	r3, [sp, #20]
 8005d9e:	f00a 0301 	and.w	r3, sl, #1
 8005da2:	46b8      	mov	r8, r7
 8005da4:	9304      	str	r3, [sp, #16]
 8005da6:	4607      	mov	r7, r0
 8005da8:	4631      	mov	r1, r6
 8005daa:	ee18 0a10 	vmov	r0, s16
 8005dae:	f7ff fa77 	bl	80052a0 <quorem>
 8005db2:	4641      	mov	r1, r8
 8005db4:	9002      	str	r0, [sp, #8]
 8005db6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005dba:	ee18 0a10 	vmov	r0, s16
 8005dbe:	f000 fd97 	bl	80068f0 <__mcmp>
 8005dc2:	463a      	mov	r2, r7
 8005dc4:	9003      	str	r0, [sp, #12]
 8005dc6:	4631      	mov	r1, r6
 8005dc8:	4620      	mov	r0, r4
 8005dca:	f000 fdad 	bl	8006928 <__mdiff>
 8005dce:	68c2      	ldr	r2, [r0, #12]
 8005dd0:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8005dd4:	4605      	mov	r5, r0
 8005dd6:	bb02      	cbnz	r2, 8005e1a <_dtoa_r+0xa62>
 8005dd8:	4601      	mov	r1, r0
 8005dda:	ee18 0a10 	vmov	r0, s16
 8005dde:	f000 fd87 	bl	80068f0 <__mcmp>
 8005de2:	4602      	mov	r2, r0
 8005de4:	4629      	mov	r1, r5
 8005de6:	4620      	mov	r0, r4
 8005de8:	9207      	str	r2, [sp, #28]
 8005dea:	f000 fb3f 	bl	800646c <_Bfree>
 8005dee:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8005df2:	ea43 0102 	orr.w	r1, r3, r2
 8005df6:	9b04      	ldr	r3, [sp, #16]
 8005df8:	430b      	orrs	r3, r1
 8005dfa:	464d      	mov	r5, r9
 8005dfc:	d10f      	bne.n	8005e1e <_dtoa_r+0xa66>
 8005dfe:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e02:	d02a      	beq.n	8005e5a <_dtoa_r+0xaa2>
 8005e04:	9b03      	ldr	r3, [sp, #12]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	dd02      	ble.n	8005e10 <_dtoa_r+0xa58>
 8005e0a:	9b02      	ldr	r3, [sp, #8]
 8005e0c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8005e10:	f88b a000 	strb.w	sl, [fp]
 8005e14:	e775      	b.n	8005d02 <_dtoa_r+0x94a>
 8005e16:	4638      	mov	r0, r7
 8005e18:	e7ba      	b.n	8005d90 <_dtoa_r+0x9d8>
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	e7e2      	b.n	8005de4 <_dtoa_r+0xa2c>
 8005e1e:	9b03      	ldr	r3, [sp, #12]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	db04      	blt.n	8005e2e <_dtoa_r+0xa76>
 8005e24:	9906      	ldr	r1, [sp, #24]
 8005e26:	430b      	orrs	r3, r1
 8005e28:	9904      	ldr	r1, [sp, #16]
 8005e2a:	430b      	orrs	r3, r1
 8005e2c:	d122      	bne.n	8005e74 <_dtoa_r+0xabc>
 8005e2e:	2a00      	cmp	r2, #0
 8005e30:	ddee      	ble.n	8005e10 <_dtoa_r+0xa58>
 8005e32:	ee18 1a10 	vmov	r1, s16
 8005e36:	2201      	movs	r2, #1
 8005e38:	4620      	mov	r0, r4
 8005e3a:	f000 fce9 	bl	8006810 <__lshift>
 8005e3e:	4631      	mov	r1, r6
 8005e40:	ee08 0a10 	vmov	s16, r0
 8005e44:	f000 fd54 	bl	80068f0 <__mcmp>
 8005e48:	2800      	cmp	r0, #0
 8005e4a:	dc03      	bgt.n	8005e54 <_dtoa_r+0xa9c>
 8005e4c:	d1e0      	bne.n	8005e10 <_dtoa_r+0xa58>
 8005e4e:	f01a 0f01 	tst.w	sl, #1
 8005e52:	d0dd      	beq.n	8005e10 <_dtoa_r+0xa58>
 8005e54:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e58:	d1d7      	bne.n	8005e0a <_dtoa_r+0xa52>
 8005e5a:	2339      	movs	r3, #57	; 0x39
 8005e5c:	f88b 3000 	strb.w	r3, [fp]
 8005e60:	462b      	mov	r3, r5
 8005e62:	461d      	mov	r5, r3
 8005e64:	3b01      	subs	r3, #1
 8005e66:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8005e6a:	2a39      	cmp	r2, #57	; 0x39
 8005e6c:	d071      	beq.n	8005f52 <_dtoa_r+0xb9a>
 8005e6e:	3201      	adds	r2, #1
 8005e70:	701a      	strb	r2, [r3, #0]
 8005e72:	e746      	b.n	8005d02 <_dtoa_r+0x94a>
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	dd07      	ble.n	8005e88 <_dtoa_r+0xad0>
 8005e78:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8005e7c:	d0ed      	beq.n	8005e5a <_dtoa_r+0xaa2>
 8005e7e:	f10a 0301 	add.w	r3, sl, #1
 8005e82:	f88b 3000 	strb.w	r3, [fp]
 8005e86:	e73c      	b.n	8005d02 <_dtoa_r+0x94a>
 8005e88:	9b05      	ldr	r3, [sp, #20]
 8005e8a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8005e8e:	4599      	cmp	r9, r3
 8005e90:	d047      	beq.n	8005f22 <_dtoa_r+0xb6a>
 8005e92:	ee18 1a10 	vmov	r1, s16
 8005e96:	2300      	movs	r3, #0
 8005e98:	220a      	movs	r2, #10
 8005e9a:	4620      	mov	r0, r4
 8005e9c:	f000 fb08 	bl	80064b0 <__multadd>
 8005ea0:	45b8      	cmp	r8, r7
 8005ea2:	ee08 0a10 	vmov	s16, r0
 8005ea6:	f04f 0300 	mov.w	r3, #0
 8005eaa:	f04f 020a 	mov.w	r2, #10
 8005eae:	4641      	mov	r1, r8
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	d106      	bne.n	8005ec2 <_dtoa_r+0xb0a>
 8005eb4:	f000 fafc 	bl	80064b0 <__multadd>
 8005eb8:	4680      	mov	r8, r0
 8005eba:	4607      	mov	r7, r0
 8005ebc:	f109 0901 	add.w	r9, r9, #1
 8005ec0:	e772      	b.n	8005da8 <_dtoa_r+0x9f0>
 8005ec2:	f000 faf5 	bl	80064b0 <__multadd>
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	4680      	mov	r8, r0
 8005eca:	2300      	movs	r3, #0
 8005ecc:	220a      	movs	r2, #10
 8005ece:	4620      	mov	r0, r4
 8005ed0:	f000 faee 	bl	80064b0 <__multadd>
 8005ed4:	4607      	mov	r7, r0
 8005ed6:	e7f1      	b.n	8005ebc <_dtoa_r+0xb04>
 8005ed8:	9b03      	ldr	r3, [sp, #12]
 8005eda:	9302      	str	r3, [sp, #8]
 8005edc:	9d01      	ldr	r5, [sp, #4]
 8005ede:	ee18 0a10 	vmov	r0, s16
 8005ee2:	4631      	mov	r1, r6
 8005ee4:	f7ff f9dc 	bl	80052a0 <quorem>
 8005ee8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8005eec:	9b01      	ldr	r3, [sp, #4]
 8005eee:	f805 ab01 	strb.w	sl, [r5], #1
 8005ef2:	1aea      	subs	r2, r5, r3
 8005ef4:	9b02      	ldr	r3, [sp, #8]
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	dd09      	ble.n	8005f0e <_dtoa_r+0xb56>
 8005efa:	ee18 1a10 	vmov	r1, s16
 8005efe:	2300      	movs	r3, #0
 8005f00:	220a      	movs	r2, #10
 8005f02:	4620      	mov	r0, r4
 8005f04:	f000 fad4 	bl	80064b0 <__multadd>
 8005f08:	ee08 0a10 	vmov	s16, r0
 8005f0c:	e7e7      	b.n	8005ede <_dtoa_r+0xb26>
 8005f0e:	9b02      	ldr	r3, [sp, #8]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bfc8      	it	gt
 8005f14:	461d      	movgt	r5, r3
 8005f16:	9b01      	ldr	r3, [sp, #4]
 8005f18:	bfd8      	it	le
 8005f1a:	2501      	movle	r5, #1
 8005f1c:	441d      	add	r5, r3
 8005f1e:	f04f 0800 	mov.w	r8, #0
 8005f22:	ee18 1a10 	vmov	r1, s16
 8005f26:	2201      	movs	r2, #1
 8005f28:	4620      	mov	r0, r4
 8005f2a:	f000 fc71 	bl	8006810 <__lshift>
 8005f2e:	4631      	mov	r1, r6
 8005f30:	ee08 0a10 	vmov	s16, r0
 8005f34:	f000 fcdc 	bl	80068f0 <__mcmp>
 8005f38:	2800      	cmp	r0, #0
 8005f3a:	dc91      	bgt.n	8005e60 <_dtoa_r+0xaa8>
 8005f3c:	d102      	bne.n	8005f44 <_dtoa_r+0xb8c>
 8005f3e:	f01a 0f01 	tst.w	sl, #1
 8005f42:	d18d      	bne.n	8005e60 <_dtoa_r+0xaa8>
 8005f44:	462b      	mov	r3, r5
 8005f46:	461d      	mov	r5, r3
 8005f48:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f4c:	2a30      	cmp	r2, #48	; 0x30
 8005f4e:	d0fa      	beq.n	8005f46 <_dtoa_r+0xb8e>
 8005f50:	e6d7      	b.n	8005d02 <_dtoa_r+0x94a>
 8005f52:	9a01      	ldr	r2, [sp, #4]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	d184      	bne.n	8005e62 <_dtoa_r+0xaaa>
 8005f58:	9b00      	ldr	r3, [sp, #0]
 8005f5a:	3301      	adds	r3, #1
 8005f5c:	9300      	str	r3, [sp, #0]
 8005f5e:	2331      	movs	r3, #49	; 0x31
 8005f60:	7013      	strb	r3, [r2, #0]
 8005f62:	e6ce      	b.n	8005d02 <_dtoa_r+0x94a>
 8005f64:	4b09      	ldr	r3, [pc, #36]	; (8005f8c <_dtoa_r+0xbd4>)
 8005f66:	f7ff ba95 	b.w	8005494 <_dtoa_r+0xdc>
 8005f6a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	f47f aa6e 	bne.w	800544e <_dtoa_r+0x96>
 8005f72:	4b07      	ldr	r3, [pc, #28]	; (8005f90 <_dtoa_r+0xbd8>)
 8005f74:	f7ff ba8e 	b.w	8005494 <_dtoa_r+0xdc>
 8005f78:	9b02      	ldr	r3, [sp, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	dcae      	bgt.n	8005edc <_dtoa_r+0xb24>
 8005f7e:	9b06      	ldr	r3, [sp, #24]
 8005f80:	2b02      	cmp	r3, #2
 8005f82:	f73f aea8 	bgt.w	8005cd6 <_dtoa_r+0x91e>
 8005f86:	e7a9      	b.n	8005edc <_dtoa_r+0xb24>
 8005f88:	08007757 	.word	0x08007757
 8005f8c:	080076b4 	.word	0x080076b4
 8005f90:	080076d8 	.word	0x080076d8

08005f94 <__sflush_r>:
 8005f94:	898a      	ldrh	r2, [r1, #12]
 8005f96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f9a:	4605      	mov	r5, r0
 8005f9c:	0710      	lsls	r0, r2, #28
 8005f9e:	460c      	mov	r4, r1
 8005fa0:	d458      	bmi.n	8006054 <__sflush_r+0xc0>
 8005fa2:	684b      	ldr	r3, [r1, #4]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	dc05      	bgt.n	8005fb4 <__sflush_r+0x20>
 8005fa8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dc02      	bgt.n	8005fb4 <__sflush_r+0x20>
 8005fae:	2000      	movs	r0, #0
 8005fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005fb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fb6:	2e00      	cmp	r6, #0
 8005fb8:	d0f9      	beq.n	8005fae <__sflush_r+0x1a>
 8005fba:	2300      	movs	r3, #0
 8005fbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005fc0:	682f      	ldr	r7, [r5, #0]
 8005fc2:	602b      	str	r3, [r5, #0]
 8005fc4:	d032      	beq.n	800602c <__sflush_r+0x98>
 8005fc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005fc8:	89a3      	ldrh	r3, [r4, #12]
 8005fca:	075a      	lsls	r2, r3, #29
 8005fcc:	d505      	bpl.n	8005fda <__sflush_r+0x46>
 8005fce:	6863      	ldr	r3, [r4, #4]
 8005fd0:	1ac0      	subs	r0, r0, r3
 8005fd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005fd4:	b10b      	cbz	r3, 8005fda <__sflush_r+0x46>
 8005fd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005fd8:	1ac0      	subs	r0, r0, r3
 8005fda:	2300      	movs	r3, #0
 8005fdc:	4602      	mov	r2, r0
 8005fde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005fe0:	6a21      	ldr	r1, [r4, #32]
 8005fe2:	4628      	mov	r0, r5
 8005fe4:	47b0      	blx	r6
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	89a3      	ldrh	r3, [r4, #12]
 8005fea:	d106      	bne.n	8005ffa <__sflush_r+0x66>
 8005fec:	6829      	ldr	r1, [r5, #0]
 8005fee:	291d      	cmp	r1, #29
 8005ff0:	d82c      	bhi.n	800604c <__sflush_r+0xb8>
 8005ff2:	4a2a      	ldr	r2, [pc, #168]	; (800609c <__sflush_r+0x108>)
 8005ff4:	40ca      	lsrs	r2, r1
 8005ff6:	07d6      	lsls	r6, r2, #31
 8005ff8:	d528      	bpl.n	800604c <__sflush_r+0xb8>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	6062      	str	r2, [r4, #4]
 8005ffe:	04d9      	lsls	r1, r3, #19
 8006000:	6922      	ldr	r2, [r4, #16]
 8006002:	6022      	str	r2, [r4, #0]
 8006004:	d504      	bpl.n	8006010 <__sflush_r+0x7c>
 8006006:	1c42      	adds	r2, r0, #1
 8006008:	d101      	bne.n	800600e <__sflush_r+0x7a>
 800600a:	682b      	ldr	r3, [r5, #0]
 800600c:	b903      	cbnz	r3, 8006010 <__sflush_r+0x7c>
 800600e:	6560      	str	r0, [r4, #84]	; 0x54
 8006010:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006012:	602f      	str	r7, [r5, #0]
 8006014:	2900      	cmp	r1, #0
 8006016:	d0ca      	beq.n	8005fae <__sflush_r+0x1a>
 8006018:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800601c:	4299      	cmp	r1, r3
 800601e:	d002      	beq.n	8006026 <__sflush_r+0x92>
 8006020:	4628      	mov	r0, r5
 8006022:	f000 fd7d 	bl	8006b20 <_free_r>
 8006026:	2000      	movs	r0, #0
 8006028:	6360      	str	r0, [r4, #52]	; 0x34
 800602a:	e7c1      	b.n	8005fb0 <__sflush_r+0x1c>
 800602c:	6a21      	ldr	r1, [r4, #32]
 800602e:	2301      	movs	r3, #1
 8006030:	4628      	mov	r0, r5
 8006032:	47b0      	blx	r6
 8006034:	1c41      	adds	r1, r0, #1
 8006036:	d1c7      	bne.n	8005fc8 <__sflush_r+0x34>
 8006038:	682b      	ldr	r3, [r5, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d0c4      	beq.n	8005fc8 <__sflush_r+0x34>
 800603e:	2b1d      	cmp	r3, #29
 8006040:	d001      	beq.n	8006046 <__sflush_r+0xb2>
 8006042:	2b16      	cmp	r3, #22
 8006044:	d101      	bne.n	800604a <__sflush_r+0xb6>
 8006046:	602f      	str	r7, [r5, #0]
 8006048:	e7b1      	b.n	8005fae <__sflush_r+0x1a>
 800604a:	89a3      	ldrh	r3, [r4, #12]
 800604c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006050:	81a3      	strh	r3, [r4, #12]
 8006052:	e7ad      	b.n	8005fb0 <__sflush_r+0x1c>
 8006054:	690f      	ldr	r7, [r1, #16]
 8006056:	2f00      	cmp	r7, #0
 8006058:	d0a9      	beq.n	8005fae <__sflush_r+0x1a>
 800605a:	0793      	lsls	r3, r2, #30
 800605c:	680e      	ldr	r6, [r1, #0]
 800605e:	bf08      	it	eq
 8006060:	694b      	ldreq	r3, [r1, #20]
 8006062:	600f      	str	r7, [r1, #0]
 8006064:	bf18      	it	ne
 8006066:	2300      	movne	r3, #0
 8006068:	eba6 0807 	sub.w	r8, r6, r7
 800606c:	608b      	str	r3, [r1, #8]
 800606e:	f1b8 0f00 	cmp.w	r8, #0
 8006072:	dd9c      	ble.n	8005fae <__sflush_r+0x1a>
 8006074:	6a21      	ldr	r1, [r4, #32]
 8006076:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006078:	4643      	mov	r3, r8
 800607a:	463a      	mov	r2, r7
 800607c:	4628      	mov	r0, r5
 800607e:	47b0      	blx	r6
 8006080:	2800      	cmp	r0, #0
 8006082:	dc06      	bgt.n	8006092 <__sflush_r+0xfe>
 8006084:	89a3      	ldrh	r3, [r4, #12]
 8006086:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800608a:	81a3      	strh	r3, [r4, #12]
 800608c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006090:	e78e      	b.n	8005fb0 <__sflush_r+0x1c>
 8006092:	4407      	add	r7, r0
 8006094:	eba8 0800 	sub.w	r8, r8, r0
 8006098:	e7e9      	b.n	800606e <__sflush_r+0xda>
 800609a:	bf00      	nop
 800609c:	20400001 	.word	0x20400001

080060a0 <_fflush_r>:
 80060a0:	b538      	push	{r3, r4, r5, lr}
 80060a2:	690b      	ldr	r3, [r1, #16]
 80060a4:	4605      	mov	r5, r0
 80060a6:	460c      	mov	r4, r1
 80060a8:	b913      	cbnz	r3, 80060b0 <_fflush_r+0x10>
 80060aa:	2500      	movs	r5, #0
 80060ac:	4628      	mov	r0, r5
 80060ae:	bd38      	pop	{r3, r4, r5, pc}
 80060b0:	b118      	cbz	r0, 80060ba <_fflush_r+0x1a>
 80060b2:	6983      	ldr	r3, [r0, #24]
 80060b4:	b90b      	cbnz	r3, 80060ba <_fflush_r+0x1a>
 80060b6:	f000 f887 	bl	80061c8 <__sinit>
 80060ba:	4b14      	ldr	r3, [pc, #80]	; (800610c <_fflush_r+0x6c>)
 80060bc:	429c      	cmp	r4, r3
 80060be:	d11b      	bne.n	80060f8 <_fflush_r+0x58>
 80060c0:	686c      	ldr	r4, [r5, #4]
 80060c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d0ef      	beq.n	80060aa <_fflush_r+0xa>
 80060ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80060cc:	07d0      	lsls	r0, r2, #31
 80060ce:	d404      	bmi.n	80060da <_fflush_r+0x3a>
 80060d0:	0599      	lsls	r1, r3, #22
 80060d2:	d402      	bmi.n	80060da <_fflush_r+0x3a>
 80060d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060d6:	f000 f91a 	bl	800630e <__retarget_lock_acquire_recursive>
 80060da:	4628      	mov	r0, r5
 80060dc:	4621      	mov	r1, r4
 80060de:	f7ff ff59 	bl	8005f94 <__sflush_r>
 80060e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80060e4:	07da      	lsls	r2, r3, #31
 80060e6:	4605      	mov	r5, r0
 80060e8:	d4e0      	bmi.n	80060ac <_fflush_r+0xc>
 80060ea:	89a3      	ldrh	r3, [r4, #12]
 80060ec:	059b      	lsls	r3, r3, #22
 80060ee:	d4dd      	bmi.n	80060ac <_fflush_r+0xc>
 80060f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80060f2:	f000 f90d 	bl	8006310 <__retarget_lock_release_recursive>
 80060f6:	e7d9      	b.n	80060ac <_fflush_r+0xc>
 80060f8:	4b05      	ldr	r3, [pc, #20]	; (8006110 <_fflush_r+0x70>)
 80060fa:	429c      	cmp	r4, r3
 80060fc:	d101      	bne.n	8006102 <_fflush_r+0x62>
 80060fe:	68ac      	ldr	r4, [r5, #8]
 8006100:	e7df      	b.n	80060c2 <_fflush_r+0x22>
 8006102:	4b04      	ldr	r3, [pc, #16]	; (8006114 <_fflush_r+0x74>)
 8006104:	429c      	cmp	r4, r3
 8006106:	bf08      	it	eq
 8006108:	68ec      	ldreq	r4, [r5, #12]
 800610a:	e7da      	b.n	80060c2 <_fflush_r+0x22>
 800610c:	08007788 	.word	0x08007788
 8006110:	080077a8 	.word	0x080077a8
 8006114:	08007768 	.word	0x08007768

08006118 <std>:
 8006118:	2300      	movs	r3, #0
 800611a:	b510      	push	{r4, lr}
 800611c:	4604      	mov	r4, r0
 800611e:	e9c0 3300 	strd	r3, r3, [r0]
 8006122:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006126:	6083      	str	r3, [r0, #8]
 8006128:	8181      	strh	r1, [r0, #12]
 800612a:	6643      	str	r3, [r0, #100]	; 0x64
 800612c:	81c2      	strh	r2, [r0, #14]
 800612e:	6183      	str	r3, [r0, #24]
 8006130:	4619      	mov	r1, r3
 8006132:	2208      	movs	r2, #8
 8006134:	305c      	adds	r0, #92	; 0x5c
 8006136:	f7fe fad3 	bl	80046e0 <memset>
 800613a:	4b05      	ldr	r3, [pc, #20]	; (8006150 <std+0x38>)
 800613c:	6263      	str	r3, [r4, #36]	; 0x24
 800613e:	4b05      	ldr	r3, [pc, #20]	; (8006154 <std+0x3c>)
 8006140:	62a3      	str	r3, [r4, #40]	; 0x28
 8006142:	4b05      	ldr	r3, [pc, #20]	; (8006158 <std+0x40>)
 8006144:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006146:	4b05      	ldr	r3, [pc, #20]	; (800615c <std+0x44>)
 8006148:	6224      	str	r4, [r4, #32]
 800614a:	6323      	str	r3, [r4, #48]	; 0x30
 800614c:	bd10      	pop	{r4, pc}
 800614e:	bf00      	nop
 8006150:	0800726d 	.word	0x0800726d
 8006154:	0800728f 	.word	0x0800728f
 8006158:	080072c7 	.word	0x080072c7
 800615c:	080072eb 	.word	0x080072eb

08006160 <_cleanup_r>:
 8006160:	4901      	ldr	r1, [pc, #4]	; (8006168 <_cleanup_r+0x8>)
 8006162:	f000 b8af 	b.w	80062c4 <_fwalk_reent>
 8006166:	bf00      	nop
 8006168:	080060a1 	.word	0x080060a1

0800616c <__sfmoreglue>:
 800616c:	b570      	push	{r4, r5, r6, lr}
 800616e:	2268      	movs	r2, #104	; 0x68
 8006170:	1e4d      	subs	r5, r1, #1
 8006172:	4355      	muls	r5, r2
 8006174:	460e      	mov	r6, r1
 8006176:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800617a:	f000 fd3d 	bl	8006bf8 <_malloc_r>
 800617e:	4604      	mov	r4, r0
 8006180:	b140      	cbz	r0, 8006194 <__sfmoreglue+0x28>
 8006182:	2100      	movs	r1, #0
 8006184:	e9c0 1600 	strd	r1, r6, [r0]
 8006188:	300c      	adds	r0, #12
 800618a:	60a0      	str	r0, [r4, #8]
 800618c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006190:	f7fe faa6 	bl	80046e0 <memset>
 8006194:	4620      	mov	r0, r4
 8006196:	bd70      	pop	{r4, r5, r6, pc}

08006198 <__sfp_lock_acquire>:
 8006198:	4801      	ldr	r0, [pc, #4]	; (80061a0 <__sfp_lock_acquire+0x8>)
 800619a:	f000 b8b8 	b.w	800630e <__retarget_lock_acquire_recursive>
 800619e:	bf00      	nop
 80061a0:	20000409 	.word	0x20000409

080061a4 <__sfp_lock_release>:
 80061a4:	4801      	ldr	r0, [pc, #4]	; (80061ac <__sfp_lock_release+0x8>)
 80061a6:	f000 b8b3 	b.w	8006310 <__retarget_lock_release_recursive>
 80061aa:	bf00      	nop
 80061ac:	20000409 	.word	0x20000409

080061b0 <__sinit_lock_acquire>:
 80061b0:	4801      	ldr	r0, [pc, #4]	; (80061b8 <__sinit_lock_acquire+0x8>)
 80061b2:	f000 b8ac 	b.w	800630e <__retarget_lock_acquire_recursive>
 80061b6:	bf00      	nop
 80061b8:	2000040a 	.word	0x2000040a

080061bc <__sinit_lock_release>:
 80061bc:	4801      	ldr	r0, [pc, #4]	; (80061c4 <__sinit_lock_release+0x8>)
 80061be:	f000 b8a7 	b.w	8006310 <__retarget_lock_release_recursive>
 80061c2:	bf00      	nop
 80061c4:	2000040a 	.word	0x2000040a

080061c8 <__sinit>:
 80061c8:	b510      	push	{r4, lr}
 80061ca:	4604      	mov	r4, r0
 80061cc:	f7ff fff0 	bl	80061b0 <__sinit_lock_acquire>
 80061d0:	69a3      	ldr	r3, [r4, #24]
 80061d2:	b11b      	cbz	r3, 80061dc <__sinit+0x14>
 80061d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80061d8:	f7ff bff0 	b.w	80061bc <__sinit_lock_release>
 80061dc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80061e0:	6523      	str	r3, [r4, #80]	; 0x50
 80061e2:	4b13      	ldr	r3, [pc, #76]	; (8006230 <__sinit+0x68>)
 80061e4:	4a13      	ldr	r2, [pc, #76]	; (8006234 <__sinit+0x6c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	62a2      	str	r2, [r4, #40]	; 0x28
 80061ea:	42a3      	cmp	r3, r4
 80061ec:	bf04      	itt	eq
 80061ee:	2301      	moveq	r3, #1
 80061f0:	61a3      	streq	r3, [r4, #24]
 80061f2:	4620      	mov	r0, r4
 80061f4:	f000 f820 	bl	8006238 <__sfp>
 80061f8:	6060      	str	r0, [r4, #4]
 80061fa:	4620      	mov	r0, r4
 80061fc:	f000 f81c 	bl	8006238 <__sfp>
 8006200:	60a0      	str	r0, [r4, #8]
 8006202:	4620      	mov	r0, r4
 8006204:	f000 f818 	bl	8006238 <__sfp>
 8006208:	2200      	movs	r2, #0
 800620a:	60e0      	str	r0, [r4, #12]
 800620c:	2104      	movs	r1, #4
 800620e:	6860      	ldr	r0, [r4, #4]
 8006210:	f7ff ff82 	bl	8006118 <std>
 8006214:	68a0      	ldr	r0, [r4, #8]
 8006216:	2201      	movs	r2, #1
 8006218:	2109      	movs	r1, #9
 800621a:	f7ff ff7d 	bl	8006118 <std>
 800621e:	68e0      	ldr	r0, [r4, #12]
 8006220:	2202      	movs	r2, #2
 8006222:	2112      	movs	r1, #18
 8006224:	f7ff ff78 	bl	8006118 <std>
 8006228:	2301      	movs	r3, #1
 800622a:	61a3      	str	r3, [r4, #24]
 800622c:	e7d2      	b.n	80061d4 <__sinit+0xc>
 800622e:	bf00      	nop
 8006230:	080076a0 	.word	0x080076a0
 8006234:	08006161 	.word	0x08006161

08006238 <__sfp>:
 8006238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800623a:	4607      	mov	r7, r0
 800623c:	f7ff ffac 	bl	8006198 <__sfp_lock_acquire>
 8006240:	4b1e      	ldr	r3, [pc, #120]	; (80062bc <__sfp+0x84>)
 8006242:	681e      	ldr	r6, [r3, #0]
 8006244:	69b3      	ldr	r3, [r6, #24]
 8006246:	b913      	cbnz	r3, 800624e <__sfp+0x16>
 8006248:	4630      	mov	r0, r6
 800624a:	f7ff ffbd 	bl	80061c8 <__sinit>
 800624e:	3648      	adds	r6, #72	; 0x48
 8006250:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006254:	3b01      	subs	r3, #1
 8006256:	d503      	bpl.n	8006260 <__sfp+0x28>
 8006258:	6833      	ldr	r3, [r6, #0]
 800625a:	b30b      	cbz	r3, 80062a0 <__sfp+0x68>
 800625c:	6836      	ldr	r6, [r6, #0]
 800625e:	e7f7      	b.n	8006250 <__sfp+0x18>
 8006260:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006264:	b9d5      	cbnz	r5, 800629c <__sfp+0x64>
 8006266:	4b16      	ldr	r3, [pc, #88]	; (80062c0 <__sfp+0x88>)
 8006268:	60e3      	str	r3, [r4, #12]
 800626a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800626e:	6665      	str	r5, [r4, #100]	; 0x64
 8006270:	f000 f84c 	bl	800630c <__retarget_lock_init_recursive>
 8006274:	f7ff ff96 	bl	80061a4 <__sfp_lock_release>
 8006278:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800627c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006280:	6025      	str	r5, [r4, #0]
 8006282:	61a5      	str	r5, [r4, #24]
 8006284:	2208      	movs	r2, #8
 8006286:	4629      	mov	r1, r5
 8006288:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800628c:	f7fe fa28 	bl	80046e0 <memset>
 8006290:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006294:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006298:	4620      	mov	r0, r4
 800629a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800629c:	3468      	adds	r4, #104	; 0x68
 800629e:	e7d9      	b.n	8006254 <__sfp+0x1c>
 80062a0:	2104      	movs	r1, #4
 80062a2:	4638      	mov	r0, r7
 80062a4:	f7ff ff62 	bl	800616c <__sfmoreglue>
 80062a8:	4604      	mov	r4, r0
 80062aa:	6030      	str	r0, [r6, #0]
 80062ac:	2800      	cmp	r0, #0
 80062ae:	d1d5      	bne.n	800625c <__sfp+0x24>
 80062b0:	f7ff ff78 	bl	80061a4 <__sfp_lock_release>
 80062b4:	230c      	movs	r3, #12
 80062b6:	603b      	str	r3, [r7, #0]
 80062b8:	e7ee      	b.n	8006298 <__sfp+0x60>
 80062ba:	bf00      	nop
 80062bc:	080076a0 	.word	0x080076a0
 80062c0:	ffff0001 	.word	0xffff0001

080062c4 <_fwalk_reent>:
 80062c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062c8:	4606      	mov	r6, r0
 80062ca:	4688      	mov	r8, r1
 80062cc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80062d0:	2700      	movs	r7, #0
 80062d2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80062d6:	f1b9 0901 	subs.w	r9, r9, #1
 80062da:	d505      	bpl.n	80062e8 <_fwalk_reent+0x24>
 80062dc:	6824      	ldr	r4, [r4, #0]
 80062de:	2c00      	cmp	r4, #0
 80062e0:	d1f7      	bne.n	80062d2 <_fwalk_reent+0xe>
 80062e2:	4638      	mov	r0, r7
 80062e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062e8:	89ab      	ldrh	r3, [r5, #12]
 80062ea:	2b01      	cmp	r3, #1
 80062ec:	d907      	bls.n	80062fe <_fwalk_reent+0x3a>
 80062ee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062f2:	3301      	adds	r3, #1
 80062f4:	d003      	beq.n	80062fe <_fwalk_reent+0x3a>
 80062f6:	4629      	mov	r1, r5
 80062f8:	4630      	mov	r0, r6
 80062fa:	47c0      	blx	r8
 80062fc:	4307      	orrs	r7, r0
 80062fe:	3568      	adds	r5, #104	; 0x68
 8006300:	e7e9      	b.n	80062d6 <_fwalk_reent+0x12>
	...

08006304 <_localeconv_r>:
 8006304:	4800      	ldr	r0, [pc, #0]	; (8006308 <_localeconv_r+0x4>)
 8006306:	4770      	bx	lr
 8006308:	20000164 	.word	0x20000164

0800630c <__retarget_lock_init_recursive>:
 800630c:	4770      	bx	lr

0800630e <__retarget_lock_acquire_recursive>:
 800630e:	4770      	bx	lr

08006310 <__retarget_lock_release_recursive>:
 8006310:	4770      	bx	lr

08006312 <__swhatbuf_r>:
 8006312:	b570      	push	{r4, r5, r6, lr}
 8006314:	460e      	mov	r6, r1
 8006316:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631a:	2900      	cmp	r1, #0
 800631c:	b096      	sub	sp, #88	; 0x58
 800631e:	4614      	mov	r4, r2
 8006320:	461d      	mov	r5, r3
 8006322:	da08      	bge.n	8006336 <__swhatbuf_r+0x24>
 8006324:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006328:	2200      	movs	r2, #0
 800632a:	602a      	str	r2, [r5, #0]
 800632c:	061a      	lsls	r2, r3, #24
 800632e:	d410      	bmi.n	8006352 <__swhatbuf_r+0x40>
 8006330:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006334:	e00e      	b.n	8006354 <__swhatbuf_r+0x42>
 8006336:	466a      	mov	r2, sp
 8006338:	f001 f82e 	bl	8007398 <_fstat_r>
 800633c:	2800      	cmp	r0, #0
 800633e:	dbf1      	blt.n	8006324 <__swhatbuf_r+0x12>
 8006340:	9a01      	ldr	r2, [sp, #4]
 8006342:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006346:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800634a:	425a      	negs	r2, r3
 800634c:	415a      	adcs	r2, r3
 800634e:	602a      	str	r2, [r5, #0]
 8006350:	e7ee      	b.n	8006330 <__swhatbuf_r+0x1e>
 8006352:	2340      	movs	r3, #64	; 0x40
 8006354:	2000      	movs	r0, #0
 8006356:	6023      	str	r3, [r4, #0]
 8006358:	b016      	add	sp, #88	; 0x58
 800635a:	bd70      	pop	{r4, r5, r6, pc}

0800635c <__smakebuf_r>:
 800635c:	898b      	ldrh	r3, [r1, #12]
 800635e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006360:	079d      	lsls	r5, r3, #30
 8006362:	4606      	mov	r6, r0
 8006364:	460c      	mov	r4, r1
 8006366:	d507      	bpl.n	8006378 <__smakebuf_r+0x1c>
 8006368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800636c:	6023      	str	r3, [r4, #0]
 800636e:	6123      	str	r3, [r4, #16]
 8006370:	2301      	movs	r3, #1
 8006372:	6163      	str	r3, [r4, #20]
 8006374:	b002      	add	sp, #8
 8006376:	bd70      	pop	{r4, r5, r6, pc}
 8006378:	ab01      	add	r3, sp, #4
 800637a:	466a      	mov	r2, sp
 800637c:	f7ff ffc9 	bl	8006312 <__swhatbuf_r>
 8006380:	9900      	ldr	r1, [sp, #0]
 8006382:	4605      	mov	r5, r0
 8006384:	4630      	mov	r0, r6
 8006386:	f000 fc37 	bl	8006bf8 <_malloc_r>
 800638a:	b948      	cbnz	r0, 80063a0 <__smakebuf_r+0x44>
 800638c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006390:	059a      	lsls	r2, r3, #22
 8006392:	d4ef      	bmi.n	8006374 <__smakebuf_r+0x18>
 8006394:	f023 0303 	bic.w	r3, r3, #3
 8006398:	f043 0302 	orr.w	r3, r3, #2
 800639c:	81a3      	strh	r3, [r4, #12]
 800639e:	e7e3      	b.n	8006368 <__smakebuf_r+0xc>
 80063a0:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <__smakebuf_r+0x7c>)
 80063a2:	62b3      	str	r3, [r6, #40]	; 0x28
 80063a4:	89a3      	ldrh	r3, [r4, #12]
 80063a6:	6020      	str	r0, [r4, #0]
 80063a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ac:	81a3      	strh	r3, [r4, #12]
 80063ae:	9b00      	ldr	r3, [sp, #0]
 80063b0:	6163      	str	r3, [r4, #20]
 80063b2:	9b01      	ldr	r3, [sp, #4]
 80063b4:	6120      	str	r0, [r4, #16]
 80063b6:	b15b      	cbz	r3, 80063d0 <__smakebuf_r+0x74>
 80063b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063bc:	4630      	mov	r0, r6
 80063be:	f000 fffd 	bl	80073bc <_isatty_r>
 80063c2:	b128      	cbz	r0, 80063d0 <__smakebuf_r+0x74>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	f043 0301 	orr.w	r3, r3, #1
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	89a0      	ldrh	r0, [r4, #12]
 80063d2:	4305      	orrs	r5, r0
 80063d4:	81a5      	strh	r5, [r4, #12]
 80063d6:	e7cd      	b.n	8006374 <__smakebuf_r+0x18>
 80063d8:	08006161 	.word	0x08006161

080063dc <malloc>:
 80063dc:	4b02      	ldr	r3, [pc, #8]	; (80063e8 <malloc+0xc>)
 80063de:	4601      	mov	r1, r0
 80063e0:	6818      	ldr	r0, [r3, #0]
 80063e2:	f000 bc09 	b.w	8006bf8 <_malloc_r>
 80063e6:	bf00      	nop
 80063e8:	20000010 	.word	0x20000010

080063ec <_Balloc>:
 80063ec:	b570      	push	{r4, r5, r6, lr}
 80063ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063f0:	4604      	mov	r4, r0
 80063f2:	460d      	mov	r5, r1
 80063f4:	b976      	cbnz	r6, 8006414 <_Balloc+0x28>
 80063f6:	2010      	movs	r0, #16
 80063f8:	f7ff fff0 	bl	80063dc <malloc>
 80063fc:	4602      	mov	r2, r0
 80063fe:	6260      	str	r0, [r4, #36]	; 0x24
 8006400:	b920      	cbnz	r0, 800640c <_Balloc+0x20>
 8006402:	4b18      	ldr	r3, [pc, #96]	; (8006464 <_Balloc+0x78>)
 8006404:	4818      	ldr	r0, [pc, #96]	; (8006468 <_Balloc+0x7c>)
 8006406:	2166      	movs	r1, #102	; 0x66
 8006408:	f000 ff86 	bl	8007318 <__assert_func>
 800640c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006410:	6006      	str	r6, [r0, #0]
 8006412:	60c6      	str	r6, [r0, #12]
 8006414:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006416:	68f3      	ldr	r3, [r6, #12]
 8006418:	b183      	cbz	r3, 800643c <_Balloc+0x50>
 800641a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006422:	b9b8      	cbnz	r0, 8006454 <_Balloc+0x68>
 8006424:	2101      	movs	r1, #1
 8006426:	fa01 f605 	lsl.w	r6, r1, r5
 800642a:	1d72      	adds	r2, r6, #5
 800642c:	0092      	lsls	r2, r2, #2
 800642e:	4620      	mov	r0, r4
 8006430:	f000 fb60 	bl	8006af4 <_calloc_r>
 8006434:	b160      	cbz	r0, 8006450 <_Balloc+0x64>
 8006436:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800643a:	e00e      	b.n	800645a <_Balloc+0x6e>
 800643c:	2221      	movs	r2, #33	; 0x21
 800643e:	2104      	movs	r1, #4
 8006440:	4620      	mov	r0, r4
 8006442:	f000 fb57 	bl	8006af4 <_calloc_r>
 8006446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006448:	60f0      	str	r0, [r6, #12]
 800644a:	68db      	ldr	r3, [r3, #12]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d1e4      	bne.n	800641a <_Balloc+0x2e>
 8006450:	2000      	movs	r0, #0
 8006452:	bd70      	pop	{r4, r5, r6, pc}
 8006454:	6802      	ldr	r2, [r0, #0]
 8006456:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800645a:	2300      	movs	r3, #0
 800645c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006460:	e7f7      	b.n	8006452 <_Balloc+0x66>
 8006462:	bf00      	nop
 8006464:	080076e5 	.word	0x080076e5
 8006468:	080077c8 	.word	0x080077c8

0800646c <_Bfree>:
 800646c:	b570      	push	{r4, r5, r6, lr}
 800646e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006470:	4605      	mov	r5, r0
 8006472:	460c      	mov	r4, r1
 8006474:	b976      	cbnz	r6, 8006494 <_Bfree+0x28>
 8006476:	2010      	movs	r0, #16
 8006478:	f7ff ffb0 	bl	80063dc <malloc>
 800647c:	4602      	mov	r2, r0
 800647e:	6268      	str	r0, [r5, #36]	; 0x24
 8006480:	b920      	cbnz	r0, 800648c <_Bfree+0x20>
 8006482:	4b09      	ldr	r3, [pc, #36]	; (80064a8 <_Bfree+0x3c>)
 8006484:	4809      	ldr	r0, [pc, #36]	; (80064ac <_Bfree+0x40>)
 8006486:	218a      	movs	r1, #138	; 0x8a
 8006488:	f000 ff46 	bl	8007318 <__assert_func>
 800648c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006490:	6006      	str	r6, [r0, #0]
 8006492:	60c6      	str	r6, [r0, #12]
 8006494:	b13c      	cbz	r4, 80064a6 <_Bfree+0x3a>
 8006496:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006498:	6862      	ldr	r2, [r4, #4]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80064a0:	6021      	str	r1, [r4, #0]
 80064a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80064a6:	bd70      	pop	{r4, r5, r6, pc}
 80064a8:	080076e5 	.word	0x080076e5
 80064ac:	080077c8 	.word	0x080077c8

080064b0 <__multadd>:
 80064b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80064b4:	690d      	ldr	r5, [r1, #16]
 80064b6:	4607      	mov	r7, r0
 80064b8:	460c      	mov	r4, r1
 80064ba:	461e      	mov	r6, r3
 80064bc:	f101 0c14 	add.w	ip, r1, #20
 80064c0:	2000      	movs	r0, #0
 80064c2:	f8dc 3000 	ldr.w	r3, [ip]
 80064c6:	b299      	uxth	r1, r3
 80064c8:	fb02 6101 	mla	r1, r2, r1, r6
 80064cc:	0c1e      	lsrs	r6, r3, #16
 80064ce:	0c0b      	lsrs	r3, r1, #16
 80064d0:	fb02 3306 	mla	r3, r2, r6, r3
 80064d4:	b289      	uxth	r1, r1
 80064d6:	3001      	adds	r0, #1
 80064d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80064dc:	4285      	cmp	r5, r0
 80064de:	f84c 1b04 	str.w	r1, [ip], #4
 80064e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80064e6:	dcec      	bgt.n	80064c2 <__multadd+0x12>
 80064e8:	b30e      	cbz	r6, 800652e <__multadd+0x7e>
 80064ea:	68a3      	ldr	r3, [r4, #8]
 80064ec:	42ab      	cmp	r3, r5
 80064ee:	dc19      	bgt.n	8006524 <__multadd+0x74>
 80064f0:	6861      	ldr	r1, [r4, #4]
 80064f2:	4638      	mov	r0, r7
 80064f4:	3101      	adds	r1, #1
 80064f6:	f7ff ff79 	bl	80063ec <_Balloc>
 80064fa:	4680      	mov	r8, r0
 80064fc:	b928      	cbnz	r0, 800650a <__multadd+0x5a>
 80064fe:	4602      	mov	r2, r0
 8006500:	4b0c      	ldr	r3, [pc, #48]	; (8006534 <__multadd+0x84>)
 8006502:	480d      	ldr	r0, [pc, #52]	; (8006538 <__multadd+0x88>)
 8006504:	21b5      	movs	r1, #181	; 0xb5
 8006506:	f000 ff07 	bl	8007318 <__assert_func>
 800650a:	6922      	ldr	r2, [r4, #16]
 800650c:	3202      	adds	r2, #2
 800650e:	f104 010c 	add.w	r1, r4, #12
 8006512:	0092      	lsls	r2, r2, #2
 8006514:	300c      	adds	r0, #12
 8006516:	f7fe f8d5 	bl	80046c4 <memcpy>
 800651a:	4621      	mov	r1, r4
 800651c:	4638      	mov	r0, r7
 800651e:	f7ff ffa5 	bl	800646c <_Bfree>
 8006522:	4644      	mov	r4, r8
 8006524:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006528:	3501      	adds	r5, #1
 800652a:	615e      	str	r6, [r3, #20]
 800652c:	6125      	str	r5, [r4, #16]
 800652e:	4620      	mov	r0, r4
 8006530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006534:	08007757 	.word	0x08007757
 8006538:	080077c8 	.word	0x080077c8

0800653c <__hi0bits>:
 800653c:	0c03      	lsrs	r3, r0, #16
 800653e:	041b      	lsls	r3, r3, #16
 8006540:	b9d3      	cbnz	r3, 8006578 <__hi0bits+0x3c>
 8006542:	0400      	lsls	r0, r0, #16
 8006544:	2310      	movs	r3, #16
 8006546:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800654a:	bf04      	itt	eq
 800654c:	0200      	lsleq	r0, r0, #8
 800654e:	3308      	addeq	r3, #8
 8006550:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8006554:	bf04      	itt	eq
 8006556:	0100      	lsleq	r0, r0, #4
 8006558:	3304      	addeq	r3, #4
 800655a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800655e:	bf04      	itt	eq
 8006560:	0080      	lsleq	r0, r0, #2
 8006562:	3302      	addeq	r3, #2
 8006564:	2800      	cmp	r0, #0
 8006566:	db05      	blt.n	8006574 <__hi0bits+0x38>
 8006568:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800656c:	f103 0301 	add.w	r3, r3, #1
 8006570:	bf08      	it	eq
 8006572:	2320      	moveq	r3, #32
 8006574:	4618      	mov	r0, r3
 8006576:	4770      	bx	lr
 8006578:	2300      	movs	r3, #0
 800657a:	e7e4      	b.n	8006546 <__hi0bits+0xa>

0800657c <__lo0bits>:
 800657c:	6803      	ldr	r3, [r0, #0]
 800657e:	f013 0207 	ands.w	r2, r3, #7
 8006582:	4601      	mov	r1, r0
 8006584:	d00b      	beq.n	800659e <__lo0bits+0x22>
 8006586:	07da      	lsls	r2, r3, #31
 8006588:	d423      	bmi.n	80065d2 <__lo0bits+0x56>
 800658a:	0798      	lsls	r0, r3, #30
 800658c:	bf49      	itett	mi
 800658e:	085b      	lsrmi	r3, r3, #1
 8006590:	089b      	lsrpl	r3, r3, #2
 8006592:	2001      	movmi	r0, #1
 8006594:	600b      	strmi	r3, [r1, #0]
 8006596:	bf5c      	itt	pl
 8006598:	600b      	strpl	r3, [r1, #0]
 800659a:	2002      	movpl	r0, #2
 800659c:	4770      	bx	lr
 800659e:	b298      	uxth	r0, r3
 80065a0:	b9a8      	cbnz	r0, 80065ce <__lo0bits+0x52>
 80065a2:	0c1b      	lsrs	r3, r3, #16
 80065a4:	2010      	movs	r0, #16
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	b90a      	cbnz	r2, 80065ae <__lo0bits+0x32>
 80065aa:	3008      	adds	r0, #8
 80065ac:	0a1b      	lsrs	r3, r3, #8
 80065ae:	071a      	lsls	r2, r3, #28
 80065b0:	bf04      	itt	eq
 80065b2:	091b      	lsreq	r3, r3, #4
 80065b4:	3004      	addeq	r0, #4
 80065b6:	079a      	lsls	r2, r3, #30
 80065b8:	bf04      	itt	eq
 80065ba:	089b      	lsreq	r3, r3, #2
 80065bc:	3002      	addeq	r0, #2
 80065be:	07da      	lsls	r2, r3, #31
 80065c0:	d403      	bmi.n	80065ca <__lo0bits+0x4e>
 80065c2:	085b      	lsrs	r3, r3, #1
 80065c4:	f100 0001 	add.w	r0, r0, #1
 80065c8:	d005      	beq.n	80065d6 <__lo0bits+0x5a>
 80065ca:	600b      	str	r3, [r1, #0]
 80065cc:	4770      	bx	lr
 80065ce:	4610      	mov	r0, r2
 80065d0:	e7e9      	b.n	80065a6 <__lo0bits+0x2a>
 80065d2:	2000      	movs	r0, #0
 80065d4:	4770      	bx	lr
 80065d6:	2020      	movs	r0, #32
 80065d8:	4770      	bx	lr
	...

080065dc <__i2b>:
 80065dc:	b510      	push	{r4, lr}
 80065de:	460c      	mov	r4, r1
 80065e0:	2101      	movs	r1, #1
 80065e2:	f7ff ff03 	bl	80063ec <_Balloc>
 80065e6:	4602      	mov	r2, r0
 80065e8:	b928      	cbnz	r0, 80065f6 <__i2b+0x1a>
 80065ea:	4b05      	ldr	r3, [pc, #20]	; (8006600 <__i2b+0x24>)
 80065ec:	4805      	ldr	r0, [pc, #20]	; (8006604 <__i2b+0x28>)
 80065ee:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065f2:	f000 fe91 	bl	8007318 <__assert_func>
 80065f6:	2301      	movs	r3, #1
 80065f8:	6144      	str	r4, [r0, #20]
 80065fa:	6103      	str	r3, [r0, #16]
 80065fc:	bd10      	pop	{r4, pc}
 80065fe:	bf00      	nop
 8006600:	08007757 	.word	0x08007757
 8006604:	080077c8 	.word	0x080077c8

08006608 <__multiply>:
 8006608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800660c:	4691      	mov	r9, r2
 800660e:	690a      	ldr	r2, [r1, #16]
 8006610:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006614:	429a      	cmp	r2, r3
 8006616:	bfb8      	it	lt
 8006618:	460b      	movlt	r3, r1
 800661a:	460c      	mov	r4, r1
 800661c:	bfbc      	itt	lt
 800661e:	464c      	movlt	r4, r9
 8006620:	4699      	movlt	r9, r3
 8006622:	6927      	ldr	r7, [r4, #16]
 8006624:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006628:	68a3      	ldr	r3, [r4, #8]
 800662a:	6861      	ldr	r1, [r4, #4]
 800662c:	eb07 060a 	add.w	r6, r7, sl
 8006630:	42b3      	cmp	r3, r6
 8006632:	b085      	sub	sp, #20
 8006634:	bfb8      	it	lt
 8006636:	3101      	addlt	r1, #1
 8006638:	f7ff fed8 	bl	80063ec <_Balloc>
 800663c:	b930      	cbnz	r0, 800664c <__multiply+0x44>
 800663e:	4602      	mov	r2, r0
 8006640:	4b44      	ldr	r3, [pc, #272]	; (8006754 <__multiply+0x14c>)
 8006642:	4845      	ldr	r0, [pc, #276]	; (8006758 <__multiply+0x150>)
 8006644:	f240 115d 	movw	r1, #349	; 0x15d
 8006648:	f000 fe66 	bl	8007318 <__assert_func>
 800664c:	f100 0514 	add.w	r5, r0, #20
 8006650:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006654:	462b      	mov	r3, r5
 8006656:	2200      	movs	r2, #0
 8006658:	4543      	cmp	r3, r8
 800665a:	d321      	bcc.n	80066a0 <__multiply+0x98>
 800665c:	f104 0314 	add.w	r3, r4, #20
 8006660:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006664:	f109 0314 	add.w	r3, r9, #20
 8006668:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800666c:	9202      	str	r2, [sp, #8]
 800666e:	1b3a      	subs	r2, r7, r4
 8006670:	3a15      	subs	r2, #21
 8006672:	f022 0203 	bic.w	r2, r2, #3
 8006676:	3204      	adds	r2, #4
 8006678:	f104 0115 	add.w	r1, r4, #21
 800667c:	428f      	cmp	r7, r1
 800667e:	bf38      	it	cc
 8006680:	2204      	movcc	r2, #4
 8006682:	9201      	str	r2, [sp, #4]
 8006684:	9a02      	ldr	r2, [sp, #8]
 8006686:	9303      	str	r3, [sp, #12]
 8006688:	429a      	cmp	r2, r3
 800668a:	d80c      	bhi.n	80066a6 <__multiply+0x9e>
 800668c:	2e00      	cmp	r6, #0
 800668e:	dd03      	ble.n	8006698 <__multiply+0x90>
 8006690:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006694:	2b00      	cmp	r3, #0
 8006696:	d05a      	beq.n	800674e <__multiply+0x146>
 8006698:	6106      	str	r6, [r0, #16]
 800669a:	b005      	add	sp, #20
 800669c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066a0:	f843 2b04 	str.w	r2, [r3], #4
 80066a4:	e7d8      	b.n	8006658 <__multiply+0x50>
 80066a6:	f8b3 a000 	ldrh.w	sl, [r3]
 80066aa:	f1ba 0f00 	cmp.w	sl, #0
 80066ae:	d024      	beq.n	80066fa <__multiply+0xf2>
 80066b0:	f104 0e14 	add.w	lr, r4, #20
 80066b4:	46a9      	mov	r9, r5
 80066b6:	f04f 0c00 	mov.w	ip, #0
 80066ba:	f85e 2b04 	ldr.w	r2, [lr], #4
 80066be:	f8d9 1000 	ldr.w	r1, [r9]
 80066c2:	fa1f fb82 	uxth.w	fp, r2
 80066c6:	b289      	uxth	r1, r1
 80066c8:	fb0a 110b 	mla	r1, sl, fp, r1
 80066cc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80066d0:	f8d9 2000 	ldr.w	r2, [r9]
 80066d4:	4461      	add	r1, ip
 80066d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066da:	fb0a c20b 	mla	r2, sl, fp, ip
 80066de:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066e2:	b289      	uxth	r1, r1
 80066e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066e8:	4577      	cmp	r7, lr
 80066ea:	f849 1b04 	str.w	r1, [r9], #4
 80066ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066f2:	d8e2      	bhi.n	80066ba <__multiply+0xb2>
 80066f4:	9a01      	ldr	r2, [sp, #4]
 80066f6:	f845 c002 	str.w	ip, [r5, r2]
 80066fa:	9a03      	ldr	r2, [sp, #12]
 80066fc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006700:	3304      	adds	r3, #4
 8006702:	f1b9 0f00 	cmp.w	r9, #0
 8006706:	d020      	beq.n	800674a <__multiply+0x142>
 8006708:	6829      	ldr	r1, [r5, #0]
 800670a:	f104 0c14 	add.w	ip, r4, #20
 800670e:	46ae      	mov	lr, r5
 8006710:	f04f 0a00 	mov.w	sl, #0
 8006714:	f8bc b000 	ldrh.w	fp, [ip]
 8006718:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800671c:	fb09 220b 	mla	r2, r9, fp, r2
 8006720:	4492      	add	sl, r2
 8006722:	b289      	uxth	r1, r1
 8006724:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8006728:	f84e 1b04 	str.w	r1, [lr], #4
 800672c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006730:	f8be 1000 	ldrh.w	r1, [lr]
 8006734:	0c12      	lsrs	r2, r2, #16
 8006736:	fb09 1102 	mla	r1, r9, r2, r1
 800673a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800673e:	4567      	cmp	r7, ip
 8006740:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006744:	d8e6      	bhi.n	8006714 <__multiply+0x10c>
 8006746:	9a01      	ldr	r2, [sp, #4]
 8006748:	50a9      	str	r1, [r5, r2]
 800674a:	3504      	adds	r5, #4
 800674c:	e79a      	b.n	8006684 <__multiply+0x7c>
 800674e:	3e01      	subs	r6, #1
 8006750:	e79c      	b.n	800668c <__multiply+0x84>
 8006752:	bf00      	nop
 8006754:	08007757 	.word	0x08007757
 8006758:	080077c8 	.word	0x080077c8

0800675c <__pow5mult>:
 800675c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006760:	4615      	mov	r5, r2
 8006762:	f012 0203 	ands.w	r2, r2, #3
 8006766:	4606      	mov	r6, r0
 8006768:	460f      	mov	r7, r1
 800676a:	d007      	beq.n	800677c <__pow5mult+0x20>
 800676c:	4c25      	ldr	r4, [pc, #148]	; (8006804 <__pow5mult+0xa8>)
 800676e:	3a01      	subs	r2, #1
 8006770:	2300      	movs	r3, #0
 8006772:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006776:	f7ff fe9b 	bl	80064b0 <__multadd>
 800677a:	4607      	mov	r7, r0
 800677c:	10ad      	asrs	r5, r5, #2
 800677e:	d03d      	beq.n	80067fc <__pow5mult+0xa0>
 8006780:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006782:	b97c      	cbnz	r4, 80067a4 <__pow5mult+0x48>
 8006784:	2010      	movs	r0, #16
 8006786:	f7ff fe29 	bl	80063dc <malloc>
 800678a:	4602      	mov	r2, r0
 800678c:	6270      	str	r0, [r6, #36]	; 0x24
 800678e:	b928      	cbnz	r0, 800679c <__pow5mult+0x40>
 8006790:	4b1d      	ldr	r3, [pc, #116]	; (8006808 <__pow5mult+0xac>)
 8006792:	481e      	ldr	r0, [pc, #120]	; (800680c <__pow5mult+0xb0>)
 8006794:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006798:	f000 fdbe 	bl	8007318 <__assert_func>
 800679c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80067a0:	6004      	str	r4, [r0, #0]
 80067a2:	60c4      	str	r4, [r0, #12]
 80067a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80067a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80067ac:	b94c      	cbnz	r4, 80067c2 <__pow5mult+0x66>
 80067ae:	f240 2171 	movw	r1, #625	; 0x271
 80067b2:	4630      	mov	r0, r6
 80067b4:	f7ff ff12 	bl	80065dc <__i2b>
 80067b8:	2300      	movs	r3, #0
 80067ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80067be:	4604      	mov	r4, r0
 80067c0:	6003      	str	r3, [r0, #0]
 80067c2:	f04f 0900 	mov.w	r9, #0
 80067c6:	07eb      	lsls	r3, r5, #31
 80067c8:	d50a      	bpl.n	80067e0 <__pow5mult+0x84>
 80067ca:	4639      	mov	r1, r7
 80067cc:	4622      	mov	r2, r4
 80067ce:	4630      	mov	r0, r6
 80067d0:	f7ff ff1a 	bl	8006608 <__multiply>
 80067d4:	4639      	mov	r1, r7
 80067d6:	4680      	mov	r8, r0
 80067d8:	4630      	mov	r0, r6
 80067da:	f7ff fe47 	bl	800646c <_Bfree>
 80067de:	4647      	mov	r7, r8
 80067e0:	106d      	asrs	r5, r5, #1
 80067e2:	d00b      	beq.n	80067fc <__pow5mult+0xa0>
 80067e4:	6820      	ldr	r0, [r4, #0]
 80067e6:	b938      	cbnz	r0, 80067f8 <__pow5mult+0x9c>
 80067e8:	4622      	mov	r2, r4
 80067ea:	4621      	mov	r1, r4
 80067ec:	4630      	mov	r0, r6
 80067ee:	f7ff ff0b 	bl	8006608 <__multiply>
 80067f2:	6020      	str	r0, [r4, #0]
 80067f4:	f8c0 9000 	str.w	r9, [r0]
 80067f8:	4604      	mov	r4, r0
 80067fa:	e7e4      	b.n	80067c6 <__pow5mult+0x6a>
 80067fc:	4638      	mov	r0, r7
 80067fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006802:	bf00      	nop
 8006804:	08007918 	.word	0x08007918
 8006808:	080076e5 	.word	0x080076e5
 800680c:	080077c8 	.word	0x080077c8

08006810 <__lshift>:
 8006810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006814:	460c      	mov	r4, r1
 8006816:	6849      	ldr	r1, [r1, #4]
 8006818:	6923      	ldr	r3, [r4, #16]
 800681a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800681e:	68a3      	ldr	r3, [r4, #8]
 8006820:	4607      	mov	r7, r0
 8006822:	4691      	mov	r9, r2
 8006824:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006828:	f108 0601 	add.w	r6, r8, #1
 800682c:	42b3      	cmp	r3, r6
 800682e:	db0b      	blt.n	8006848 <__lshift+0x38>
 8006830:	4638      	mov	r0, r7
 8006832:	f7ff fddb 	bl	80063ec <_Balloc>
 8006836:	4605      	mov	r5, r0
 8006838:	b948      	cbnz	r0, 800684e <__lshift+0x3e>
 800683a:	4602      	mov	r2, r0
 800683c:	4b2a      	ldr	r3, [pc, #168]	; (80068e8 <__lshift+0xd8>)
 800683e:	482b      	ldr	r0, [pc, #172]	; (80068ec <__lshift+0xdc>)
 8006840:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006844:	f000 fd68 	bl	8007318 <__assert_func>
 8006848:	3101      	adds	r1, #1
 800684a:	005b      	lsls	r3, r3, #1
 800684c:	e7ee      	b.n	800682c <__lshift+0x1c>
 800684e:	2300      	movs	r3, #0
 8006850:	f100 0114 	add.w	r1, r0, #20
 8006854:	f100 0210 	add.w	r2, r0, #16
 8006858:	4618      	mov	r0, r3
 800685a:	4553      	cmp	r3, sl
 800685c:	db37      	blt.n	80068ce <__lshift+0xbe>
 800685e:	6920      	ldr	r0, [r4, #16]
 8006860:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006864:	f104 0314 	add.w	r3, r4, #20
 8006868:	f019 091f 	ands.w	r9, r9, #31
 800686c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006870:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006874:	d02f      	beq.n	80068d6 <__lshift+0xc6>
 8006876:	f1c9 0e20 	rsb	lr, r9, #32
 800687a:	468a      	mov	sl, r1
 800687c:	f04f 0c00 	mov.w	ip, #0
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	fa02 f209 	lsl.w	r2, r2, r9
 8006886:	ea42 020c 	orr.w	r2, r2, ip
 800688a:	f84a 2b04 	str.w	r2, [sl], #4
 800688e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006892:	4298      	cmp	r0, r3
 8006894:	fa22 fc0e 	lsr.w	ip, r2, lr
 8006898:	d8f2      	bhi.n	8006880 <__lshift+0x70>
 800689a:	1b03      	subs	r3, r0, r4
 800689c:	3b15      	subs	r3, #21
 800689e:	f023 0303 	bic.w	r3, r3, #3
 80068a2:	3304      	adds	r3, #4
 80068a4:	f104 0215 	add.w	r2, r4, #21
 80068a8:	4290      	cmp	r0, r2
 80068aa:	bf38      	it	cc
 80068ac:	2304      	movcc	r3, #4
 80068ae:	f841 c003 	str.w	ip, [r1, r3]
 80068b2:	f1bc 0f00 	cmp.w	ip, #0
 80068b6:	d001      	beq.n	80068bc <__lshift+0xac>
 80068b8:	f108 0602 	add.w	r6, r8, #2
 80068bc:	3e01      	subs	r6, #1
 80068be:	4638      	mov	r0, r7
 80068c0:	612e      	str	r6, [r5, #16]
 80068c2:	4621      	mov	r1, r4
 80068c4:	f7ff fdd2 	bl	800646c <_Bfree>
 80068c8:	4628      	mov	r0, r5
 80068ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ce:	f842 0f04 	str.w	r0, [r2, #4]!
 80068d2:	3301      	adds	r3, #1
 80068d4:	e7c1      	b.n	800685a <__lshift+0x4a>
 80068d6:	3904      	subs	r1, #4
 80068d8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068dc:	f841 2f04 	str.w	r2, [r1, #4]!
 80068e0:	4298      	cmp	r0, r3
 80068e2:	d8f9      	bhi.n	80068d8 <__lshift+0xc8>
 80068e4:	e7ea      	b.n	80068bc <__lshift+0xac>
 80068e6:	bf00      	nop
 80068e8:	08007757 	.word	0x08007757
 80068ec:	080077c8 	.word	0x080077c8

080068f0 <__mcmp>:
 80068f0:	b530      	push	{r4, r5, lr}
 80068f2:	6902      	ldr	r2, [r0, #16]
 80068f4:	690c      	ldr	r4, [r1, #16]
 80068f6:	1b12      	subs	r2, r2, r4
 80068f8:	d10e      	bne.n	8006918 <__mcmp+0x28>
 80068fa:	f100 0314 	add.w	r3, r0, #20
 80068fe:	3114      	adds	r1, #20
 8006900:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006904:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006908:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800690c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006910:	42a5      	cmp	r5, r4
 8006912:	d003      	beq.n	800691c <__mcmp+0x2c>
 8006914:	d305      	bcc.n	8006922 <__mcmp+0x32>
 8006916:	2201      	movs	r2, #1
 8006918:	4610      	mov	r0, r2
 800691a:	bd30      	pop	{r4, r5, pc}
 800691c:	4283      	cmp	r3, r0
 800691e:	d3f3      	bcc.n	8006908 <__mcmp+0x18>
 8006920:	e7fa      	b.n	8006918 <__mcmp+0x28>
 8006922:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006926:	e7f7      	b.n	8006918 <__mcmp+0x28>

08006928 <__mdiff>:
 8006928:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800692c:	460c      	mov	r4, r1
 800692e:	4606      	mov	r6, r0
 8006930:	4611      	mov	r1, r2
 8006932:	4620      	mov	r0, r4
 8006934:	4690      	mov	r8, r2
 8006936:	f7ff ffdb 	bl	80068f0 <__mcmp>
 800693a:	1e05      	subs	r5, r0, #0
 800693c:	d110      	bne.n	8006960 <__mdiff+0x38>
 800693e:	4629      	mov	r1, r5
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff fd53 	bl	80063ec <_Balloc>
 8006946:	b930      	cbnz	r0, 8006956 <__mdiff+0x2e>
 8006948:	4b3a      	ldr	r3, [pc, #232]	; (8006a34 <__mdiff+0x10c>)
 800694a:	4602      	mov	r2, r0
 800694c:	f240 2132 	movw	r1, #562	; 0x232
 8006950:	4839      	ldr	r0, [pc, #228]	; (8006a38 <__mdiff+0x110>)
 8006952:	f000 fce1 	bl	8007318 <__assert_func>
 8006956:	2301      	movs	r3, #1
 8006958:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800695c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006960:	bfa4      	itt	ge
 8006962:	4643      	movge	r3, r8
 8006964:	46a0      	movge	r8, r4
 8006966:	4630      	mov	r0, r6
 8006968:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800696c:	bfa6      	itte	ge
 800696e:	461c      	movge	r4, r3
 8006970:	2500      	movge	r5, #0
 8006972:	2501      	movlt	r5, #1
 8006974:	f7ff fd3a 	bl	80063ec <_Balloc>
 8006978:	b920      	cbnz	r0, 8006984 <__mdiff+0x5c>
 800697a:	4b2e      	ldr	r3, [pc, #184]	; (8006a34 <__mdiff+0x10c>)
 800697c:	4602      	mov	r2, r0
 800697e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006982:	e7e5      	b.n	8006950 <__mdiff+0x28>
 8006984:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006988:	6926      	ldr	r6, [r4, #16]
 800698a:	60c5      	str	r5, [r0, #12]
 800698c:	f104 0914 	add.w	r9, r4, #20
 8006990:	f108 0514 	add.w	r5, r8, #20
 8006994:	f100 0e14 	add.w	lr, r0, #20
 8006998:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800699c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80069a0:	f108 0210 	add.w	r2, r8, #16
 80069a4:	46f2      	mov	sl, lr
 80069a6:	2100      	movs	r1, #0
 80069a8:	f859 3b04 	ldr.w	r3, [r9], #4
 80069ac:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80069b0:	fa1f f883 	uxth.w	r8, r3
 80069b4:	fa11 f18b 	uxtah	r1, r1, fp
 80069b8:	0c1b      	lsrs	r3, r3, #16
 80069ba:	eba1 0808 	sub.w	r8, r1, r8
 80069be:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80069c2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 80069c6:	fa1f f888 	uxth.w	r8, r8
 80069ca:	1419      	asrs	r1, r3, #16
 80069cc:	454e      	cmp	r6, r9
 80069ce:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80069d2:	f84a 3b04 	str.w	r3, [sl], #4
 80069d6:	d8e7      	bhi.n	80069a8 <__mdiff+0x80>
 80069d8:	1b33      	subs	r3, r6, r4
 80069da:	3b15      	subs	r3, #21
 80069dc:	f023 0303 	bic.w	r3, r3, #3
 80069e0:	3304      	adds	r3, #4
 80069e2:	3415      	adds	r4, #21
 80069e4:	42a6      	cmp	r6, r4
 80069e6:	bf38      	it	cc
 80069e8:	2304      	movcc	r3, #4
 80069ea:	441d      	add	r5, r3
 80069ec:	4473      	add	r3, lr
 80069ee:	469e      	mov	lr, r3
 80069f0:	462e      	mov	r6, r5
 80069f2:	4566      	cmp	r6, ip
 80069f4:	d30e      	bcc.n	8006a14 <__mdiff+0xec>
 80069f6:	f10c 0203 	add.w	r2, ip, #3
 80069fa:	1b52      	subs	r2, r2, r5
 80069fc:	f022 0203 	bic.w	r2, r2, #3
 8006a00:	3d03      	subs	r5, #3
 8006a02:	45ac      	cmp	ip, r5
 8006a04:	bf38      	it	cc
 8006a06:	2200      	movcc	r2, #0
 8006a08:	441a      	add	r2, r3
 8006a0a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8006a0e:	b17b      	cbz	r3, 8006a30 <__mdiff+0x108>
 8006a10:	6107      	str	r7, [r0, #16]
 8006a12:	e7a3      	b.n	800695c <__mdiff+0x34>
 8006a14:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a18:	fa11 f288 	uxtah	r2, r1, r8
 8006a1c:	1414      	asrs	r4, r2, #16
 8006a1e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a22:	b292      	uxth	r2, r2
 8006a24:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006a28:	f84e 2b04 	str.w	r2, [lr], #4
 8006a2c:	1421      	asrs	r1, r4, #16
 8006a2e:	e7e0      	b.n	80069f2 <__mdiff+0xca>
 8006a30:	3f01      	subs	r7, #1
 8006a32:	e7ea      	b.n	8006a0a <__mdiff+0xe2>
 8006a34:	08007757 	.word	0x08007757
 8006a38:	080077c8 	.word	0x080077c8

08006a3c <__d2b>:
 8006a3c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006a40:	4689      	mov	r9, r1
 8006a42:	2101      	movs	r1, #1
 8006a44:	ec57 6b10 	vmov	r6, r7, d0
 8006a48:	4690      	mov	r8, r2
 8006a4a:	f7ff fccf 	bl	80063ec <_Balloc>
 8006a4e:	4604      	mov	r4, r0
 8006a50:	b930      	cbnz	r0, 8006a60 <__d2b+0x24>
 8006a52:	4602      	mov	r2, r0
 8006a54:	4b25      	ldr	r3, [pc, #148]	; (8006aec <__d2b+0xb0>)
 8006a56:	4826      	ldr	r0, [pc, #152]	; (8006af0 <__d2b+0xb4>)
 8006a58:	f240 310a 	movw	r1, #778	; 0x30a
 8006a5c:	f000 fc5c 	bl	8007318 <__assert_func>
 8006a60:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8006a64:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006a68:	bb35      	cbnz	r5, 8006ab8 <__d2b+0x7c>
 8006a6a:	2e00      	cmp	r6, #0
 8006a6c:	9301      	str	r3, [sp, #4]
 8006a6e:	d028      	beq.n	8006ac2 <__d2b+0x86>
 8006a70:	4668      	mov	r0, sp
 8006a72:	9600      	str	r6, [sp, #0]
 8006a74:	f7ff fd82 	bl	800657c <__lo0bits>
 8006a78:	9900      	ldr	r1, [sp, #0]
 8006a7a:	b300      	cbz	r0, 8006abe <__d2b+0x82>
 8006a7c:	9a01      	ldr	r2, [sp, #4]
 8006a7e:	f1c0 0320 	rsb	r3, r0, #32
 8006a82:	fa02 f303 	lsl.w	r3, r2, r3
 8006a86:	430b      	orrs	r3, r1
 8006a88:	40c2      	lsrs	r2, r0
 8006a8a:	6163      	str	r3, [r4, #20]
 8006a8c:	9201      	str	r2, [sp, #4]
 8006a8e:	9b01      	ldr	r3, [sp, #4]
 8006a90:	61a3      	str	r3, [r4, #24]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	bf14      	ite	ne
 8006a96:	2202      	movne	r2, #2
 8006a98:	2201      	moveq	r2, #1
 8006a9a:	6122      	str	r2, [r4, #16]
 8006a9c:	b1d5      	cbz	r5, 8006ad4 <__d2b+0x98>
 8006a9e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006aa2:	4405      	add	r5, r0
 8006aa4:	f8c9 5000 	str.w	r5, [r9]
 8006aa8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006aac:	f8c8 0000 	str.w	r0, [r8]
 8006ab0:	4620      	mov	r0, r4
 8006ab2:	b003      	add	sp, #12
 8006ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006abc:	e7d5      	b.n	8006a6a <__d2b+0x2e>
 8006abe:	6161      	str	r1, [r4, #20]
 8006ac0:	e7e5      	b.n	8006a8e <__d2b+0x52>
 8006ac2:	a801      	add	r0, sp, #4
 8006ac4:	f7ff fd5a 	bl	800657c <__lo0bits>
 8006ac8:	9b01      	ldr	r3, [sp, #4]
 8006aca:	6163      	str	r3, [r4, #20]
 8006acc:	2201      	movs	r2, #1
 8006ace:	6122      	str	r2, [r4, #16]
 8006ad0:	3020      	adds	r0, #32
 8006ad2:	e7e3      	b.n	8006a9c <__d2b+0x60>
 8006ad4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006ad8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006adc:	f8c9 0000 	str.w	r0, [r9]
 8006ae0:	6918      	ldr	r0, [r3, #16]
 8006ae2:	f7ff fd2b 	bl	800653c <__hi0bits>
 8006ae6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006aea:	e7df      	b.n	8006aac <__d2b+0x70>
 8006aec:	08007757 	.word	0x08007757
 8006af0:	080077c8 	.word	0x080077c8

08006af4 <_calloc_r>:
 8006af4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006af6:	fba1 2402 	umull	r2, r4, r1, r2
 8006afa:	b94c      	cbnz	r4, 8006b10 <_calloc_r+0x1c>
 8006afc:	4611      	mov	r1, r2
 8006afe:	9201      	str	r2, [sp, #4]
 8006b00:	f000 f87a 	bl	8006bf8 <_malloc_r>
 8006b04:	9a01      	ldr	r2, [sp, #4]
 8006b06:	4605      	mov	r5, r0
 8006b08:	b930      	cbnz	r0, 8006b18 <_calloc_r+0x24>
 8006b0a:	4628      	mov	r0, r5
 8006b0c:	b003      	add	sp, #12
 8006b0e:	bd30      	pop	{r4, r5, pc}
 8006b10:	220c      	movs	r2, #12
 8006b12:	6002      	str	r2, [r0, #0]
 8006b14:	2500      	movs	r5, #0
 8006b16:	e7f8      	b.n	8006b0a <_calloc_r+0x16>
 8006b18:	4621      	mov	r1, r4
 8006b1a:	f7fd fde1 	bl	80046e0 <memset>
 8006b1e:	e7f4      	b.n	8006b0a <_calloc_r+0x16>

08006b20 <_free_r>:
 8006b20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b22:	2900      	cmp	r1, #0
 8006b24:	d044      	beq.n	8006bb0 <_free_r+0x90>
 8006b26:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b2a:	9001      	str	r0, [sp, #4]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	f1a1 0404 	sub.w	r4, r1, #4
 8006b32:	bfb8      	it	lt
 8006b34:	18e4      	addlt	r4, r4, r3
 8006b36:	f000 fc8f 	bl	8007458 <__malloc_lock>
 8006b3a:	4a1e      	ldr	r2, [pc, #120]	; (8006bb4 <_free_r+0x94>)
 8006b3c:	9801      	ldr	r0, [sp, #4]
 8006b3e:	6813      	ldr	r3, [r2, #0]
 8006b40:	b933      	cbnz	r3, 8006b50 <_free_r+0x30>
 8006b42:	6063      	str	r3, [r4, #4]
 8006b44:	6014      	str	r4, [r2, #0]
 8006b46:	b003      	add	sp, #12
 8006b48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b4c:	f000 bc8a 	b.w	8007464 <__malloc_unlock>
 8006b50:	42a3      	cmp	r3, r4
 8006b52:	d908      	bls.n	8006b66 <_free_r+0x46>
 8006b54:	6825      	ldr	r5, [r4, #0]
 8006b56:	1961      	adds	r1, r4, r5
 8006b58:	428b      	cmp	r3, r1
 8006b5a:	bf01      	itttt	eq
 8006b5c:	6819      	ldreq	r1, [r3, #0]
 8006b5e:	685b      	ldreq	r3, [r3, #4]
 8006b60:	1949      	addeq	r1, r1, r5
 8006b62:	6021      	streq	r1, [r4, #0]
 8006b64:	e7ed      	b.n	8006b42 <_free_r+0x22>
 8006b66:	461a      	mov	r2, r3
 8006b68:	685b      	ldr	r3, [r3, #4]
 8006b6a:	b10b      	cbz	r3, 8006b70 <_free_r+0x50>
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	d9fa      	bls.n	8006b66 <_free_r+0x46>
 8006b70:	6811      	ldr	r1, [r2, #0]
 8006b72:	1855      	adds	r5, r2, r1
 8006b74:	42a5      	cmp	r5, r4
 8006b76:	d10b      	bne.n	8006b90 <_free_r+0x70>
 8006b78:	6824      	ldr	r4, [r4, #0]
 8006b7a:	4421      	add	r1, r4
 8006b7c:	1854      	adds	r4, r2, r1
 8006b7e:	42a3      	cmp	r3, r4
 8006b80:	6011      	str	r1, [r2, #0]
 8006b82:	d1e0      	bne.n	8006b46 <_free_r+0x26>
 8006b84:	681c      	ldr	r4, [r3, #0]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	6053      	str	r3, [r2, #4]
 8006b8a:	4421      	add	r1, r4
 8006b8c:	6011      	str	r1, [r2, #0]
 8006b8e:	e7da      	b.n	8006b46 <_free_r+0x26>
 8006b90:	d902      	bls.n	8006b98 <_free_r+0x78>
 8006b92:	230c      	movs	r3, #12
 8006b94:	6003      	str	r3, [r0, #0]
 8006b96:	e7d6      	b.n	8006b46 <_free_r+0x26>
 8006b98:	6825      	ldr	r5, [r4, #0]
 8006b9a:	1961      	adds	r1, r4, r5
 8006b9c:	428b      	cmp	r3, r1
 8006b9e:	bf04      	itt	eq
 8006ba0:	6819      	ldreq	r1, [r3, #0]
 8006ba2:	685b      	ldreq	r3, [r3, #4]
 8006ba4:	6063      	str	r3, [r4, #4]
 8006ba6:	bf04      	itt	eq
 8006ba8:	1949      	addeq	r1, r1, r5
 8006baa:	6021      	streq	r1, [r4, #0]
 8006bac:	6054      	str	r4, [r2, #4]
 8006bae:	e7ca      	b.n	8006b46 <_free_r+0x26>
 8006bb0:	b003      	add	sp, #12
 8006bb2:	bd30      	pop	{r4, r5, pc}
 8006bb4:	2000040c 	.word	0x2000040c

08006bb8 <sbrk_aligned>:
 8006bb8:	b570      	push	{r4, r5, r6, lr}
 8006bba:	4e0e      	ldr	r6, [pc, #56]	; (8006bf4 <sbrk_aligned+0x3c>)
 8006bbc:	460c      	mov	r4, r1
 8006bbe:	6831      	ldr	r1, [r6, #0]
 8006bc0:	4605      	mov	r5, r0
 8006bc2:	b911      	cbnz	r1, 8006bca <sbrk_aligned+0x12>
 8006bc4:	f000 fb42 	bl	800724c <_sbrk_r>
 8006bc8:	6030      	str	r0, [r6, #0]
 8006bca:	4621      	mov	r1, r4
 8006bcc:	4628      	mov	r0, r5
 8006bce:	f000 fb3d 	bl	800724c <_sbrk_r>
 8006bd2:	1c43      	adds	r3, r0, #1
 8006bd4:	d00a      	beq.n	8006bec <sbrk_aligned+0x34>
 8006bd6:	1cc4      	adds	r4, r0, #3
 8006bd8:	f024 0403 	bic.w	r4, r4, #3
 8006bdc:	42a0      	cmp	r0, r4
 8006bde:	d007      	beq.n	8006bf0 <sbrk_aligned+0x38>
 8006be0:	1a21      	subs	r1, r4, r0
 8006be2:	4628      	mov	r0, r5
 8006be4:	f000 fb32 	bl	800724c <_sbrk_r>
 8006be8:	3001      	adds	r0, #1
 8006bea:	d101      	bne.n	8006bf0 <sbrk_aligned+0x38>
 8006bec:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006bf0:	4620      	mov	r0, r4
 8006bf2:	bd70      	pop	{r4, r5, r6, pc}
 8006bf4:	20000410 	.word	0x20000410

08006bf8 <_malloc_r>:
 8006bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfc:	1ccd      	adds	r5, r1, #3
 8006bfe:	f025 0503 	bic.w	r5, r5, #3
 8006c02:	3508      	adds	r5, #8
 8006c04:	2d0c      	cmp	r5, #12
 8006c06:	bf38      	it	cc
 8006c08:	250c      	movcc	r5, #12
 8006c0a:	2d00      	cmp	r5, #0
 8006c0c:	4607      	mov	r7, r0
 8006c0e:	db01      	blt.n	8006c14 <_malloc_r+0x1c>
 8006c10:	42a9      	cmp	r1, r5
 8006c12:	d905      	bls.n	8006c20 <_malloc_r+0x28>
 8006c14:	230c      	movs	r3, #12
 8006c16:	603b      	str	r3, [r7, #0]
 8006c18:	2600      	movs	r6, #0
 8006c1a:	4630      	mov	r0, r6
 8006c1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c20:	4e2e      	ldr	r6, [pc, #184]	; (8006cdc <_malloc_r+0xe4>)
 8006c22:	f000 fc19 	bl	8007458 <__malloc_lock>
 8006c26:	6833      	ldr	r3, [r6, #0]
 8006c28:	461c      	mov	r4, r3
 8006c2a:	bb34      	cbnz	r4, 8006c7a <_malloc_r+0x82>
 8006c2c:	4629      	mov	r1, r5
 8006c2e:	4638      	mov	r0, r7
 8006c30:	f7ff ffc2 	bl	8006bb8 <sbrk_aligned>
 8006c34:	1c43      	adds	r3, r0, #1
 8006c36:	4604      	mov	r4, r0
 8006c38:	d14d      	bne.n	8006cd6 <_malloc_r+0xde>
 8006c3a:	6834      	ldr	r4, [r6, #0]
 8006c3c:	4626      	mov	r6, r4
 8006c3e:	2e00      	cmp	r6, #0
 8006c40:	d140      	bne.n	8006cc4 <_malloc_r+0xcc>
 8006c42:	6823      	ldr	r3, [r4, #0]
 8006c44:	4631      	mov	r1, r6
 8006c46:	4638      	mov	r0, r7
 8006c48:	eb04 0803 	add.w	r8, r4, r3
 8006c4c:	f000 fafe 	bl	800724c <_sbrk_r>
 8006c50:	4580      	cmp	r8, r0
 8006c52:	d13a      	bne.n	8006cca <_malloc_r+0xd2>
 8006c54:	6821      	ldr	r1, [r4, #0]
 8006c56:	3503      	adds	r5, #3
 8006c58:	1a6d      	subs	r5, r5, r1
 8006c5a:	f025 0503 	bic.w	r5, r5, #3
 8006c5e:	3508      	adds	r5, #8
 8006c60:	2d0c      	cmp	r5, #12
 8006c62:	bf38      	it	cc
 8006c64:	250c      	movcc	r5, #12
 8006c66:	4629      	mov	r1, r5
 8006c68:	4638      	mov	r0, r7
 8006c6a:	f7ff ffa5 	bl	8006bb8 <sbrk_aligned>
 8006c6e:	3001      	adds	r0, #1
 8006c70:	d02b      	beq.n	8006cca <_malloc_r+0xd2>
 8006c72:	6823      	ldr	r3, [r4, #0]
 8006c74:	442b      	add	r3, r5
 8006c76:	6023      	str	r3, [r4, #0]
 8006c78:	e00e      	b.n	8006c98 <_malloc_r+0xa0>
 8006c7a:	6822      	ldr	r2, [r4, #0]
 8006c7c:	1b52      	subs	r2, r2, r5
 8006c7e:	d41e      	bmi.n	8006cbe <_malloc_r+0xc6>
 8006c80:	2a0b      	cmp	r2, #11
 8006c82:	d916      	bls.n	8006cb2 <_malloc_r+0xba>
 8006c84:	1961      	adds	r1, r4, r5
 8006c86:	42a3      	cmp	r3, r4
 8006c88:	6025      	str	r5, [r4, #0]
 8006c8a:	bf18      	it	ne
 8006c8c:	6059      	strne	r1, [r3, #4]
 8006c8e:	6863      	ldr	r3, [r4, #4]
 8006c90:	bf08      	it	eq
 8006c92:	6031      	streq	r1, [r6, #0]
 8006c94:	5162      	str	r2, [r4, r5]
 8006c96:	604b      	str	r3, [r1, #4]
 8006c98:	4638      	mov	r0, r7
 8006c9a:	f104 060b 	add.w	r6, r4, #11
 8006c9e:	f000 fbe1 	bl	8007464 <__malloc_unlock>
 8006ca2:	f026 0607 	bic.w	r6, r6, #7
 8006ca6:	1d23      	adds	r3, r4, #4
 8006ca8:	1af2      	subs	r2, r6, r3
 8006caa:	d0b6      	beq.n	8006c1a <_malloc_r+0x22>
 8006cac:	1b9b      	subs	r3, r3, r6
 8006cae:	50a3      	str	r3, [r4, r2]
 8006cb0:	e7b3      	b.n	8006c1a <_malloc_r+0x22>
 8006cb2:	6862      	ldr	r2, [r4, #4]
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	bf0c      	ite	eq
 8006cb8:	6032      	streq	r2, [r6, #0]
 8006cba:	605a      	strne	r2, [r3, #4]
 8006cbc:	e7ec      	b.n	8006c98 <_malloc_r+0xa0>
 8006cbe:	4623      	mov	r3, r4
 8006cc0:	6864      	ldr	r4, [r4, #4]
 8006cc2:	e7b2      	b.n	8006c2a <_malloc_r+0x32>
 8006cc4:	4634      	mov	r4, r6
 8006cc6:	6876      	ldr	r6, [r6, #4]
 8006cc8:	e7b9      	b.n	8006c3e <_malloc_r+0x46>
 8006cca:	230c      	movs	r3, #12
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4638      	mov	r0, r7
 8006cd0:	f000 fbc8 	bl	8007464 <__malloc_unlock>
 8006cd4:	e7a1      	b.n	8006c1a <_malloc_r+0x22>
 8006cd6:	6025      	str	r5, [r4, #0]
 8006cd8:	e7de      	b.n	8006c98 <_malloc_r+0xa0>
 8006cda:	bf00      	nop
 8006cdc:	2000040c 	.word	0x2000040c

08006ce0 <__ssputs_r>:
 8006ce0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ce4:	688e      	ldr	r6, [r1, #8]
 8006ce6:	429e      	cmp	r6, r3
 8006ce8:	4682      	mov	sl, r0
 8006cea:	460c      	mov	r4, r1
 8006cec:	4690      	mov	r8, r2
 8006cee:	461f      	mov	r7, r3
 8006cf0:	d838      	bhi.n	8006d64 <__ssputs_r+0x84>
 8006cf2:	898a      	ldrh	r2, [r1, #12]
 8006cf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006cf8:	d032      	beq.n	8006d60 <__ssputs_r+0x80>
 8006cfa:	6825      	ldr	r5, [r4, #0]
 8006cfc:	6909      	ldr	r1, [r1, #16]
 8006cfe:	eba5 0901 	sub.w	r9, r5, r1
 8006d02:	6965      	ldr	r5, [r4, #20]
 8006d04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	444b      	add	r3, r9
 8006d10:	106d      	asrs	r5, r5, #1
 8006d12:	429d      	cmp	r5, r3
 8006d14:	bf38      	it	cc
 8006d16:	461d      	movcc	r5, r3
 8006d18:	0553      	lsls	r3, r2, #21
 8006d1a:	d531      	bpl.n	8006d80 <__ssputs_r+0xa0>
 8006d1c:	4629      	mov	r1, r5
 8006d1e:	f7ff ff6b 	bl	8006bf8 <_malloc_r>
 8006d22:	4606      	mov	r6, r0
 8006d24:	b950      	cbnz	r0, 8006d3c <__ssputs_r+0x5c>
 8006d26:	230c      	movs	r3, #12
 8006d28:	f8ca 3000 	str.w	r3, [sl]
 8006d2c:	89a3      	ldrh	r3, [r4, #12]
 8006d2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d32:	81a3      	strh	r3, [r4, #12]
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3c:	6921      	ldr	r1, [r4, #16]
 8006d3e:	464a      	mov	r2, r9
 8006d40:	f7fd fcc0 	bl	80046c4 <memcpy>
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4e:	81a3      	strh	r3, [r4, #12]
 8006d50:	6126      	str	r6, [r4, #16]
 8006d52:	6165      	str	r5, [r4, #20]
 8006d54:	444e      	add	r6, r9
 8006d56:	eba5 0509 	sub.w	r5, r5, r9
 8006d5a:	6026      	str	r6, [r4, #0]
 8006d5c:	60a5      	str	r5, [r4, #8]
 8006d5e:	463e      	mov	r6, r7
 8006d60:	42be      	cmp	r6, r7
 8006d62:	d900      	bls.n	8006d66 <__ssputs_r+0x86>
 8006d64:	463e      	mov	r6, r7
 8006d66:	6820      	ldr	r0, [r4, #0]
 8006d68:	4632      	mov	r2, r6
 8006d6a:	4641      	mov	r1, r8
 8006d6c:	f000 fb5a 	bl	8007424 <memmove>
 8006d70:	68a3      	ldr	r3, [r4, #8]
 8006d72:	1b9b      	subs	r3, r3, r6
 8006d74:	60a3      	str	r3, [r4, #8]
 8006d76:	6823      	ldr	r3, [r4, #0]
 8006d78:	4433      	add	r3, r6
 8006d7a:	6023      	str	r3, [r4, #0]
 8006d7c:	2000      	movs	r0, #0
 8006d7e:	e7db      	b.n	8006d38 <__ssputs_r+0x58>
 8006d80:	462a      	mov	r2, r5
 8006d82:	f000 fb75 	bl	8007470 <_realloc_r>
 8006d86:	4606      	mov	r6, r0
 8006d88:	2800      	cmp	r0, #0
 8006d8a:	d1e1      	bne.n	8006d50 <__ssputs_r+0x70>
 8006d8c:	6921      	ldr	r1, [r4, #16]
 8006d8e:	4650      	mov	r0, sl
 8006d90:	f7ff fec6 	bl	8006b20 <_free_r>
 8006d94:	e7c7      	b.n	8006d26 <__ssputs_r+0x46>
	...

08006d98 <_svfiprintf_r>:
 8006d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	4698      	mov	r8, r3
 8006d9e:	898b      	ldrh	r3, [r1, #12]
 8006da0:	061b      	lsls	r3, r3, #24
 8006da2:	b09d      	sub	sp, #116	; 0x74
 8006da4:	4607      	mov	r7, r0
 8006da6:	460d      	mov	r5, r1
 8006da8:	4614      	mov	r4, r2
 8006daa:	d50e      	bpl.n	8006dca <_svfiprintf_r+0x32>
 8006dac:	690b      	ldr	r3, [r1, #16]
 8006dae:	b963      	cbnz	r3, 8006dca <_svfiprintf_r+0x32>
 8006db0:	2140      	movs	r1, #64	; 0x40
 8006db2:	f7ff ff21 	bl	8006bf8 <_malloc_r>
 8006db6:	6028      	str	r0, [r5, #0]
 8006db8:	6128      	str	r0, [r5, #16]
 8006dba:	b920      	cbnz	r0, 8006dc6 <_svfiprintf_r+0x2e>
 8006dbc:	230c      	movs	r3, #12
 8006dbe:	603b      	str	r3, [r7, #0]
 8006dc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006dc4:	e0d1      	b.n	8006f6a <_svfiprintf_r+0x1d2>
 8006dc6:	2340      	movs	r3, #64	; 0x40
 8006dc8:	616b      	str	r3, [r5, #20]
 8006dca:	2300      	movs	r3, #0
 8006dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8006dce:	2320      	movs	r3, #32
 8006dd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006dd4:	f8cd 800c 	str.w	r8, [sp, #12]
 8006dd8:	2330      	movs	r3, #48	; 0x30
 8006dda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006f84 <_svfiprintf_r+0x1ec>
 8006dde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006de2:	f04f 0901 	mov.w	r9, #1
 8006de6:	4623      	mov	r3, r4
 8006de8:	469a      	mov	sl, r3
 8006dea:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006dee:	b10a      	cbz	r2, 8006df4 <_svfiprintf_r+0x5c>
 8006df0:	2a25      	cmp	r2, #37	; 0x25
 8006df2:	d1f9      	bne.n	8006de8 <_svfiprintf_r+0x50>
 8006df4:	ebba 0b04 	subs.w	fp, sl, r4
 8006df8:	d00b      	beq.n	8006e12 <_svfiprintf_r+0x7a>
 8006dfa:	465b      	mov	r3, fp
 8006dfc:	4622      	mov	r2, r4
 8006dfe:	4629      	mov	r1, r5
 8006e00:	4638      	mov	r0, r7
 8006e02:	f7ff ff6d 	bl	8006ce0 <__ssputs_r>
 8006e06:	3001      	adds	r0, #1
 8006e08:	f000 80aa 	beq.w	8006f60 <_svfiprintf_r+0x1c8>
 8006e0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e0e:	445a      	add	r2, fp
 8006e10:	9209      	str	r2, [sp, #36]	; 0x24
 8006e12:	f89a 3000 	ldrb.w	r3, [sl]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	f000 80a2 	beq.w	8006f60 <_svfiprintf_r+0x1c8>
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006e22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e26:	f10a 0a01 	add.w	sl, sl, #1
 8006e2a:	9304      	str	r3, [sp, #16]
 8006e2c:	9307      	str	r3, [sp, #28]
 8006e2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e32:	931a      	str	r3, [sp, #104]	; 0x68
 8006e34:	4654      	mov	r4, sl
 8006e36:	2205      	movs	r2, #5
 8006e38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e3c:	4851      	ldr	r0, [pc, #324]	; (8006f84 <_svfiprintf_r+0x1ec>)
 8006e3e:	f7f9 f9df 	bl	8000200 <memchr>
 8006e42:	9a04      	ldr	r2, [sp, #16]
 8006e44:	b9d8      	cbnz	r0, 8006e7e <_svfiprintf_r+0xe6>
 8006e46:	06d0      	lsls	r0, r2, #27
 8006e48:	bf44      	itt	mi
 8006e4a:	2320      	movmi	r3, #32
 8006e4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e50:	0711      	lsls	r1, r2, #28
 8006e52:	bf44      	itt	mi
 8006e54:	232b      	movmi	r3, #43	; 0x2b
 8006e56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e5a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e5e:	2b2a      	cmp	r3, #42	; 0x2a
 8006e60:	d015      	beq.n	8006e8e <_svfiprintf_r+0xf6>
 8006e62:	9a07      	ldr	r2, [sp, #28]
 8006e64:	4654      	mov	r4, sl
 8006e66:	2000      	movs	r0, #0
 8006e68:	f04f 0c0a 	mov.w	ip, #10
 8006e6c:	4621      	mov	r1, r4
 8006e6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e72:	3b30      	subs	r3, #48	; 0x30
 8006e74:	2b09      	cmp	r3, #9
 8006e76:	d94e      	bls.n	8006f16 <_svfiprintf_r+0x17e>
 8006e78:	b1b0      	cbz	r0, 8006ea8 <_svfiprintf_r+0x110>
 8006e7a:	9207      	str	r2, [sp, #28]
 8006e7c:	e014      	b.n	8006ea8 <_svfiprintf_r+0x110>
 8006e7e:	eba0 0308 	sub.w	r3, r0, r8
 8006e82:	fa09 f303 	lsl.w	r3, r9, r3
 8006e86:	4313      	orrs	r3, r2
 8006e88:	9304      	str	r3, [sp, #16]
 8006e8a:	46a2      	mov	sl, r4
 8006e8c:	e7d2      	b.n	8006e34 <_svfiprintf_r+0x9c>
 8006e8e:	9b03      	ldr	r3, [sp, #12]
 8006e90:	1d19      	adds	r1, r3, #4
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	9103      	str	r1, [sp, #12]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	bfbb      	ittet	lt
 8006e9a:	425b      	neglt	r3, r3
 8006e9c:	f042 0202 	orrlt.w	r2, r2, #2
 8006ea0:	9307      	strge	r3, [sp, #28]
 8006ea2:	9307      	strlt	r3, [sp, #28]
 8006ea4:	bfb8      	it	lt
 8006ea6:	9204      	strlt	r2, [sp, #16]
 8006ea8:	7823      	ldrb	r3, [r4, #0]
 8006eaa:	2b2e      	cmp	r3, #46	; 0x2e
 8006eac:	d10c      	bne.n	8006ec8 <_svfiprintf_r+0x130>
 8006eae:	7863      	ldrb	r3, [r4, #1]
 8006eb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006eb2:	d135      	bne.n	8006f20 <_svfiprintf_r+0x188>
 8006eb4:	9b03      	ldr	r3, [sp, #12]
 8006eb6:	1d1a      	adds	r2, r3, #4
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	9203      	str	r2, [sp, #12]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	bfb8      	it	lt
 8006ec0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ec4:	3402      	adds	r4, #2
 8006ec6:	9305      	str	r3, [sp, #20]
 8006ec8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f94 <_svfiprintf_r+0x1fc>
 8006ecc:	7821      	ldrb	r1, [r4, #0]
 8006ece:	2203      	movs	r2, #3
 8006ed0:	4650      	mov	r0, sl
 8006ed2:	f7f9 f995 	bl	8000200 <memchr>
 8006ed6:	b140      	cbz	r0, 8006eea <_svfiprintf_r+0x152>
 8006ed8:	2340      	movs	r3, #64	; 0x40
 8006eda:	eba0 000a 	sub.w	r0, r0, sl
 8006ede:	fa03 f000 	lsl.w	r0, r3, r0
 8006ee2:	9b04      	ldr	r3, [sp, #16]
 8006ee4:	4303      	orrs	r3, r0
 8006ee6:	3401      	adds	r4, #1
 8006ee8:	9304      	str	r3, [sp, #16]
 8006eea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006eee:	4826      	ldr	r0, [pc, #152]	; (8006f88 <_svfiprintf_r+0x1f0>)
 8006ef0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006ef4:	2206      	movs	r2, #6
 8006ef6:	f7f9 f983 	bl	8000200 <memchr>
 8006efa:	2800      	cmp	r0, #0
 8006efc:	d038      	beq.n	8006f70 <_svfiprintf_r+0x1d8>
 8006efe:	4b23      	ldr	r3, [pc, #140]	; (8006f8c <_svfiprintf_r+0x1f4>)
 8006f00:	bb1b      	cbnz	r3, 8006f4a <_svfiprintf_r+0x1b2>
 8006f02:	9b03      	ldr	r3, [sp, #12]
 8006f04:	3307      	adds	r3, #7
 8006f06:	f023 0307 	bic.w	r3, r3, #7
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	9303      	str	r3, [sp, #12]
 8006f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f10:	4433      	add	r3, r6
 8006f12:	9309      	str	r3, [sp, #36]	; 0x24
 8006f14:	e767      	b.n	8006de6 <_svfiprintf_r+0x4e>
 8006f16:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f1a:	460c      	mov	r4, r1
 8006f1c:	2001      	movs	r0, #1
 8006f1e:	e7a5      	b.n	8006e6c <_svfiprintf_r+0xd4>
 8006f20:	2300      	movs	r3, #0
 8006f22:	3401      	adds	r4, #1
 8006f24:	9305      	str	r3, [sp, #20]
 8006f26:	4619      	mov	r1, r3
 8006f28:	f04f 0c0a 	mov.w	ip, #10
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f32:	3a30      	subs	r2, #48	; 0x30
 8006f34:	2a09      	cmp	r2, #9
 8006f36:	d903      	bls.n	8006f40 <_svfiprintf_r+0x1a8>
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d0c5      	beq.n	8006ec8 <_svfiprintf_r+0x130>
 8006f3c:	9105      	str	r1, [sp, #20]
 8006f3e:	e7c3      	b.n	8006ec8 <_svfiprintf_r+0x130>
 8006f40:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f44:	4604      	mov	r4, r0
 8006f46:	2301      	movs	r3, #1
 8006f48:	e7f0      	b.n	8006f2c <_svfiprintf_r+0x194>
 8006f4a:	ab03      	add	r3, sp, #12
 8006f4c:	9300      	str	r3, [sp, #0]
 8006f4e:	462a      	mov	r2, r5
 8006f50:	4b0f      	ldr	r3, [pc, #60]	; (8006f90 <_svfiprintf_r+0x1f8>)
 8006f52:	a904      	add	r1, sp, #16
 8006f54:	4638      	mov	r0, r7
 8006f56:	f7fd fc6b 	bl	8004830 <_printf_float>
 8006f5a:	1c42      	adds	r2, r0, #1
 8006f5c:	4606      	mov	r6, r0
 8006f5e:	d1d6      	bne.n	8006f0e <_svfiprintf_r+0x176>
 8006f60:	89ab      	ldrh	r3, [r5, #12]
 8006f62:	065b      	lsls	r3, r3, #25
 8006f64:	f53f af2c 	bmi.w	8006dc0 <_svfiprintf_r+0x28>
 8006f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f6a:	b01d      	add	sp, #116	; 0x74
 8006f6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f70:	ab03      	add	r3, sp, #12
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	462a      	mov	r2, r5
 8006f76:	4b06      	ldr	r3, [pc, #24]	; (8006f90 <_svfiprintf_r+0x1f8>)
 8006f78:	a904      	add	r1, sp, #16
 8006f7a:	4638      	mov	r0, r7
 8006f7c:	f7fd fefc 	bl	8004d78 <_printf_i>
 8006f80:	e7eb      	b.n	8006f5a <_svfiprintf_r+0x1c2>
 8006f82:	bf00      	nop
 8006f84:	08007924 	.word	0x08007924
 8006f88:	0800792e 	.word	0x0800792e
 8006f8c:	08004831 	.word	0x08004831
 8006f90:	08006ce1 	.word	0x08006ce1
 8006f94:	0800792a 	.word	0x0800792a

08006f98 <__sfputc_r>:
 8006f98:	6893      	ldr	r3, [r2, #8]
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	b410      	push	{r4}
 8006fa0:	6093      	str	r3, [r2, #8]
 8006fa2:	da08      	bge.n	8006fb6 <__sfputc_r+0x1e>
 8006fa4:	6994      	ldr	r4, [r2, #24]
 8006fa6:	42a3      	cmp	r3, r4
 8006fa8:	db01      	blt.n	8006fae <__sfputc_r+0x16>
 8006faa:	290a      	cmp	r1, #10
 8006fac:	d103      	bne.n	8006fb6 <__sfputc_r+0x1e>
 8006fae:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fb2:	f7fe b8b5 	b.w	8005120 <__swbuf_r>
 8006fb6:	6813      	ldr	r3, [r2, #0]
 8006fb8:	1c58      	adds	r0, r3, #1
 8006fba:	6010      	str	r0, [r2, #0]
 8006fbc:	7019      	strb	r1, [r3, #0]
 8006fbe:	4608      	mov	r0, r1
 8006fc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006fc4:	4770      	bx	lr

08006fc6 <__sfputs_r>:
 8006fc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fc8:	4606      	mov	r6, r0
 8006fca:	460f      	mov	r7, r1
 8006fcc:	4614      	mov	r4, r2
 8006fce:	18d5      	adds	r5, r2, r3
 8006fd0:	42ac      	cmp	r4, r5
 8006fd2:	d101      	bne.n	8006fd8 <__sfputs_r+0x12>
 8006fd4:	2000      	movs	r0, #0
 8006fd6:	e007      	b.n	8006fe8 <__sfputs_r+0x22>
 8006fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fdc:	463a      	mov	r2, r7
 8006fde:	4630      	mov	r0, r6
 8006fe0:	f7ff ffda 	bl	8006f98 <__sfputc_r>
 8006fe4:	1c43      	adds	r3, r0, #1
 8006fe6:	d1f3      	bne.n	8006fd0 <__sfputs_r+0xa>
 8006fe8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006fec <_vfiprintf_r>:
 8006fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff0:	460d      	mov	r5, r1
 8006ff2:	b09d      	sub	sp, #116	; 0x74
 8006ff4:	4614      	mov	r4, r2
 8006ff6:	4698      	mov	r8, r3
 8006ff8:	4606      	mov	r6, r0
 8006ffa:	b118      	cbz	r0, 8007004 <_vfiprintf_r+0x18>
 8006ffc:	6983      	ldr	r3, [r0, #24]
 8006ffe:	b90b      	cbnz	r3, 8007004 <_vfiprintf_r+0x18>
 8007000:	f7ff f8e2 	bl	80061c8 <__sinit>
 8007004:	4b89      	ldr	r3, [pc, #548]	; (800722c <_vfiprintf_r+0x240>)
 8007006:	429d      	cmp	r5, r3
 8007008:	d11b      	bne.n	8007042 <_vfiprintf_r+0x56>
 800700a:	6875      	ldr	r5, [r6, #4]
 800700c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800700e:	07d9      	lsls	r1, r3, #31
 8007010:	d405      	bmi.n	800701e <_vfiprintf_r+0x32>
 8007012:	89ab      	ldrh	r3, [r5, #12]
 8007014:	059a      	lsls	r2, r3, #22
 8007016:	d402      	bmi.n	800701e <_vfiprintf_r+0x32>
 8007018:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800701a:	f7ff f978 	bl	800630e <__retarget_lock_acquire_recursive>
 800701e:	89ab      	ldrh	r3, [r5, #12]
 8007020:	071b      	lsls	r3, r3, #28
 8007022:	d501      	bpl.n	8007028 <_vfiprintf_r+0x3c>
 8007024:	692b      	ldr	r3, [r5, #16]
 8007026:	b9eb      	cbnz	r3, 8007064 <_vfiprintf_r+0x78>
 8007028:	4629      	mov	r1, r5
 800702a:	4630      	mov	r0, r6
 800702c:	f7fe f8ca 	bl	80051c4 <__swsetup_r>
 8007030:	b1c0      	cbz	r0, 8007064 <_vfiprintf_r+0x78>
 8007032:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007034:	07dc      	lsls	r4, r3, #31
 8007036:	d50e      	bpl.n	8007056 <_vfiprintf_r+0x6a>
 8007038:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800703c:	b01d      	add	sp, #116	; 0x74
 800703e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007042:	4b7b      	ldr	r3, [pc, #492]	; (8007230 <_vfiprintf_r+0x244>)
 8007044:	429d      	cmp	r5, r3
 8007046:	d101      	bne.n	800704c <_vfiprintf_r+0x60>
 8007048:	68b5      	ldr	r5, [r6, #8]
 800704a:	e7df      	b.n	800700c <_vfiprintf_r+0x20>
 800704c:	4b79      	ldr	r3, [pc, #484]	; (8007234 <_vfiprintf_r+0x248>)
 800704e:	429d      	cmp	r5, r3
 8007050:	bf08      	it	eq
 8007052:	68f5      	ldreq	r5, [r6, #12]
 8007054:	e7da      	b.n	800700c <_vfiprintf_r+0x20>
 8007056:	89ab      	ldrh	r3, [r5, #12]
 8007058:	0598      	lsls	r0, r3, #22
 800705a:	d4ed      	bmi.n	8007038 <_vfiprintf_r+0x4c>
 800705c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800705e:	f7ff f957 	bl	8006310 <__retarget_lock_release_recursive>
 8007062:	e7e9      	b.n	8007038 <_vfiprintf_r+0x4c>
 8007064:	2300      	movs	r3, #0
 8007066:	9309      	str	r3, [sp, #36]	; 0x24
 8007068:	2320      	movs	r3, #32
 800706a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800706e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007072:	2330      	movs	r3, #48	; 0x30
 8007074:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007238 <_vfiprintf_r+0x24c>
 8007078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800707c:	f04f 0901 	mov.w	r9, #1
 8007080:	4623      	mov	r3, r4
 8007082:	469a      	mov	sl, r3
 8007084:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007088:	b10a      	cbz	r2, 800708e <_vfiprintf_r+0xa2>
 800708a:	2a25      	cmp	r2, #37	; 0x25
 800708c:	d1f9      	bne.n	8007082 <_vfiprintf_r+0x96>
 800708e:	ebba 0b04 	subs.w	fp, sl, r4
 8007092:	d00b      	beq.n	80070ac <_vfiprintf_r+0xc0>
 8007094:	465b      	mov	r3, fp
 8007096:	4622      	mov	r2, r4
 8007098:	4629      	mov	r1, r5
 800709a:	4630      	mov	r0, r6
 800709c:	f7ff ff93 	bl	8006fc6 <__sfputs_r>
 80070a0:	3001      	adds	r0, #1
 80070a2:	f000 80aa 	beq.w	80071fa <_vfiprintf_r+0x20e>
 80070a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80070a8:	445a      	add	r2, fp
 80070aa:	9209      	str	r2, [sp, #36]	; 0x24
 80070ac:	f89a 3000 	ldrb.w	r3, [sl]
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	f000 80a2 	beq.w	80071fa <_vfiprintf_r+0x20e>
 80070b6:	2300      	movs	r3, #0
 80070b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80070bc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070c0:	f10a 0a01 	add.w	sl, sl, #1
 80070c4:	9304      	str	r3, [sp, #16]
 80070c6:	9307      	str	r3, [sp, #28]
 80070c8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070cc:	931a      	str	r3, [sp, #104]	; 0x68
 80070ce:	4654      	mov	r4, sl
 80070d0:	2205      	movs	r2, #5
 80070d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070d6:	4858      	ldr	r0, [pc, #352]	; (8007238 <_vfiprintf_r+0x24c>)
 80070d8:	f7f9 f892 	bl	8000200 <memchr>
 80070dc:	9a04      	ldr	r2, [sp, #16]
 80070de:	b9d8      	cbnz	r0, 8007118 <_vfiprintf_r+0x12c>
 80070e0:	06d1      	lsls	r1, r2, #27
 80070e2:	bf44      	itt	mi
 80070e4:	2320      	movmi	r3, #32
 80070e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070ea:	0713      	lsls	r3, r2, #28
 80070ec:	bf44      	itt	mi
 80070ee:	232b      	movmi	r3, #43	; 0x2b
 80070f0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070f4:	f89a 3000 	ldrb.w	r3, [sl]
 80070f8:	2b2a      	cmp	r3, #42	; 0x2a
 80070fa:	d015      	beq.n	8007128 <_vfiprintf_r+0x13c>
 80070fc:	9a07      	ldr	r2, [sp, #28]
 80070fe:	4654      	mov	r4, sl
 8007100:	2000      	movs	r0, #0
 8007102:	f04f 0c0a 	mov.w	ip, #10
 8007106:	4621      	mov	r1, r4
 8007108:	f811 3b01 	ldrb.w	r3, [r1], #1
 800710c:	3b30      	subs	r3, #48	; 0x30
 800710e:	2b09      	cmp	r3, #9
 8007110:	d94e      	bls.n	80071b0 <_vfiprintf_r+0x1c4>
 8007112:	b1b0      	cbz	r0, 8007142 <_vfiprintf_r+0x156>
 8007114:	9207      	str	r2, [sp, #28]
 8007116:	e014      	b.n	8007142 <_vfiprintf_r+0x156>
 8007118:	eba0 0308 	sub.w	r3, r0, r8
 800711c:	fa09 f303 	lsl.w	r3, r9, r3
 8007120:	4313      	orrs	r3, r2
 8007122:	9304      	str	r3, [sp, #16]
 8007124:	46a2      	mov	sl, r4
 8007126:	e7d2      	b.n	80070ce <_vfiprintf_r+0xe2>
 8007128:	9b03      	ldr	r3, [sp, #12]
 800712a:	1d19      	adds	r1, r3, #4
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	9103      	str	r1, [sp, #12]
 8007130:	2b00      	cmp	r3, #0
 8007132:	bfbb      	ittet	lt
 8007134:	425b      	neglt	r3, r3
 8007136:	f042 0202 	orrlt.w	r2, r2, #2
 800713a:	9307      	strge	r3, [sp, #28]
 800713c:	9307      	strlt	r3, [sp, #28]
 800713e:	bfb8      	it	lt
 8007140:	9204      	strlt	r2, [sp, #16]
 8007142:	7823      	ldrb	r3, [r4, #0]
 8007144:	2b2e      	cmp	r3, #46	; 0x2e
 8007146:	d10c      	bne.n	8007162 <_vfiprintf_r+0x176>
 8007148:	7863      	ldrb	r3, [r4, #1]
 800714a:	2b2a      	cmp	r3, #42	; 0x2a
 800714c:	d135      	bne.n	80071ba <_vfiprintf_r+0x1ce>
 800714e:	9b03      	ldr	r3, [sp, #12]
 8007150:	1d1a      	adds	r2, r3, #4
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	9203      	str	r2, [sp, #12]
 8007156:	2b00      	cmp	r3, #0
 8007158:	bfb8      	it	lt
 800715a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800715e:	3402      	adds	r4, #2
 8007160:	9305      	str	r3, [sp, #20]
 8007162:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007248 <_vfiprintf_r+0x25c>
 8007166:	7821      	ldrb	r1, [r4, #0]
 8007168:	2203      	movs	r2, #3
 800716a:	4650      	mov	r0, sl
 800716c:	f7f9 f848 	bl	8000200 <memchr>
 8007170:	b140      	cbz	r0, 8007184 <_vfiprintf_r+0x198>
 8007172:	2340      	movs	r3, #64	; 0x40
 8007174:	eba0 000a 	sub.w	r0, r0, sl
 8007178:	fa03 f000 	lsl.w	r0, r3, r0
 800717c:	9b04      	ldr	r3, [sp, #16]
 800717e:	4303      	orrs	r3, r0
 8007180:	3401      	adds	r4, #1
 8007182:	9304      	str	r3, [sp, #16]
 8007184:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007188:	482c      	ldr	r0, [pc, #176]	; (800723c <_vfiprintf_r+0x250>)
 800718a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800718e:	2206      	movs	r2, #6
 8007190:	f7f9 f836 	bl	8000200 <memchr>
 8007194:	2800      	cmp	r0, #0
 8007196:	d03f      	beq.n	8007218 <_vfiprintf_r+0x22c>
 8007198:	4b29      	ldr	r3, [pc, #164]	; (8007240 <_vfiprintf_r+0x254>)
 800719a:	bb1b      	cbnz	r3, 80071e4 <_vfiprintf_r+0x1f8>
 800719c:	9b03      	ldr	r3, [sp, #12]
 800719e:	3307      	adds	r3, #7
 80071a0:	f023 0307 	bic.w	r3, r3, #7
 80071a4:	3308      	adds	r3, #8
 80071a6:	9303      	str	r3, [sp, #12]
 80071a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80071aa:	443b      	add	r3, r7
 80071ac:	9309      	str	r3, [sp, #36]	; 0x24
 80071ae:	e767      	b.n	8007080 <_vfiprintf_r+0x94>
 80071b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80071b4:	460c      	mov	r4, r1
 80071b6:	2001      	movs	r0, #1
 80071b8:	e7a5      	b.n	8007106 <_vfiprintf_r+0x11a>
 80071ba:	2300      	movs	r3, #0
 80071bc:	3401      	adds	r4, #1
 80071be:	9305      	str	r3, [sp, #20]
 80071c0:	4619      	mov	r1, r3
 80071c2:	f04f 0c0a 	mov.w	ip, #10
 80071c6:	4620      	mov	r0, r4
 80071c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071cc:	3a30      	subs	r2, #48	; 0x30
 80071ce:	2a09      	cmp	r2, #9
 80071d0:	d903      	bls.n	80071da <_vfiprintf_r+0x1ee>
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d0c5      	beq.n	8007162 <_vfiprintf_r+0x176>
 80071d6:	9105      	str	r1, [sp, #20]
 80071d8:	e7c3      	b.n	8007162 <_vfiprintf_r+0x176>
 80071da:	fb0c 2101 	mla	r1, ip, r1, r2
 80071de:	4604      	mov	r4, r0
 80071e0:	2301      	movs	r3, #1
 80071e2:	e7f0      	b.n	80071c6 <_vfiprintf_r+0x1da>
 80071e4:	ab03      	add	r3, sp, #12
 80071e6:	9300      	str	r3, [sp, #0]
 80071e8:	462a      	mov	r2, r5
 80071ea:	4b16      	ldr	r3, [pc, #88]	; (8007244 <_vfiprintf_r+0x258>)
 80071ec:	a904      	add	r1, sp, #16
 80071ee:	4630      	mov	r0, r6
 80071f0:	f7fd fb1e 	bl	8004830 <_printf_float>
 80071f4:	4607      	mov	r7, r0
 80071f6:	1c78      	adds	r0, r7, #1
 80071f8:	d1d6      	bne.n	80071a8 <_vfiprintf_r+0x1bc>
 80071fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071fc:	07d9      	lsls	r1, r3, #31
 80071fe:	d405      	bmi.n	800720c <_vfiprintf_r+0x220>
 8007200:	89ab      	ldrh	r3, [r5, #12]
 8007202:	059a      	lsls	r2, r3, #22
 8007204:	d402      	bmi.n	800720c <_vfiprintf_r+0x220>
 8007206:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007208:	f7ff f882 	bl	8006310 <__retarget_lock_release_recursive>
 800720c:	89ab      	ldrh	r3, [r5, #12]
 800720e:	065b      	lsls	r3, r3, #25
 8007210:	f53f af12 	bmi.w	8007038 <_vfiprintf_r+0x4c>
 8007214:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007216:	e711      	b.n	800703c <_vfiprintf_r+0x50>
 8007218:	ab03      	add	r3, sp, #12
 800721a:	9300      	str	r3, [sp, #0]
 800721c:	462a      	mov	r2, r5
 800721e:	4b09      	ldr	r3, [pc, #36]	; (8007244 <_vfiprintf_r+0x258>)
 8007220:	a904      	add	r1, sp, #16
 8007222:	4630      	mov	r0, r6
 8007224:	f7fd fda8 	bl	8004d78 <_printf_i>
 8007228:	e7e4      	b.n	80071f4 <_vfiprintf_r+0x208>
 800722a:	bf00      	nop
 800722c:	08007788 	.word	0x08007788
 8007230:	080077a8 	.word	0x080077a8
 8007234:	08007768 	.word	0x08007768
 8007238:	08007924 	.word	0x08007924
 800723c:	0800792e 	.word	0x0800792e
 8007240:	08004831 	.word	0x08004831
 8007244:	08006fc7 	.word	0x08006fc7
 8007248:	0800792a 	.word	0x0800792a

0800724c <_sbrk_r>:
 800724c:	b538      	push	{r3, r4, r5, lr}
 800724e:	4d06      	ldr	r5, [pc, #24]	; (8007268 <_sbrk_r+0x1c>)
 8007250:	2300      	movs	r3, #0
 8007252:	4604      	mov	r4, r0
 8007254:	4608      	mov	r0, r1
 8007256:	602b      	str	r3, [r5, #0]
 8007258:	f7fa fe80 	bl	8001f5c <_sbrk>
 800725c:	1c43      	adds	r3, r0, #1
 800725e:	d102      	bne.n	8007266 <_sbrk_r+0x1a>
 8007260:	682b      	ldr	r3, [r5, #0]
 8007262:	b103      	cbz	r3, 8007266 <_sbrk_r+0x1a>
 8007264:	6023      	str	r3, [r4, #0]
 8007266:	bd38      	pop	{r3, r4, r5, pc}
 8007268:	20000414 	.word	0x20000414

0800726c <__sread>:
 800726c:	b510      	push	{r4, lr}
 800726e:	460c      	mov	r4, r1
 8007270:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007274:	f000 f92c 	bl	80074d0 <_read_r>
 8007278:	2800      	cmp	r0, #0
 800727a:	bfab      	itete	ge
 800727c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800727e:	89a3      	ldrhlt	r3, [r4, #12]
 8007280:	181b      	addge	r3, r3, r0
 8007282:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007286:	bfac      	ite	ge
 8007288:	6563      	strge	r3, [r4, #84]	; 0x54
 800728a:	81a3      	strhlt	r3, [r4, #12]
 800728c:	bd10      	pop	{r4, pc}

0800728e <__swrite>:
 800728e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007292:	461f      	mov	r7, r3
 8007294:	898b      	ldrh	r3, [r1, #12]
 8007296:	05db      	lsls	r3, r3, #23
 8007298:	4605      	mov	r5, r0
 800729a:	460c      	mov	r4, r1
 800729c:	4616      	mov	r6, r2
 800729e:	d505      	bpl.n	80072ac <__swrite+0x1e>
 80072a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072a4:	2302      	movs	r3, #2
 80072a6:	2200      	movs	r2, #0
 80072a8:	f000 f898 	bl	80073dc <_lseek_r>
 80072ac:	89a3      	ldrh	r3, [r4, #12]
 80072ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80072b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80072b6:	81a3      	strh	r3, [r4, #12]
 80072b8:	4632      	mov	r2, r6
 80072ba:	463b      	mov	r3, r7
 80072bc:	4628      	mov	r0, r5
 80072be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80072c2:	f000 b817 	b.w	80072f4 <_write_r>

080072c6 <__sseek>:
 80072c6:	b510      	push	{r4, lr}
 80072c8:	460c      	mov	r4, r1
 80072ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ce:	f000 f885 	bl	80073dc <_lseek_r>
 80072d2:	1c43      	adds	r3, r0, #1
 80072d4:	89a3      	ldrh	r3, [r4, #12]
 80072d6:	bf15      	itete	ne
 80072d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80072da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80072de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80072e2:	81a3      	strheq	r3, [r4, #12]
 80072e4:	bf18      	it	ne
 80072e6:	81a3      	strhne	r3, [r4, #12]
 80072e8:	bd10      	pop	{r4, pc}

080072ea <__sclose>:
 80072ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072ee:	f000 b831 	b.w	8007354 <_close_r>
	...

080072f4 <_write_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d07      	ldr	r5, [pc, #28]	; (8007314 <_write_r+0x20>)
 80072f8:	4604      	mov	r4, r0
 80072fa:	4608      	mov	r0, r1
 80072fc:	4611      	mov	r1, r2
 80072fe:	2200      	movs	r2, #0
 8007300:	602a      	str	r2, [r5, #0]
 8007302:	461a      	mov	r2, r3
 8007304:	f7fa fdd9 	bl	8001eba <_write>
 8007308:	1c43      	adds	r3, r0, #1
 800730a:	d102      	bne.n	8007312 <_write_r+0x1e>
 800730c:	682b      	ldr	r3, [r5, #0]
 800730e:	b103      	cbz	r3, 8007312 <_write_r+0x1e>
 8007310:	6023      	str	r3, [r4, #0]
 8007312:	bd38      	pop	{r3, r4, r5, pc}
 8007314:	20000414 	.word	0x20000414

08007318 <__assert_func>:
 8007318:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800731a:	4614      	mov	r4, r2
 800731c:	461a      	mov	r2, r3
 800731e:	4b09      	ldr	r3, [pc, #36]	; (8007344 <__assert_func+0x2c>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4605      	mov	r5, r0
 8007324:	68d8      	ldr	r0, [r3, #12]
 8007326:	b14c      	cbz	r4, 800733c <__assert_func+0x24>
 8007328:	4b07      	ldr	r3, [pc, #28]	; (8007348 <__assert_func+0x30>)
 800732a:	9100      	str	r1, [sp, #0]
 800732c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007330:	4906      	ldr	r1, [pc, #24]	; (800734c <__assert_func+0x34>)
 8007332:	462b      	mov	r3, r5
 8007334:	f000 f81e 	bl	8007374 <fiprintf>
 8007338:	f000 f8e9 	bl	800750e <abort>
 800733c:	4b04      	ldr	r3, [pc, #16]	; (8007350 <__assert_func+0x38>)
 800733e:	461c      	mov	r4, r3
 8007340:	e7f3      	b.n	800732a <__assert_func+0x12>
 8007342:	bf00      	nop
 8007344:	20000010 	.word	0x20000010
 8007348:	08007935 	.word	0x08007935
 800734c:	08007942 	.word	0x08007942
 8007350:	08007970 	.word	0x08007970

08007354 <_close_r>:
 8007354:	b538      	push	{r3, r4, r5, lr}
 8007356:	4d06      	ldr	r5, [pc, #24]	; (8007370 <_close_r+0x1c>)
 8007358:	2300      	movs	r3, #0
 800735a:	4604      	mov	r4, r0
 800735c:	4608      	mov	r0, r1
 800735e:	602b      	str	r3, [r5, #0]
 8007360:	f7fa fdc7 	bl	8001ef2 <_close>
 8007364:	1c43      	adds	r3, r0, #1
 8007366:	d102      	bne.n	800736e <_close_r+0x1a>
 8007368:	682b      	ldr	r3, [r5, #0]
 800736a:	b103      	cbz	r3, 800736e <_close_r+0x1a>
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	bd38      	pop	{r3, r4, r5, pc}
 8007370:	20000414 	.word	0x20000414

08007374 <fiprintf>:
 8007374:	b40e      	push	{r1, r2, r3}
 8007376:	b503      	push	{r0, r1, lr}
 8007378:	4601      	mov	r1, r0
 800737a:	ab03      	add	r3, sp, #12
 800737c:	4805      	ldr	r0, [pc, #20]	; (8007394 <fiprintf+0x20>)
 800737e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007382:	6800      	ldr	r0, [r0, #0]
 8007384:	9301      	str	r3, [sp, #4]
 8007386:	f7ff fe31 	bl	8006fec <_vfiprintf_r>
 800738a:	b002      	add	sp, #8
 800738c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007390:	b003      	add	sp, #12
 8007392:	4770      	bx	lr
 8007394:	20000010 	.word	0x20000010

08007398 <_fstat_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d07      	ldr	r5, [pc, #28]	; (80073b8 <_fstat_r+0x20>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	4611      	mov	r1, r2
 80073a4:	602b      	str	r3, [r5, #0]
 80073a6:	f7fa fdb0 	bl	8001f0a <_fstat>
 80073aa:	1c43      	adds	r3, r0, #1
 80073ac:	d102      	bne.n	80073b4 <_fstat_r+0x1c>
 80073ae:	682b      	ldr	r3, [r5, #0]
 80073b0:	b103      	cbz	r3, 80073b4 <_fstat_r+0x1c>
 80073b2:	6023      	str	r3, [r4, #0]
 80073b4:	bd38      	pop	{r3, r4, r5, pc}
 80073b6:	bf00      	nop
 80073b8:	20000414 	.word	0x20000414

080073bc <_isatty_r>:
 80073bc:	b538      	push	{r3, r4, r5, lr}
 80073be:	4d06      	ldr	r5, [pc, #24]	; (80073d8 <_isatty_r+0x1c>)
 80073c0:	2300      	movs	r3, #0
 80073c2:	4604      	mov	r4, r0
 80073c4:	4608      	mov	r0, r1
 80073c6:	602b      	str	r3, [r5, #0]
 80073c8:	f7fa fdaf 	bl	8001f2a <_isatty>
 80073cc:	1c43      	adds	r3, r0, #1
 80073ce:	d102      	bne.n	80073d6 <_isatty_r+0x1a>
 80073d0:	682b      	ldr	r3, [r5, #0]
 80073d2:	b103      	cbz	r3, 80073d6 <_isatty_r+0x1a>
 80073d4:	6023      	str	r3, [r4, #0]
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	20000414 	.word	0x20000414

080073dc <_lseek_r>:
 80073dc:	b538      	push	{r3, r4, r5, lr}
 80073de:	4d07      	ldr	r5, [pc, #28]	; (80073fc <_lseek_r+0x20>)
 80073e0:	4604      	mov	r4, r0
 80073e2:	4608      	mov	r0, r1
 80073e4:	4611      	mov	r1, r2
 80073e6:	2200      	movs	r2, #0
 80073e8:	602a      	str	r2, [r5, #0]
 80073ea:	461a      	mov	r2, r3
 80073ec:	f7fa fda8 	bl	8001f40 <_lseek>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_lseek_r+0x1e>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_lseek_r+0x1e>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	20000414 	.word	0x20000414

08007400 <__ascii_mbtowc>:
 8007400:	b082      	sub	sp, #8
 8007402:	b901      	cbnz	r1, 8007406 <__ascii_mbtowc+0x6>
 8007404:	a901      	add	r1, sp, #4
 8007406:	b142      	cbz	r2, 800741a <__ascii_mbtowc+0x1a>
 8007408:	b14b      	cbz	r3, 800741e <__ascii_mbtowc+0x1e>
 800740a:	7813      	ldrb	r3, [r2, #0]
 800740c:	600b      	str	r3, [r1, #0]
 800740e:	7812      	ldrb	r2, [r2, #0]
 8007410:	1e10      	subs	r0, r2, #0
 8007412:	bf18      	it	ne
 8007414:	2001      	movne	r0, #1
 8007416:	b002      	add	sp, #8
 8007418:	4770      	bx	lr
 800741a:	4610      	mov	r0, r2
 800741c:	e7fb      	b.n	8007416 <__ascii_mbtowc+0x16>
 800741e:	f06f 0001 	mvn.w	r0, #1
 8007422:	e7f8      	b.n	8007416 <__ascii_mbtowc+0x16>

08007424 <memmove>:
 8007424:	4288      	cmp	r0, r1
 8007426:	b510      	push	{r4, lr}
 8007428:	eb01 0402 	add.w	r4, r1, r2
 800742c:	d902      	bls.n	8007434 <memmove+0x10>
 800742e:	4284      	cmp	r4, r0
 8007430:	4623      	mov	r3, r4
 8007432:	d807      	bhi.n	8007444 <memmove+0x20>
 8007434:	1e43      	subs	r3, r0, #1
 8007436:	42a1      	cmp	r1, r4
 8007438:	d008      	beq.n	800744c <memmove+0x28>
 800743a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800743e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007442:	e7f8      	b.n	8007436 <memmove+0x12>
 8007444:	4402      	add	r2, r0
 8007446:	4601      	mov	r1, r0
 8007448:	428a      	cmp	r2, r1
 800744a:	d100      	bne.n	800744e <memmove+0x2a>
 800744c:	bd10      	pop	{r4, pc}
 800744e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007456:	e7f7      	b.n	8007448 <memmove+0x24>

08007458 <__malloc_lock>:
 8007458:	4801      	ldr	r0, [pc, #4]	; (8007460 <__malloc_lock+0x8>)
 800745a:	f7fe bf58 	b.w	800630e <__retarget_lock_acquire_recursive>
 800745e:	bf00      	nop
 8007460:	20000408 	.word	0x20000408

08007464 <__malloc_unlock>:
 8007464:	4801      	ldr	r0, [pc, #4]	; (800746c <__malloc_unlock+0x8>)
 8007466:	f7fe bf53 	b.w	8006310 <__retarget_lock_release_recursive>
 800746a:	bf00      	nop
 800746c:	20000408 	.word	0x20000408

08007470 <_realloc_r>:
 8007470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007474:	4680      	mov	r8, r0
 8007476:	4614      	mov	r4, r2
 8007478:	460e      	mov	r6, r1
 800747a:	b921      	cbnz	r1, 8007486 <_realloc_r+0x16>
 800747c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007480:	4611      	mov	r1, r2
 8007482:	f7ff bbb9 	b.w	8006bf8 <_malloc_r>
 8007486:	b92a      	cbnz	r2, 8007494 <_realloc_r+0x24>
 8007488:	f7ff fb4a 	bl	8006b20 <_free_r>
 800748c:	4625      	mov	r5, r4
 800748e:	4628      	mov	r0, r5
 8007490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007494:	f000 f842 	bl	800751c <_malloc_usable_size_r>
 8007498:	4284      	cmp	r4, r0
 800749a:	4607      	mov	r7, r0
 800749c:	d802      	bhi.n	80074a4 <_realloc_r+0x34>
 800749e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074a2:	d812      	bhi.n	80074ca <_realloc_r+0x5a>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4640      	mov	r0, r8
 80074a8:	f7ff fba6 	bl	8006bf8 <_malloc_r>
 80074ac:	4605      	mov	r5, r0
 80074ae:	2800      	cmp	r0, #0
 80074b0:	d0ed      	beq.n	800748e <_realloc_r+0x1e>
 80074b2:	42bc      	cmp	r4, r7
 80074b4:	4622      	mov	r2, r4
 80074b6:	4631      	mov	r1, r6
 80074b8:	bf28      	it	cs
 80074ba:	463a      	movcs	r2, r7
 80074bc:	f7fd f902 	bl	80046c4 <memcpy>
 80074c0:	4631      	mov	r1, r6
 80074c2:	4640      	mov	r0, r8
 80074c4:	f7ff fb2c 	bl	8006b20 <_free_r>
 80074c8:	e7e1      	b.n	800748e <_realloc_r+0x1e>
 80074ca:	4635      	mov	r5, r6
 80074cc:	e7df      	b.n	800748e <_realloc_r+0x1e>
	...

080074d0 <_read_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	4d07      	ldr	r5, [pc, #28]	; (80074f0 <_read_r+0x20>)
 80074d4:	4604      	mov	r4, r0
 80074d6:	4608      	mov	r0, r1
 80074d8:	4611      	mov	r1, r2
 80074da:	2200      	movs	r2, #0
 80074dc:	602a      	str	r2, [r5, #0]
 80074de:	461a      	mov	r2, r3
 80074e0:	f7fa fcce 	bl	8001e80 <_read>
 80074e4:	1c43      	adds	r3, r0, #1
 80074e6:	d102      	bne.n	80074ee <_read_r+0x1e>
 80074e8:	682b      	ldr	r3, [r5, #0]
 80074ea:	b103      	cbz	r3, 80074ee <_read_r+0x1e>
 80074ec:	6023      	str	r3, [r4, #0]
 80074ee:	bd38      	pop	{r3, r4, r5, pc}
 80074f0:	20000414 	.word	0x20000414

080074f4 <__ascii_wctomb>:
 80074f4:	b149      	cbz	r1, 800750a <__ascii_wctomb+0x16>
 80074f6:	2aff      	cmp	r2, #255	; 0xff
 80074f8:	bf85      	ittet	hi
 80074fa:	238a      	movhi	r3, #138	; 0x8a
 80074fc:	6003      	strhi	r3, [r0, #0]
 80074fe:	700a      	strbls	r2, [r1, #0]
 8007500:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8007504:	bf98      	it	ls
 8007506:	2001      	movls	r0, #1
 8007508:	4770      	bx	lr
 800750a:	4608      	mov	r0, r1
 800750c:	4770      	bx	lr

0800750e <abort>:
 800750e:	b508      	push	{r3, lr}
 8007510:	2006      	movs	r0, #6
 8007512:	f000 f833 	bl	800757c <raise>
 8007516:	2001      	movs	r0, #1
 8007518:	f7fa fca8 	bl	8001e6c <_exit>

0800751c <_malloc_usable_size_r>:
 800751c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007520:	1f18      	subs	r0, r3, #4
 8007522:	2b00      	cmp	r3, #0
 8007524:	bfbc      	itt	lt
 8007526:	580b      	ldrlt	r3, [r1, r0]
 8007528:	18c0      	addlt	r0, r0, r3
 800752a:	4770      	bx	lr

0800752c <_raise_r>:
 800752c:	291f      	cmp	r1, #31
 800752e:	b538      	push	{r3, r4, r5, lr}
 8007530:	4604      	mov	r4, r0
 8007532:	460d      	mov	r5, r1
 8007534:	d904      	bls.n	8007540 <_raise_r+0x14>
 8007536:	2316      	movs	r3, #22
 8007538:	6003      	str	r3, [r0, #0]
 800753a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007542:	b112      	cbz	r2, 800754a <_raise_r+0x1e>
 8007544:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007548:	b94b      	cbnz	r3, 800755e <_raise_r+0x32>
 800754a:	4620      	mov	r0, r4
 800754c:	f000 f830 	bl	80075b0 <_getpid_r>
 8007550:	462a      	mov	r2, r5
 8007552:	4601      	mov	r1, r0
 8007554:	4620      	mov	r0, r4
 8007556:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800755a:	f000 b817 	b.w	800758c <_kill_r>
 800755e:	2b01      	cmp	r3, #1
 8007560:	d00a      	beq.n	8007578 <_raise_r+0x4c>
 8007562:	1c59      	adds	r1, r3, #1
 8007564:	d103      	bne.n	800756e <_raise_r+0x42>
 8007566:	2316      	movs	r3, #22
 8007568:	6003      	str	r3, [r0, #0]
 800756a:	2001      	movs	r0, #1
 800756c:	e7e7      	b.n	800753e <_raise_r+0x12>
 800756e:	2400      	movs	r4, #0
 8007570:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007574:	4628      	mov	r0, r5
 8007576:	4798      	blx	r3
 8007578:	2000      	movs	r0, #0
 800757a:	e7e0      	b.n	800753e <_raise_r+0x12>

0800757c <raise>:
 800757c:	4b02      	ldr	r3, [pc, #8]	; (8007588 <raise+0xc>)
 800757e:	4601      	mov	r1, r0
 8007580:	6818      	ldr	r0, [r3, #0]
 8007582:	f7ff bfd3 	b.w	800752c <_raise_r>
 8007586:	bf00      	nop
 8007588:	20000010 	.word	0x20000010

0800758c <_kill_r>:
 800758c:	b538      	push	{r3, r4, r5, lr}
 800758e:	4d07      	ldr	r5, [pc, #28]	; (80075ac <_kill_r+0x20>)
 8007590:	2300      	movs	r3, #0
 8007592:	4604      	mov	r4, r0
 8007594:	4608      	mov	r0, r1
 8007596:	4611      	mov	r1, r2
 8007598:	602b      	str	r3, [r5, #0]
 800759a:	f7fa fc57 	bl	8001e4c <_kill>
 800759e:	1c43      	adds	r3, r0, #1
 80075a0:	d102      	bne.n	80075a8 <_kill_r+0x1c>
 80075a2:	682b      	ldr	r3, [r5, #0]
 80075a4:	b103      	cbz	r3, 80075a8 <_kill_r+0x1c>
 80075a6:	6023      	str	r3, [r4, #0]
 80075a8:	bd38      	pop	{r3, r4, r5, pc}
 80075aa:	bf00      	nop
 80075ac:	20000414 	.word	0x20000414

080075b0 <_getpid_r>:
 80075b0:	f7fa bc44 	b.w	8001e3c <_getpid>

080075b4 <_init>:
 80075b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075b6:	bf00      	nop
 80075b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075ba:	bc08      	pop	{r3}
 80075bc:	469e      	mov	lr, r3
 80075be:	4770      	bx	lr

080075c0 <_fini>:
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	bf00      	nop
 80075c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c6:	bc08      	pop	{r3}
 80075c8:	469e      	mov	lr, r3
 80075ca:	4770      	bx	lr
